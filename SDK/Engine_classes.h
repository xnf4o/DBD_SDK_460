#pragma once

// Name: DBD, Version: 4.6.0


/*!!DEFINE!!*/

/*!!HELPER_DEF!!*/

/*!!HELPER_INC!!*/

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Engine.actor
// 0x0200 (FullSize[0x0230] - InheritedSize[0x0030])
class Uactor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                          // 0x0030(0x0030) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	unsigned char                                      bNetTemporary : 1;                                         // 0x0060(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetStartup : 1;                                           // 0x0060(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                  // 0x0060(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysRelevant : 1;                                       // 0x0060(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicateMovement : 1;                                    // 0x0060(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bHidden : 1;                                               // 0x0060(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bTearOff : 1;                                              // 0x0060(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bExchangedRoles : 1;                                       // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetLoadOnClient : 1;                                      // 0x0061(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                 // 0x0061(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRelevantForNetworkReplays : 1;                            // 0x0061(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRelevantForLevelBounds : 1;                               // 0x0061(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplayRewindable : 1;                                     // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowTickBeforeBeginPlay : 1;                             // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                              // 0x0061(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bCanBeDamaged : 1;                                         // 0x0061(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bBlockInput : 1;                                           // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollideWhenPlacing : 1;                                   // 0x0062(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                    // 0x0062(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateOverlapEventsDuringLevelStreaming : 1;            // 0x0062(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoresOriginShifting : 1;                                // 0x0062(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableAutoLODGeneration : 1;                              // 0x0062(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsEditorOnlyActor : 1;                                    // 0x0062(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bActorSeamlessTraveled : 1;                                // 0x0062(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicates : 1;                                           // 0x0063(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bCanBeInCluster : 1;                                       // 0x0063(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;               // 0x0063(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_82BY : 5;                                      // 0x0063(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_QQJ7 : 2;                                      // 0x0064(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bActorEnableCollision : 1;                                 // 0x0064(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bActorIsBeingDestroyed : 1;                                // 0x0064(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	Engine_EActorUpdateOverlapsMethod                  UpdateOverlapsMethodDuringLevelStreaming;                  // 0x0065(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	Engine_EActorUpdateOverlapsMethod                  DefaultUpdateOverlapsMethodDuringLevelStreaming;           // 0x0066(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_ENetRole>                       RemoteRole;                                                // 0x0067(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRepMovement                                ReplicatedMovement;                                        // 0x0068(0x0034) (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPrivate)
	float                                              InitialLifeSpan;                                           // 0x009C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CustomTimeDilation;                                        // 0x00A0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ONVT[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRepAttachment                              AttachmentReplication;                                     // 0x00A8(0x0040) (Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class Uactor*                                      owner;                                                     // 0x00E8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       NetDriverName;                                             // 0x00F0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<Engine_ENetRole>                       role;                                                      // 0x00FC(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_ENetDormancy>                   NetDormancy;                                               // 0x00FD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ESpawnActorCollisionHandlingMethod          SpawnCollisionHandlingMethod;                              // 0x00FE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoReceiveInput;                                          // 0x00FF(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InputPriority;                                             // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UVLQ[0x4];                                     // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInputComponent*                             InputComponent;                                            // 0x0108(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetCullDistanceSquared;                                    // 0x0110(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NetTag;                                                    // 0x0114(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetUpdateFrequency;                                        // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinNetUpdateFrequency;                                     // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetPriority;                                               // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SQR2[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Upawn*                                       instigator;                                                // 0x0128(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class Uactor*>                              Children;                                                  // 0x0130(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                             rootComponent;                                             // 0x0140(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMatineeActor*>                       ControllingMatineeActors;                                  // 0x0148(0x0010) (ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_HYN3[0x8];                                     // 0x0158(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               Layers;                                                    // 0x0160(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UChildActorComponent>         ParentComponent;                                           // 0x0170(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_W0AI[0x8];                                     // 0x0178(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               tags;                                                      // 0x0180(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnTakeAnyDamage;                                           // 0x0190(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnTakePointDamage;                                         // 0x0191(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnTakeRadialDamage;                                        // 0x0192(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnActorBeginOverlap;                                       // 0x0193(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnActorEndOverlap;                                         // 0x0194(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnBeginCursorOver;                                         // 0x0195(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnEndCursorOver;                                           // 0x0196(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnClicked;                                                 // 0x0197(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnReleased;                                                // 0x0198(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchBegin;                                         // 0x0199(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnd;                                           // 0x019A(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnter;                                         // 0x019B(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchLeave;                                         // 0x019C(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnActorHit;                                                // 0x019D(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnDestroyed;                                               // 0x019E(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnEndPlay;                                                 // 0x019F(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AW7S[0x60];                                    // 0x01A0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UactorComponent*>                     InstanceComponents;                                        // 0x0200(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UactorComponent*>                     BlueprintCreatedComponents;                                // 0x0210(0x0010) (ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KIQ2[0x10];                                    // 0x0220(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.actor");
		return ptr;
	}



	bool WasRecentlyRendered(float tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class Uactor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class Uactor* NewOwner);
	void SetNetDormancy(TEnumAsByte<Engine_ENetDormancy> NewDormancy);
	void SetLifeSpan(float InLifespan);
	void SetAutoDestroyWhenFinished(bool bVal);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct Fvector& NewScale3D);
	void SetActorRelativeScale3D(const struct Fvector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UactorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class Uactor* PrerequisiteActor);
	void ReceiveTick(float deltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct Fvector& origin, const struct FhitResult& HitInfo, class Ucontroller* InstigatedBy, class Uactor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct Fvector& HitLocation, const struct Fvector& HitNormal, class UprimitiveComponent* hitComponent, const struct FName& BoneName, const struct Fvector& ShotFromDirection, class Ucontroller* InstigatedBy, class Uactor* DamageCauser, const struct FhitResult& HitInfo);
	void ReceiveHit(class UprimitiveComponent* MyComp, class Uactor* other, class UprimitiveComponent* otherComp, bool bSelfMoved, const struct Fvector& HitLocation, const struct Fvector& HitNormal, const struct Fvector& normalImpulse, const struct FhitResult& hit);
	void ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> endPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class Ucontroller* InstigatedBy, class Uactor* DamageCauser);
	void ReceiveActorOnReleased(const struct Fkey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct Fkey& ButtonPressed);
	void ReceiveActorEndOverlap(class Uactor* otherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class Uactor* otherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float seconds, bool bEnableStreaming, int CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class Upawn* NoiseInstigator, const struct Fvector& NoiseLocation, float MaxRange, const struct FName& tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UmaterialInterface* Parent);
	bool K2_TeleportTo(const struct Fvector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeLocation(const struct Fvector& NewRelativeLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocationAndRotation(const struct Fvector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocation(const struct Fvector& NewLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_OnReset();
	void K2_OnEndViewTarget(class UplayerController* PC);
	void K2_OnBecomeViewTarget(class UplayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	TArray<class UactorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);
	struct FRotator K2_GetActorRotation();
	struct Fvector K2_GetActorLocation();
	void K2_DetachFromActor(Engine_EDetachmentRule LocationRule, Engine_EDetachmentRule RotationRule, Engine_EDetachmentRule ScaleRule);
	void K2_DestroyComponent(class UactorComponent* component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class Uactor* ParentActor, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class Uactor* InParentActor, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldOffset(const struct Fvector& DeltaLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalOffset(const struct Fvector& DeltaLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	bool IsOverlappingActor(class Uactor* other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class Uactor* otherActor);
	struct Fvector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class Uactor* otherActor);
	TEnumAsByte<Engine_ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class Uactor* GetParentActor();
	class Uactor* GetOwner();
	void GetOverlappingComponents(TArray<class UprimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(TArray<class Uactor*>* OverlappingActors, class UClass* ClassFilter);
	TEnumAsByte<Engine_ENetRole> GetLocalRole();
	float GetLifeSpan();
	class Ucontroller* GetInstigatorController();
	class Upawn* GetInstigator();
	struct Fvector GetInputVectorAxisValue(const struct Fkey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct Fkey& InputAxisKey);
	float GetHorizontalDotProductTo(class Uactor* otherActor);
	float GetHorizontalDistanceTo(class Uactor* otherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class Uactor* otherActor);
	float GetDistanceTo(class Uactor* otherActor);
	TArray<class UactorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& tag);
	TArray<class UactorComponent*> GetComponentsByInterface(class UClass* Interface);
	class UactorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class Uactor* GetAttachParentActor();
	void GetAttachedActors(TArray<class Uactor*>* OutActors, bool bResetArray);
	void GetAllChildActors(TArray<class Uactor*>* ChildActors, bool bIncludeDescendants);
	struct Fvector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct Fvector GetActorScale3D();
	struct Fvector GetActorRightVector();
	struct Fvector GetActorRelativeScale3D();
	struct Fvector GetActorForwardVector();
	void GetActorEyesViewPoint(struct Fvector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct Fvector* origin, struct Fvector* BoxExtent, bool bIncludeFromChildActors);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class UplayerController* playerController);
	void DisableInput(class UplayerController* playerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UactorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class Uactor* PrerequisiteActor);
	class UactorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& tag);
};

// Class Engine.gameInstance
// 0x01C0 (FullSize[0x01F0] - InheritedSize[0x0030])
class UgameInstance : public UObject
{
public:
	unsigned char                                      UnknownData_91JI[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULocalPlayer*>                        LocalPlayers;                                              // 0x0040(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlineSession*                              OnlineSession;                                             // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UObject*>                             ReferencedObjects;                                         // 0x0058(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_F2D3[0x188];                                   // 0x0068(0x0188) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.gameInstance");
		return ptr;
	}



	void ToggleDisableComponent(const struct FString& comp);
	void ReceiveShutdown();
	void ReceiveInit();
	void HandleTravelError(TEnumAsByte<Engine_ETravelFailure> FailureType);
	void HandleNetworkError(TEnumAsByte<Engine_ENetworkFailure> FailureType, bool bIsServer);
	void DumpDisabledComponents();
	void DebugRemovePlayer(int ControllerID);
	void DebugCreatePlayer(int ControllerID);
};

// Class Engine.Info
// 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
class UInfo : public Uactor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Info");
		return ptr;
	}



};

// Class Engine.BlueprintFunctionLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBlueprintFunctionLibrary : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintFunctionLibrary");
		return ptr;
	}



};

// Class Engine.BlueprintAsyncActionBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UBlueprintAsyncActionBase : public UObject
{
public:
	unsigned char                                      UnknownData_MCH8[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintAsyncActionBase");
		return ptr;
	}



	void activate();
};

// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.OnlineBlueprintCallProxyBase");
		return ptr;
	}



};

// Class Engine.player
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class Uplayer : public UObject
{
public:
	unsigned char                                      UnknownData_5VLG[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UplayerController*                           playerController;                                          // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurrentNetSpeed;                                           // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ConfiguredInternetSpeed;                                   // 0x0044(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ConfiguredLanSpeed;                                        // 0x0048(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XM6K[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.player");
		return ptr;
	}



};

// Class Engine.NetConnection
// 0x19F8 (FullSize[0x1A48] - InheritedSize[0x0050])
class UNetConnection : public Uplayer
{
public:
	TArray<class UChildConnection*>                    Children;                                                  // 0x0050(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                                  Driver;                                                    // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PackageMapClass;                                           // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackageMap*                                 PackageMap;                                                // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class Uchannel*>                            OpenChannels;                                              // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class Uactor*>                              SentTemporaries;                                           // 0x0088(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Uactor*                                      ViewTarget;                                                // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Uactor*                                      OwningActor;                                               // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxPacket;                                                 // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      InternalAck : 1;                                           // 0x00AC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JAN1[0xBB];                                    // 0x00AD(0x00BB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FUniqueNetIdRepl                            playerId;                                                  // 0x0168(0x0028) (HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AYMS[0x48];                                    // 0x0190(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastReceiveTime;                                           // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K543[0x1338];                                  // 0x01E0(0x1338) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class Uchannel*>                            ChannelsToTick;                                            // 0x1518(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_5210[0x520];                                   // 0x1528(0x0520) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}



};

// Class Engine.NetDriver
// 0x0730 (FullSize[0x0760] - InheritedSize[0x0030])
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData_G36U[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NetConnectionClassName;                                    // 0x0038(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ReplicationDriverClassName;                                // 0x0048(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDownloadSize;                                           // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClampListenServerTickRate : 1;                            // 0x005C(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YM0F[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NetServerMaxTickRate;                                      // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxNetTickRate;                                            // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxInternetClientRate;                                     // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxClientRate;                                             // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerTravelPause;                                         // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpawnPrioritySeconds;                                      // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RelevantTimeout;                                           // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KeepAliveTime;                                             // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialConnectTimeout;                                     // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConnectionTimeout;                                         // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                     // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNoTimeouts;                                               // 0x008C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeverApplyNetworkEmulationSettings;                       // 0x008D(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WUI0[0x2];                                     // 0x008E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              ServerConnection;                                          // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNetConnection*>                      ClientConnections;                                         // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ST3D[0x60];                                    // 0x00A8(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                RecentlyDisconnectedTrackingTime;                          // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HZX9[0x3C];                                    // 0x010C(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Uworld*                                      world;                                                     // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                                    WorldPackage;                                              // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HJCL[0x20];                                    // 0x0158(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      NetConnectionClass;                                        // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ReplicationDriverClass;                                    // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7TPW[0x10];                                    // 0x0188(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       NetDriverName;                                             // 0x0198(0x000C) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IXHH[0x4];                                     // 0x01A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FChannelDefinition>                  ChannelDefinitions;                                        // 0x01A8(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FChannelDefinition>      ChannelDefinitionMap;                                      // 0x01B8(0x0050) (NativeAccessSpecifierPublic)
	TArray<class Uchannel*>                            ActorChannelPool;                                          // 0x0208(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_LW5V[0x8];                                     // 0x0218(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              time;                                                      // 0x0220(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1RSW[0x4AC];                                   // 0x0224(0x04AC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ExpireViewTargetDelay;                                     // 0x06D0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_LMAM[0x2C];                                    // 0x06D4(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UReplicationDriver*                          ReplicationDriver;                                         // 0x0700(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_MBBI[0x58];                                    // 0x0708(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}



};

// Class Engine.OnlineEngineInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UOnlineEngineInterface : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.OnlineEngineInterface");
		return ptr;
	}



};

// Class Engine.DeveloperSettings
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UDeveloperSettings : public UObject
{
public:
	unsigned char                                      UnknownData_8TZ8[0x18];                                    // 0x0030(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DeveloperSettings");
		return ptr;
	}



};

// Class Engine.OnlineSession
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UOnlineSession : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.OnlineSession");
		return ptr;
	}



};

// Class Engine.actorComponent
// 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
class UactorComponent : public UObject
{
public:
	unsigned char                                      UnknownData_8JTV[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                      // 0x0038(0x0030) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FName>                               ComponentTags;                                             // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0078(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YTD5[0x4];                                     // 0x0088(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                UCSSerializationIndex;                                     // 0x008C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_YNWV : 3;                                      // 0x0090(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNetAddressable : 1;                                       // 0x0090(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bReplicates : 1;                                           // 0x0090(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_P20D : 3;                                      // 0x0090(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_SFV0 : 7;                                      // 0x0091(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAutoActivate : 1;                                         // 0x0091(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsActive : 1;                                             // 0x0092(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEditableWhenInherited : 1;                                // 0x0092(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H81X : 1;                                      // 0x0092(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCanEverAffectNavigation : 1;                              // 0x0092(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_BCC2 : 1;                                      // 0x0092(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsEditorOnly : 1;                                         // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_75Y3[0x1];                                     // 0x0093(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EComponentCreationMethod                    CreationMethod;                                            // 0x0094(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentActivated;                                      // 0x0095(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentDeactivated;                                    // 0x0096(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z7HD[0x1];                                     // 0x0097(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                                     // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_OCPR[0x10];                                    // 0x00A8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.actorComponent");
		return ptr;
	}



	void ToggleActive();
	void SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool shouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UactorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class Uactor* PrerequisiteActor);
	void ReceiveTick(float deltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> endPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool isActive();
	class Uactor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& tag);
	void AddTickPrerequisiteComponent(class UactorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class Uactor* PrerequisiteActor);
	void activate(bool bReset);
};

// Class Engine.SceneComponent
// 0x0158 (FullSize[0x0210] - InheritedSize[0x00B8])
class USceneComponent : public UactorComponent
{
public:
	unsigned char                                      UnknownData_SMOV[0x8];                                     // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class UPhysicsVolume>               PhysicsVolume;                                             // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             AttachParent;                                              // 0x00C8(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       AttachSocketName;                                          // 0x00D0(0x000C) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_SMHE[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USceneComponent*>                     AttachChildren;                                            // 0x00E0(0x0010) (ExportObject, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                    // 0x00F0(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_NVW2[0x34];                                    // 0x0100(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     RelativeLocation;                                          // 0x0134(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                                    RelativeRotation;                                          // 0x0140(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	struct Fvector                                     RelativeScale3D;                                           // 0x014C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct Fvector                                     ComponentVelocity;                                         // 0x0158(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SJ8W : 1;                                      // 0x0164(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bComponentToWorldUpdated : 1;                              // 0x0164(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_R2NE : 1;                                      // 0x0164(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAbsoluteLocation : 1;                                     // 0x0164(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAbsoluteRotation : 1;                                     // 0x0164(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAbsoluteScale : 1;                                        // 0x0164(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bVisible : 1;                                              // 0x0164(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldBeAttached : 1;                                     // 0x0164(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldSnapLocationWhenAttached : 1;                       // 0x0165(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldSnapRotationWhenAttached : 1;                       // 0x0165(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                            // 0x0165(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bSkipComponentAndChildrenTransformUpdate : 1;              // 0x0165(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bHiddenInGame : 1;                                         // 0x0165(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;             // 0x0165(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAttachParentBound : 1;                                 // 0x0165(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K0BT[0x1];                                     // 0x0166(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EComponentMobility>             Mobility;                                                  // 0x0167(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDetailMode>                    DetailMode;                                                // 0x0168(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XU95[0x3];                                     // 0x0169(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DetailModeBitmask;                                         // 0x016C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    PhysicsVolumeChangedDelegate;                              // 0x0170(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2YQN[0x9F];                                    // 0x0171(0x009F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SceneComponent");
		return ptr;
	}



	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldScale3D(const struct Fvector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetSkipComponentAndChildrenTransformUpdate(bool Value);
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(const struct Fvector& NewScale3D);
	void SetMobility(TEnumAsByte<Engine_EComponentMobility> NewMobility);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool oldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocationAndRotation(const struct Fvector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocation(const struct Fvector& NewLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocationAndRotation(const struct Fvector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocation(const struct Fvector& NewLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	struct FTransform K2_GetComponentToWorld();
	struct Fvector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct Fvector K2_GetComponentLocation();
	void K2_DetachFromComponent(Engine_EDetachmentRule LocationRule, Engine_EDetachmentRule RotationRule, Engine_EDetachmentRule ScaleRule, bool bCallModify);
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldOffset(const struct Fvector& DeltaLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeLocation(const struct Fvector& DeltaLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalOffset(const struct Fvector& DeltaLocation, bool bSweep, struct FhitResult* SweepHitResult, bool bTeleport);
	bool isVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct Fvector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<Engine_ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct Fvector GetSocketLocation(const struct FName& InSocketName);
	bool GetSkipComponentAndChildrenTransformUpdate();
	bool GetShouldUpdatePhysicsVolume();
	struct Fvector GetRightVector();
	struct FTransform GetRelativeTransform();
	class UPhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct Fvector GetForwardVector();
	struct Fvector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};

// Class Engine.primitiveComponent
// 0x0218 (FullSize[0x0428] - InheritedSize[0x0210])
class UprimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_BNMX[0x8];                                     // 0x0210(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDrawDistance;                                           // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LDMaxDrawDistance;                                         // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CachedMaxDrawDistance;                                     // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       DepthPriorityGroup;                                        // 0x0224(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       ViewOwnerDepthPriorityGroup;                               // 0x0225(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EIndirectLightingCacheQuality>  IndirectLightingCacheQuality;                              // 0x0226(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ELightmapType                               LightmapType;                                              // 0x0227(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMaxLODAsImposter : 1;                                  // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBatchImpostersAsInstances : 1;                            // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNeverDistanceCull : 1;                                    // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JOTK : 4;                                      // 0x0228(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                             // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceCastStaticShadows : 1;                               // 0x0229(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceToBeInCachedShadowmap : 1;                           // 0x0229(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateOverlapEvents : 1;                                // 0x0229(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bMultiBodyOverlap : 1;                                     // 0x0229(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTraceComplexOnMove : 1;                                   // 0x0229(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReturnMaterialOnMove : 1;                                 // 0x0229(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                       // 0x0229(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowCullDistanceVolume : 1;                              // 0x0229(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                          // 0x022A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8DEA[0x1];                                     // 0x022B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenderCustomColourNoDepth : 1;                            // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G8XW[0x3];                                     // 0x022D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bVisibleInReflectionCaptures : 1;                          // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisibleInRayTracing : 1;                                  // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderInMainPass : 1;                                     // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderInDepthPass : 1;                                    // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReceivesDecals : 1;                                       // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOwnerNoSee : 1;                                           // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyOwnerSee : 1;                                         // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                        // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAsOccluder : 1;                                        // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelectable : 1;                                           // 0x0231(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceMipStreaming : 1;                                    // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                             // 0x0231(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      castShadow : 1;                                            // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                          // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastDynamicShadow : 1;                                    // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastStaticShadow : 1;                                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDetailMode>                    DetailLevelBeforeCastShadows;                              // 0x0233(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	Engine_ELightingDetailMode                         DetailLevelBeforeCastDynamicShadows;                       // 0x0234(0x0001) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_OTM2[0x3];                                     // 0x0234(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                      // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelfShadowOnly : 1;                                       // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastFarShadow : 1;                                        // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastInsetShadow : 1;                                      // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastCinematicShadow : 1;                                  // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastHiddenShadow : 1;                                     // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                 // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLightAsIfStatic : 1;                                      // 0x0238(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                              // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExcludeFromLightAttachmentGroup : 1;                      // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReceiveMobileCSMShadows : 1;                              // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSingleSampleShadowFromStationaryLights : 1;               // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreRadialImpulse : 1;                                  // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreRadialForce : 1;                                    // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyImpulseOnDamage : 1;                                 // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicatePhysicsToAutonomousProxy : 1;                    // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFillCollisionUnderneathForNavmesh : 1;                    // 0x023A(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AlwaysLoadOnClient : 1;                                    // 0x023A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AlwaysLoadOnServer : 1;                                    // 0x023A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseEditorCompositing : 1;                                 // 0x023A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderCustomDepth : 1;                                    // 0x023A(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EHasCustomNavigableGeometry>    bHasCustomNavigableGeometry;                               // 0x023B(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YETY[0x1];                                     // 0x023C(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECanBeCharacterBase>            CanCharacterStepUpOn;                                      // 0x023D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FlightingChannels                           lightingChannels;                                          // 0x023E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	Engine_ERendererStencilMask                        CustomDepthStencilWriteMask;                               // 0x023F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CustomDepthStencilValue;                                   // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PKSV[0x4];                                     // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCustomPrimitiveData                        CustomPrimitiveData;                                       // 0x0248(0x0010) (Edit, AdvancedDisplay, NativeAccessSpecifierPrivate)
	struct FCustomPrimitiveData                        CustomPrimitiveDataInternal;                               // 0x0258(0x0010) (Transient, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_ULYF[0x8];                                     // 0x0268(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TranslucencySortPriority;                                  // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                VisibilityId;                                              // 0x0274(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                    // 0x0278(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             VirtualTextureLodBias;                                     // 0x0288(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             VirtualTextureCullMips;                                    // 0x0289(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             VirtualTextureMinCoverage;                                 // 0x028A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ERuntimeVirtualTextureMainPassType          VirtualTextureRenderPassType;                              // 0x028B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I928[0x4];                                     // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LpvBiasMultiplier;                                         // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JMQQ[0x8];                                     // 0x0294(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BoundsScale;                                               // 0x029C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0E6N[0x10];                                    // 0x02A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class Uactor*>                              MoveIgnoreActors;                                          // 0x02B0(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UprimitiveComponent*>                 MoveIgnoreComponents;                                      // 0x02C0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_02KZ[0x10];                                    // 0x02D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               BodyInstance;                                              // 0x02E0(0x0118) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentHit;                                            // 0x03F8(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentBeginOverlap;                                   // 0x03F9(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentEndOverlap;                                     // 0x03FA(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentWake;                                           // 0x03FB(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnComponentSleep;                                          // 0x03FC(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0SBW[0x1];                                     // 0x03FD(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMulticastSparseDelegate                    OnBeginCursorOver;                                         // 0x03FE(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnEndCursorOver;                                           // 0x03FF(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnClicked;                                                 // 0x0400(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnReleased;                                                // 0x0401(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchBegin;                                         // 0x0402(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnd;                                           // 0x0403(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchEnter;                                         // 0x0404(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	struct FMulticastSparseDelegate                    OnInputTouchLeave;                                         // 0x0405(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RQV3[0x1A];                                    // 0x0406(0x001A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UprimitiveComponent*                         LODParentPrimitive;                                        // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.primitiveComponent");
		return ptr;
	}



	bool WasRecentlyRendered(float tolerance);
	void WakeRigidBody(const struct FName& BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void SetVisibleInReflectionCaptures(bool bValue);
	void SetVisibleInRayTracing(bool bValue);
	void SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetRenderCustomColourNoDepth(bool bValue);
	void SetReceivesDecals(bool bNewReceivesDecals);
	void SetPhysMaterialOverride(class UphysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsLinearVelocity(const struct Fvector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocityInRadians(const struct Fvector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocityInDegrees(const struct Fvector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocity(const struct Fvector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterialByName(const struct FName& MaterialSlotName, class UmaterialInterface* MATERIAL);
	void SetMaterial(int ElementIndex, class UmaterialInterface* MATERIAL);
	void SetMassScale(const struct FName& BoneName, float InMassScale);
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void SetLinearDamping(float InDamping);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value);
	void SetCustomPrimitiveDataVector3(int DataIndex, const struct Fvector& Value);
	void SetCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value);
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);
	void SetCustomDepthStencilWriteMask(Engine_ERendererStencilMask WriteMaskBit);
	void SetCustomDepthStencilValue(int Value);
	void SetCullDistance(float newCullDistance);
	void SetConstraintMode(TEnumAsByte<Engine_EDOFMode> ConstraintMode);
	void SetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> channel, TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionProfileName(const struct FName& InCollisionProfileName, bool bUpdateOverlaps);
	void SetCollisionObjectType(TEnumAsByte<Engine_ECollisionChannel> channel);
	void SetCollisionEnabled(TEnumAsByte<Engine_ECollisionEnabled> NewType);
	void SetCenterOfMass(const struct Fvector& CenterOfMassOffset, const struct FName& BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetCastInsetShadow(bool bInCastInsetShadow);
	void SetBoundsScale(float NewBoundsScale);
	void SetAngularDamping(float InDamping);
	void SetAllUseCCD(bool InUseCCD);
	void SetAllPhysicsLinearVelocity(const struct Fvector& NewVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInRadians(const struct Fvector& NewAngVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInDegrees(const struct Fvector& NewAngVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	struct Fvector ScaleByMomentOfInertia(const struct Fvector& InputVector, const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	bool K2_SphereTraceComponent(const struct Fvector& TraceStart, const struct Fvector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct Fvector* HitLocation, struct Fvector* HitNormal, struct FName* BoneName, struct FhitResult* outHit);
	bool K2_SphereOverlapComponent(const struct Fvector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct Fvector* HitLocation, struct Fvector* HitNormal, struct FName* BoneName, struct FhitResult* outHit);
	bool K2_LineTraceComponent(const struct Fvector& TraceStart, const struct Fvector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct Fvector* HitLocation, struct Fvector* HitNormal, struct FName* BoneName, struct FhitResult* outHit);
	bool K2_IsQueryCollisionEnabled();
	bool K2_IsPhysicsCollisionEnabled();
	bool K2_IsCollisionEnabled();
	bool K2_BoxOverlapComponent(const struct Fvector& InBoxCentre, const struct Fbox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct Fvector* HitLocation, struct Fvector* HitNormal, struct FName* BoneName, struct FhitResult* outHit);
	bool IsOverlappingComponent(class UprimitiveComponent* otherComp);
	bool IsOverlappingActor(class Uactor* other);
	bool IsGravityEnabled();
	bool IsAnyRigidBodyAwake();
	void IgnoreComponentWhenMoving(class UprimitiveComponent* component, bool bShouldIgnore);
	void IgnoreActorWhenMoving(class Uactor* actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct Fvector GetPhysicsLinearVelocityAtPoint(const struct Fvector& point, const struct FName& BoneName);
	struct Fvector GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct Fvector GetPhysicsAngularVelocityInRadians(const struct FName& BoneName);
	struct Fvector GetPhysicsAngularVelocityInDegrees(const struct FName& BoneName);
	struct Fvector GetPhysicsAngularVelocity(const struct FName& BoneName);
	void GetOverlappingComponents(TArray<class UprimitiveComponent*>* OutOverlappingComponents);
	void GetOverlappingActors(TArray<class Uactor*>* OverlappingActors, class UClass* ClassFilter);
	int GetNumMaterials();
	class UmaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, int* SectionIndex);
	class UmaterialInterface* GetMaterial(int ElementIndex);
	float GetMassScale(const struct FName& BoneName);
	float GetMass();
	float GetLinearDamping();
	struct Fvector GetInertiaTensor(const struct FName& BoneName);
	bool GetGenerateOverlapEvents();
	TEnumAsByte<Engine_ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> channel);
	struct FName GetCollisionProfileName();
	TEnumAsByte<Engine_ECollisionChannel> GetCollisionObjectType();
	TEnumAsByte<Engine_ECollisionEnabled> GetCollisionEnabled();
	float GetClosestPointOnCollision(const struct Fvector& point, struct Fvector* OutPointOnBody, const struct FName& BoneName);
	struct Fvector GetCenterOfMass(const struct FName& BoneName);
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UmaterialInterface* SourceMaterial, const struct FName& OptionalName);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UmaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UprimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
	TArray<class Uactor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreComponents();
	void ClearMoveIgnoreActors();
	bool CanCharacterStepUp(class Upawn* pawn);
	void AddTorqueInRadians(const struct Fvector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddTorqueInDegrees(const struct Fvector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddTorque(const struct Fvector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct Fvector& origin, float radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const struct Fvector& origin, float radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct Fvector& Impulse, const struct Fvector& location, const struct FName& BoneName);
	void AddImpulse(const struct Fvector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddForceAtLocationLocal(const struct Fvector& Force, const struct Fvector& location, const struct FName& BoneName);
	void AddForceAtLocation(const struct Fvector& Force, const struct Fvector& location, const struct FName& BoneName);
	void AddForce(const struct Fvector& Force, const struct FName& BoneName, bool bAccelChange);
	void AddAngularImpulseInRadians(const struct Fvector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddAngularImpulseInDegrees(const struct Fvector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddAngularImpulse(const struct Fvector& Impulse, const struct FName& BoneName, bool bVelChange);
};

// Class Engine.MeshComponent
// 0x0050 (FullSize[0x0478] - InheritedSize[0x0428])
class UMeshComponent : public UprimitiveComponent
{
public:
	TArray<class UmaterialInterface*>                  OverrideMaterials;                                         // 0x0428(0x0010) (Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UmaterialInterface*>                  BackupMaterials;                                           // 0x0438(0x0010) (Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JQQ9[0x28];                                    // 0x0448(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableMaterialParameterCaching : 1;                       // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_VY7Q[0x7];                                     // 0x0471(0x0007) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}



	void SetVectorParameterValueOnMaterials(const struct FName& parameterName, const struct Fvector& ParameterValue);
	void SetScalarParameterValueOnMaterials(const struct FName& parameterName, float ParameterValue);
	bool SaveMaterials();
	bool RestoreMaterials();
	void PrestreamTextures(float seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);
	bool IsMaterialSlotNameValid(const struct FName& MaterialSlotName);
	TArray<struct FName> GetMaterialSlotNames();
	TArray<class UmaterialInterface*> GetMaterials();
	int GetMaterialIndex(const struct FName& MaterialSlotName);
};

// Class Engine.SkinnedMeshComponent
// 0x0258 (FullSize[0x06D0] - InheritedSize[0x0478])
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                              // 0x0478(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkinnedMeshComponent>        SelectedMasterPoseComponent;                               // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                       // 0x0488(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<Engine_ESkinCacheUsage>                     SkinCacheUsage;                                            // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FVXS[0x108];                                   // 0x04A0(0x0108) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsAsset*                               PhysicsAssetOverride;                                      // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ForcedLodModel;                                            // 0x05B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinLodModel;                                               // 0x05B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseMasterPoseLod;                                         // 0x05B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TVL8[0x7];                                     // 0x05B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UStaticMeshComponent*>                StaticMeshesUsingSameLOD;                                  // 0x05C0(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G92M[0x8];                                     // 0x05D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StreamingDistanceMultiplier;                               // 0x05D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5B92[0xC];                                     // 0x05DC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                   // 0x05E8(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TGSH[0x24];                                    // 0x05F8(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EVisibilityBasedAnimTickOption              VisibilityBasedAnimTickOption;                             // 0x061C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_99IG[0x1];                                     // 0x061D(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_BK6H : 2;                                      // 0x061E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bOverrideMinLOD : 1;                                       // 0x061E(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                     // 0x061E(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceWireframe : 1;                                       // 0x061E(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisplayBones : 1;                                         // 0x061E(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMorphTarget : 1;                                   // 0x061E(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHideSkin : 1;                                             // 0x061E(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPerBoneMotionBlur : 1;                                    // 0x061F(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                          // 0x061F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                           // 0x061F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSyncAttachParentLOD : 1;                                  // 0x061F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanHighlightSelectedSections : 1;                         // 0x061F(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRecentlyRendered : 1;                                     // 0x061F(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAnySlaveRecentlyRendered : 1;                             // 0x061F(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastCapsuleDirectShadow : 1;                              // 0x061F(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastCapsuleIndirectShadow : 1;                            // 0x0620(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCPUSkinning : 1;                                          // 0x0620(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableUpdateRateOptimizations : 1;                        // 0x0620(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S2US[0x7];                                     // 0x0621(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTresholdToFrameSkip>                AnimationTresholdToFrameSkip;                              // 0x0628(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisplayDebugUpdateRateOptimizations : 1;                  // 0x0638(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderStatic : 1;                                         // 0x0638(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMasterPoseComponentLOD : 1;                         // 0x0638(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V57N : 2;                                      // 0x0638(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCachedLocalBoundsUpToDate : 1;                            // 0x0638(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_99GK : 1;                                      // 0x0638(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceMeshObjectUpdate : 1;                                // 0x0638(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_PRNS[0x3];                                     // 0x0639(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CapsuleIndirectShadowMinVisibility;                        // 0x063C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YKUR[0x14];                                    // 0x0640(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBoxSphereBounds                            CachedWorldSpaceBounds;                                    // 0x0654(0x001C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMatrix                                     CachedWorldToLocalTransform;                               // 0x0670(0x0040) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_V1BF[0x20];                                    // 0x06B0(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkinnedMeshComponent");
		return ptr;
	}



	void UnloadSkinWeightProfile(const struct FName& InProfileName);
	void UnHideBoneByName(const struct FName& BoneName);
	void TransformToBoneSpace(const struct FName& BoneName, const struct Fvector& InPosition, const struct FRotator& InRotation, struct Fvector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct Fvector& InPosition, const struct FRotator& InRotation, struct Fvector* OutPosition, struct FRotator* OutRotation);
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LodIndex);
	void ShowAllMaterialSections(int LodIndex);
	void SetVertexColorOverride_LinearColor(int LodIndex, TArray<struct FLinearColor> VertexColors);
	bool SetSkinWeightProfile(const struct FName& InProfileName);
	void SetSkinWeightOverride(int LodIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);
	void SetRenderStatic(bool bNewValue);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMinLOD(int InNewMinLOD);
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);
	void SetForcedLOD(int InNewForcedLOD);
	void SetCastCapsuleIndirectShadow(bool bNewValue);
	void SetCastCapsuleDirectShadow(bool bNewValue);
	void SetCapsuleIndirectShadowMinVisibility(float newValue);
	bool IsUsingSkinWeightProfile();
	bool IsMaterialSectionShown(int MaterialID, int LodIndex);
	bool IsBoneHiddenByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption);
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(const struct FName& BoneName, float* OutTwistAngle, float* OutSwingAngle);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	struct Fvector GetRefPosePosition(int BoneIndex);
	struct FName GetParentBone(const struct FName& BoneName);
	int GetNumLODs();
	int GetNumBones();
	int GetForcedLOD();
	struct FTransform GetDeltaTransformFromRefPose(const struct FName& BoneName, const struct FName& BaseName);
	struct FName GetCurrentSkinWeightProfileName();
	struct FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const struct FName& BoneName);
	struct FName FindClosestBone_K2(const struct Fvector& TestLocation, struct Fvector* BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);
	void ClearVertexColorOverride(int LodIndex);
	void ClearSkinWeightProfile();
	void ClearSkinWeightOverride(int LodIndex);
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
};

// Class Engine.StreamableRenderAsset
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UStreamableRenderAsset : public UObject
{
public:
	double                                             ForceMipLevelsToBeResidentTimestamp;                       // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NumCinematicMipLevels;                                     // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StreamingIndex;                                            // 0x003C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CachedCombinedLODBias;                                     // 0x0040(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      CachedNumResidentLODs;                                     // 0x0044(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bCachedReadyForStreaming : 1;                              // 0x0045(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      NeverStream : 1;                                           // 0x0045(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                     // 0x0045(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsStreamable : 1;                                         // 0x0045(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasStreamingUpdatePending : 1;                            // 0x0045(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                           // 0x0045(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreStreamingMipBias : 1;                               // 0x0045(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseCinematicMipLevels : 1;                                // 0x0045(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YEQO[0x2];                                     // 0x0046(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StreamableRenderAsset");
		return ptr;
	}



};

// Class Engine.SkeletalMesh
// 0x0340 (FullSize[0x0388] - InheritedSize[0x0048])
class USkeletalMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData_P77K[0x20];                                    // 0x0048(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                            ImportedBounds;                                            // 0x0070(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBoxSphereBounds                            ExtendedBounds;                                            // 0x008C(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct Fvector                                     PositiveBoundsExtension;                                   // 0x00A8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Fvector                                     NegativeBoundsExtension;                                   // 0x00B4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMaterial>                   Materials;                                                 // 0x00C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                           // 0x00D0(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                   // 0x00E0(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_AE81[0x50];                                    // 0x00F0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FperPlatformInt                             MinLod;                                                    // 0x0140(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                               // 0x0144(0x0001) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorAxis;                                            // 0x0145(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorFlipAxis;                                        // 0x0146(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                  // 0x0147(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseHighPrecisionTangentBasis : 1;                         // 0x0147(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasBeenSimplified : 1;                                    // 0x0147(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasVertexColors : 1;                                      // 0x0147(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IS0F : 1;                                      // 0x0147(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bEnablePerPolyCollision : 1;                               // 0x0147(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BodySetup;                                                 // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                               PhysicsAsset;                                              // 0x0150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                        // 0x0158(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                           // 0x0160(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMorphTarget*>                        MorphTargets;                                              // 0x0170(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2I6O[0x178];                                   // 0x0180(0x0178) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PostProcessAnimBlueprint;                                  // 0x02F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                        // 0x0300(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkeletalMeshSamplingInfo                   SamplingInfo;                                              // 0x0310(0x0030) (Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0340(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_I44Z[0x8];                                     // 0x0350(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x0358(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_4QK7[0x10];                                    // 0x0368(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkinWeightProfileInfo>              SkinWeightProfiles;                                        // 0x0378(0x0010) (Edit, EditFixedSize, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}



	void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);
	int NumSockets();
	TArray<struct FString> K2_GetAllMorphTargetNames();
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	class USkeletalMeshSocket* GetSocketByIndex(int index);
	class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset);
	struct FBoxSphereBounds GetImportedBounds();
	struct FBoxSphereBounds GetBounds();
	class USkeletalMeshSocket* FindSocketInfo(const struct FName& InSocketName, struct FTransform* OutTransform, int* OutBoneIndex, int* OutIndex);
	class USkeletalMeshSocket* FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex);
	class USkeletalMeshSocket* FindSocket(const struct FName& InSocketName);
};

// Class Engine.AssetImportData
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAssetImportData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AssetImportData");
		return ptr;
	}



};

// Class Engine.AssetUserData
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAssetUserData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AssetUserData");
		return ptr;
	}



};

// Class Engine.brush
// 0x0038 (FullSize[0x0268] - InheritedSize[0x0230])
class Ubrush : public Uactor
{
public:
	TEnumAsByte<Engine_EBrushType>                     BrushType;                                                 // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SLWS[0x3];                                     // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fcolor                                      BrushColor;                                                // 0x0234(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PolyFlags;                                                 // 0x0238(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bColored : 1;                                              // 0x023C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSolidWhenSelected : 1;                                    // 0x023C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                            // 0x023C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNotForClientOrServer : 1;                                 // 0x023C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E2HD[0x3];                                     // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UModel*                                      brush;                                                     // 0x0240(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrushComponent*                             BrushComponent;                                            // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bInManipulation : 1;                                       // 0x0250(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MZHF[0x7];                                     // 0x0251(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGeomSelection>                      SavedSelections;                                           // 0x0258(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.brush");
		return ptr;
	}



};

// Class Engine.volume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class Uvolume : public Ubrush
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.volume");
		return ptr;
	}



};

// Class Engine.world
// 0x06F8 (FullSize[0x0728] - InheritedSize[0x0030])
class Uworld : public UObject
{
public:
	unsigned char                                      UnknownData_SIUO[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Ulevel*                                      PersistentLevel;                                           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                                  NetDriver;                                                 // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                         LineBatcher;                                               // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                         PersistentLineBatcher;                                     // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                         ForegroundLineBatcher;                                     // 0x0058(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameNetworkManager*                         NetworkManager;                                            // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                   // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                             ExtraReferencedObjects;                                    // 0x0070(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                             PerModuleDataObjects;                                      // 0x0080(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class Uactor*>                              LevelSequenceActors;                                       // 0x0090(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SQXT[0x8];                                     // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                           // 0x00A8(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStreamingLevelsToConsider                  StreamingLevelsToConsider;                                 // 0x00B8(0x0028) (Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	struct FString                                     StreamingLevelsPrefix;                                     // 0x00E0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Ulevel*                                      CurrentLevelPendingVisibility;                             // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class Ulevel*                                      CurrentLevelPendingInvisibility;                           // 0x00F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDemoNetDriver*                              DemoNetDriver;                                             // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleEventManager*                       MyParticleEventManager;                                    // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsVolume*                              DefaultPhysicsVolume;                                      // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RH19[0x16];                                    // 0x0118(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_QN9L : 2;                                      // 0x012E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAreConstraintsDirty : 1;                                  // 0x012E(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_467J[0x1];                                     // 0x012F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNavigationSystemBase*                       NavigationSystem;                                          // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameModeBase*                               AuthorityGameMode;                                         // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameStateBase*                              gameState;                                                 // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAISystemBase*                               AISystem;                                                  // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAvoidanceManager*                           AvoidanceManager;                                          // 0x0150(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class Ulevel*>                              Levels;                                                    // 0x0158(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FLevelCollection>                    LevelCollections;                                          // 0x0168(0x0010) (ZeroConstructor, Transient, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_PSM0[0x20];                                    // 0x0178(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UgameInstance*                               OwningGameInstance;                                        // 0x0198(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x01A0(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvas*                                     CanvasForRenderingToTarget;                                // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                       // 0x01B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_SQVZ[0x50];                                    // 0x01C0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UactorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                        // 0x0210(0x0010) (ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UactorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;           // 0x0220(0x0010) (ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_I1U0[0x340];                                   // 0x0230(0x0340) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorldComposition*                           WorldComposition;                                          // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XSLL[0x90];                                    // 0x0578(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FWorldPSCPool                               PSCPool;                                                   // 0x0608(0x0058) (ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_U2C5[0xC8];                                    // 0x0660(0x00C8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.world");
		return ptr;
	}



	class UWorldSettings* K2_GetWorldSettings();
	void HandleTimelineScrubbed();
};

// Class Engine.InterpTrack
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData_03OK[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        SubTracks;                                                 // 0x0040(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      TrackInstClass;                                            // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETrackActiveCondition>          ActiveCondition;                                           // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D6AA[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TrackTitle;                                                // 0x0060(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnePerGroup : 1;                                          // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDirGroupOnly : 1;                                         // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableTrack : 1;                                         // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsSelected : 1;                                           // 0x0070(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsAnimControlTrack : 1;                                   // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSubTrackOnly : 1;                                         // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisible : 1;                                              // 0x0070(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsRecording : 1;                                          // 0x0070(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WB1Y[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}



};

// Class Engine.InterpTrackVectorBase
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                               // 0x0078(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurveTension;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2JYM[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatBase
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                                // 0x0078(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurveTension;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MAYP[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}



};

// Class Engine.InterpTrackInst
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterpTrackInst : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}



};

// Class Engine.skeletalMeshComponent
// 0x048C (FullSize[0x0B5C] - InheritedSize[0x06D0])
class UskeletalMeshComponent : public USkinnedMeshComponent
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                               // 0x06D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AnimClass;                                                 // 0x06D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UanimInstance*                               AnimScriptInstance;                                        // 0x06E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UanimInstance*                               PostProcessAnimInstance;                                   // 0x06E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSingleAnimationPlayData                    AnimationData;                                             // 0x06F0(0x0018) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EHFM[0x10];                                    // 0x0708(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     RootBoneTranslation;                                       // 0x0718(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     LineCheckBoundsScale;                                      // 0x0724(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H3XD[0x20];                                    // 0x0730(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UanimInstance*>                       LinkedInstances;                                           // 0x0750(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                          CachedBoneSpaceTransforms;                                 // 0x0760(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                          CachedComponentSpaceTransforms;                            // 0x0770(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_IVSX[0x20];                                    // 0x0780(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalAnimRateScale;                                       // 0x07A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType;                                  // 0x07A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EPhysicsTransformUpdateMode>    PhysicsTransformUpdateMode;                                // 0x07A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CMLS[0x1];                                     // 0x07A6(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationMode>                 AnimationMode;                                             // 0x07A7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_6Q3K[0x1];                                     // 0x07A8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDisablePostProcessBlueprint : 1;                          // 0x07A9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_NAPD : 1;                                      // 0x07A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUpdateOverlapsOnAnimationFinalize : 1;                    // 0x07A9(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1LX5 : 1;                                      // 0x07A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHasValidBodies : 1;                                       // 0x07A9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R5A7 : 1;                                      // 0x07A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bBlendPhysics : 1;                                         // 0x07A9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                       // 0x07A9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                            // 0x07AA(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableClothSimulation : 1;                               // 0x07AA(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableRigidBodyAnimNode : 1;                             // 0x07AA(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAllowAnimCurveEvaluation : 1;                             // 0x07AA(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bDisableAnimCurves : 1;                                    // 0x07AA(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_84KF : 3;                                      // 0x07AA(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCollideWithEnvironment : 1;                               // 0x07AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollideWithAttachedChildren : 1;                          // 0x07AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLocalSpaceSimulation : 1;                                 // 0x07AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bResetAfterTeleport : 1;                                   // 0x07AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EAAZ : 1;                                      // 0x07AB(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDeferKinematicBoneUpdate : 1;                             // 0x07AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoSkeletonUpdate : 1;                                     // 0x07AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPauseAnims : 1;                                           // 0x07AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRefPoseOnInitAnim : 1;                                 // 0x07AC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePerPolyCollision : 1;                               // 0x07AC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceRefpose : 1;                                         // 0x07AC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyAllowAutonomousTickPose : 1;                          // 0x07AC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsAutonomousTickPose : 1;                                 // 0x07AC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOldForceRefPose : 1;                                      // 0x07AC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowPrePhysBones : 1;                                     // 0x07AC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRequiredBonesUpToDate : 1;                                // 0x07AC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAnimTreeInitialised : 1;                                  // 0x07AD(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIncludeComponentLocationIntoBounds : 1;                   // 0x07AD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                            // 0x07AD(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseBendingElements : 1;                                   // 0x07AD(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseTetrahedralConstraints : 1;                            // 0x07AD(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseThinShellVolumeConstraints : 1;                        // 0x07AD(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSelfCollisions : 1;                                    // 0x07AD(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseContinuousCollisionDetection : 1;                      // 0x07AD(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPropagateCurvesToSlaves : 1;                              // 0x07AE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipKinematicUpdateWhenInterpolating : 1;                 // 0x07AE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipBoundsUpdateWhenInterpolating : 1;                    // 0x07AE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FA67 : 1;                                      // 0x07AE(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNeedsQueuedAnimEventsDispatched : 1;                      // 0x07AE(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_1Z0D[0x1];                                     // 0x07AF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint16_t                                           CachedAnimCurveUidVersion;                                 // 0x07B0(0x0002) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EClothMassMode                              MassMode;                                                  // 0x07B2(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G1VN[0x1];                                     // 0x07B3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              UniformMass;                                               // 0x07B4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TotalMass;                                                 // 0x07B8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Density;                                                   // 0x07BC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinPerParticleMass;                                        // 0x07C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClothBlendWeight;                                          // 0x07C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EdgeStiffness;                                             // 0x07C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BendingStiffness;                                          // 0x07CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AreaStiffness;                                             // 0x07D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeStiffness;                                           // 0x07D4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StrainLimitingStiffness;                                   // 0x07D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShapeTargetStiffness;                                      // 0x07DC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               DisallowedAnimCurves;                                      // 0x07E0(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBodySetup*                                  BodySetup;                                                 // 0x07F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VUYH[0x8];                                     // 0x07F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x0800(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UClass*                                      ClothingSimulationFactory;                                 // 0x0810(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BGN5[0xD0];                                    // 0x0818(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TeleportDistanceThreshold;                                 // 0x08E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              TeleportRotationThreshold;                                 // 0x08EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_QEWJ[0x8];                                     // 0x08F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           LastPoseTickFrame;                                         // 0x08F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_VITF[0x54];                                    // 0x08FC(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClothingSimulationInteractor*               ClothingInteractor;                                        // 0x0950(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RQ0R[0xC8];                                    // 0x0958(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAnimInitialized;                                         // 0x0A20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IV0O[0x12C];                                   // 0x0A30(0x012C) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.skeletalMeshComponent");
		return ptr;
	}



	void UnlinkAnimClassLayers(class UClass* InClass);
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void ToggleDisablePostProcessBlueprint();
	void TermBodiesBelow(const struct FName& ParentBoneName);
	void SuspendClothingSimulation();
	void stop();
	void SnapshotPose(struct FPoseSnapshot* Snapshot);
	void SetUpdateAnimationInEditor(bool NewUpdateState);
	void SetTeleportRotationThreshold(float threshold);
	void SetTeleportDistanceThreshold(float threshold);
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);
	void SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);
	void SetDisableAnimCurves(bool bInDisableAnimCurves);
	void SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetClothMaxDistanceScale(float scale);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);
	void SetAnimClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<Engine_EAnimationMode> InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);
	void SetAllowedAnimCurvesEvaluation(TArray<struct FName> List, bool bAllow);
	void SetAllowAnimCurveEvaluation(bool bInAllow);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void ResumeClothingSimulation();
	void ResetClothTeleportMode();
	void ResetAnimInstanceDynamics(Engine_ETeleportType InTeleportType);
	void ResetAllowedAnimCurveEvaluation();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float playRate);
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	bool K2_GetClosestPointOnPhysicsAsset(const struct Fvector& WorldPosition, struct Fvector* ClosestWorldPosition, struct Fvector* normal, struct FName* BoneName, float* distance);
	bool IsPlaying();
	bool IsClothingSimulationSuspended();
	bool IsBodyGravityEnabled(const struct FName& BoneName);
	bool HasValidAnimationInstance();
	float GetTeleportRotationThreshold();
	float GetTeleportDistanceThreshold();
	struct Fvector GetSkeletalCenterOfMass();
	class UanimInstance* GetPostProcessInstance();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	class UanimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);
	class UanimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UanimInstance*>* OutLinkedInstances);
	class UanimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);
	bool GetDisablePostProcessBlueprint();
	bool GetDisableAnimCurves();
	void GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float GetClothMaxDistanceScale();
	class UClothingSimulationInteractor* GetClothingSimulationInteractor();
	float GetBoneMass(const struct FName& BoneName, bool bScaleMass);
	class UanimInstance* GetAnimInstance();
	class UClass* GetAnimClass();
	TEnumAsByte<Engine_EAnimationMode> GetAnimationMode();
	bool GetAllowRigidBodyAnimNode();
	bool GetAllowedAnimCurveEvaluate();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	struct FName FindConstraintBoneName(int ConstraintIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct Fvector& Impulse, const struct Fvector& HitLocation, const struct FName& InBoneName);
	void BindClothToMasterPoseComponent();
	void AllowAnimCurveEvaluation(const struct FName& NameOfCurve, bool bAllow);
	void AddImpulseToAllBodiesBelow(const struct Fvector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);
	void AddForceToAllBodiesBelow(const struct Fvector& Force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};

// Class Engine.Commandlet
// 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                           // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     HelpUsage;                                                 // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     HelpWebLink;                                               // 0x0050(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             HelpParamNames;                                            // 0x0060(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             HelpParamDescriptions;                                     // 0x0070(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsServer : 1;                                              // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsClient : 1;                                              // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsEditor : 1;                                              // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LogToConsole : 1;                                          // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ShowErrorCount : 1;                                        // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ShowProgress : 1;                                          // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SQOZ[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Commandlet");
		return ptr;
	}



};

// Class Engine.MaterialExpression
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UMaterialExpression : public UObject
{
public:
	class UMATERIAL*                                   MATERIAL;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunction*                           Function;                                                  // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsParameterExpression : 1;                                // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BENS[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureBase
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class Utexture*                                    texture;                                                   // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialSamplerType>           SamplerType;                                               // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                             // 0x0051(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OPD4[0x6];                                     // 0x0052(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureBase");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSample
// 0x00B0 (FullSize[0x0108] - InheritedSize[0x0058])
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0058(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SKFM[0xC];                                     // 0x0068(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            TextureObject;                                             // 0x0074(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UEBL[0xC];                                     // 0x0084(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MipValue;                                                  // 0x0090(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0957[0xC];                                     // 0x00A0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            CoordinatesDX;                                             // 0x00AC(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ISNJ[0xC];                                     // 0x00BC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            CoordinatesDY;                                             // 0x00C8(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KP75[0xC];                                     // 0x00D8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AutomaticViewMipBiasValue;                                 // 0x00E4(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KQF9[0xC];                                     // 0x00F4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETextureMipValueMode>           MipValueMode;                                              // 0x0100(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESamplerSourceMode>             SamplerSource;                                             // 0x0101(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AutomaticViewMipBias : 1;                                  // 0x0102(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ConstCoordinate;                                           // 0x0103(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ConstMipValue;                                             // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0028 (FullSize[0x0130] - InheritedSize[0x0108])
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       parameterName;                                             // 0x0108(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       ExpressionGUID;                                            // 0x0114(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       Group;                                                     // 0x0124(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (FullSize[0x0130] - InheritedSize[0x0130])
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}



};

// Class Engine.pawn
// 0x0060 (FullSize[0x0290] - InheritedSize[0x0230])
class Upawn : public Uactor
{
public:
	unsigned char                                      UnknownData_ZRW2[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseControllerRotationPitch : 1;                           // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseControllerRotationYaw : 1;                             // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseControllerRotationRoll : 1;                            // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                        // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6N4V[0x3];                                     // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseEyeHeight;                                             // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoPossessPlayer;                                         // 0x0240(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAutoPossessAI                              AutoPossessAI;                                             // 0x0241(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RemoteViewPitch;                                           // 0x0242(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_90NB[0x5];                                     // 0x0243(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AIControllerClass;                                         // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UplayerState*                                playerState;                                               // 0x0250(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_WSOQ[0x8];                                     // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Ucontroller*                                 LastHitBy;                                                 // 0x0260(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Ucontroller*                                 controller;                                                // 0x0268(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q46Z[0x4];                                     // 0x0270(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     ControlInputVector;                                        // 0x0274(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Fvector                                     LastControlInputVector;                                    // 0x0280(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_8X0H[0x4];                                     // 0x028C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.pawn");
		return ptr;
	}



	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void ReceiveUnpossessed(class Ucontroller* OldController);
	void ReceivePossessed(class Ucontroller* newController);
	void PawnMakeNoise(float Loudness, const struct Fvector& NoiseLocation, bool bUseNoiseMakerLocation, class Uactor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const struct Fvector& launchVelocity, bool bXYOverride, bool bZOverride);
	struct Fvector K2_GetMovementInputVector();
	bool IsPlayerControlled();
	bool IsPawnControlled();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool isControlled();
	bool IsBotControlled();
	struct Fvector GetPendingMovementInputVector();
	struct Fvector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class Uactor* STATIC_GetMovementBaseActor(class Upawn* pawn);
	struct Fvector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class Ucontroller* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct Fvector ConsumeMovementInputVector();
	void AddMovementInput(const struct Fvector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float val);
	void AddControllerRollInput(float val);
	void AddControllerPitchInput(float val);
};

// Class Engine.character
// 0x0240 (FullSize[0x04D0] - InheritedSize[0x0290])
class Ucharacter : public Upawn
{
public:
	class UskeletalMeshComponent*                      mesh;                                                      // 0x0290(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*                 CharacterMovement;                                         // 0x0298(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x02A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBasedMovementInfo                          BasedMovement;                                             // 0x02A8(0x0030) (NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                   // 0x02D8(0x0030) (Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                              AnimRootMotionTranslationScale;                            // 0x0308(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Fvector                                     BaseTranslationOffset;                                     // 0x030C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_KUPJ[0x8];                                     // 0x0318(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FQuat                                       BaseRotationOffset;                                        // 0x0320(0x0010) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;              // 0x0330(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ReplayLastTransformUpdateTimeStamp;                        // 0x0334(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      ReplicatedMovementMode;                                    // 0x0338(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bInBaseReplication;                                        // 0x0339(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SK6P[0x2];                                     // 0x033A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CrouchedEyeHeight;                                         // 0x033C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsCrouched : 1;                                           // 0x0340(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bProxyIsJumpForceApplied : 1;                              // 0x0340(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPressedJump : 1;                                          // 0x0340(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientUpdating : 1;                                       // 0x0340(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientWasFalling : 1;                                     // 0x0340(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientResimulateRootMotion : 1;                           // 0x0340(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientResimulateRootMotionSources : 1;                    // 0x0340(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSimGravityDisabled : 1;                                   // 0x0340(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate : 1;                   // 0x0341(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                           // 0x0341(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWasJumping : 1;                                           // 0x0341(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6L8H[0x2];                                     // 0x0342(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              JumpKeyHoldTime;                                           // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpForceTimeRemaining;                                    // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProxyJumpForceStartedTime;                                 // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpMaxHoldTime;                                           // 0x0350(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpMaxCount;                                              // 0x0354(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpCurrentCount;                                          // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OTUX[0x4];                                     // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                         // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YICD[0x10];                                    // 0x0370(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    MovementModeChangedDelegate;                               // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                                // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                      SavedRootMotion;                                           // 0x03A0(0x0038) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8LIY[0x8];                                     // 0x03D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                    // 0x03E0(0x0040) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                        // 0x0420(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRepRootMotionMontage                       RepRootMotion;                                             // 0x0430(0x0098) (Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                               UseMovementPrediction;                                     // 0x04C8(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_L1T0[0x7];                                     // 0x04C9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.character");
		return ptr;
	}



	void Uncrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void ServerReceiveInput(float timestamp, const struct FVector_NetQuantize10& InAccel, unsigned char CompressedMoveFlags, unsigned char clientRoll, uint32_t view);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags);
	void ServerMoveNoBase(float timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char clientRoll, uint32_t view, unsigned char ClientMovementMode);
	void ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char clientRoll, uint32_t view, unsigned char ClientMovementMode);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char clientRoll, uint32_t view, class UprimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char clientRoll, uint32_t view, class UprimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char clientRoll, uint32_t view, class UprimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void RootMotionDebugClientPrintOnScreen(const struct FString& InString);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);
	void OnWalkingOffLedge(const struct Fvector& PreviousFloorImpactNormal, const struct Fvector& PreviousFloorContactNormal, const struct Fvector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_ReplayLastTransformUpdateTimeStamp();
	void OnRep_IsCrouched();
	void OnLaunched(const struct Fvector& launchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FhitResult& hit);
	void OnJumped();
	void LaunchCharacter(const struct Fvector& launchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float deltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<Engine_EMovementMode> PrevMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	bool HasAnyRootMotion();
	class UAnimMontage* GetCurrentMontage();
	struct Fvector GetBaseTranslationOffset();
	struct FRotator GetBaseRotationOffsetRotator();
	float GetAnimRootMotionTranslationScale();
	void Crouch(bool bClientSimulation);
	void ClientVeryShortAdjustPosition(float timestamp, const struct Fvector& NewLoc, class UprimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	void ClientAdjustRootMotionSourcePosition(float timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct Fvector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UprimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float timestamp, float ServerMontageTrackPosition, const struct Fvector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UprimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float timestamp, const struct Fvector& NewLoc, const struct Fvector& NewVel, class UprimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float timestamp);
	bool CanJumpInternal();
	bool CanJump();
	bool CanCrouch();
	void CacheInitialMeshOffset(const struct Fvector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);
};

// Class Engine.DataAsset
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDataAsset : public UObject
{
public:
	class UClass*                                      NativeClass;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DataAsset");
		return ptr;
	}



};

// Class Engine.splineComponent
// 0x00F8 (FullSize[0x0520] - InheritedSize[0x0428])
class UsplineComponent : public UprimitiveComponent
{
public:
	struct FSplineCurves                               SplineCurves;                                              // 0x0428(0x0068) (Edit, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                          SplineInfo;                                                // 0x0490(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveQuat                            SplineRotInfo;                                             // 0x04A8(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                          SplineScaleInfo;                                           // 0x04C0(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                           SplineReparamTable;                                        // 0x04D8(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowSplineEditingPerInstance;                            // 0x04F0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I6VJ[0x3];                                     // 0x04F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ReparamStepsPerSegment;                                    // 0x04F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              duration;                                                  // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bStationaryEndpoints;                                      // 0x04FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSplineHasBeenEdited;                                      // 0x04FD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bModifiedByConstructionScript;                             // 0x04FE(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInputSplinePointsToConstructionScript;                    // 0x04FF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebug;                                                // 0x0500(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bClosedLoop;                                               // 0x0501(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bLoopPositionOverride;                                     // 0x0502(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_NHA4[0x1];                                     // 0x0503(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LoopPosition;                                              // 0x0504(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct Fvector                                     DefaultUpVector;                                           // 0x0508(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V9OZ[0xC];                                     // 0x0514(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.splineComponent");
		return ptr;
	}



	void UpdateSpline();
	void SetWorldLocationAtSplinePoint(int PointIndex, const struct Fvector& InLocation);
	void SetUpVectorAtSplinePoint(int PointIndex, const struct Fvector& InUpVector, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetTangentsAtSplinePoint(int PointIndex, const struct Fvector& InArriveTangent, const struct Fvector& InLeaveTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetTangentAtSplinePoint(int PointIndex, const struct Fvector& InTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineWorldPoints(TArray<struct Fvector> points);
	void SetSplinePointType(int PointIndex, TEnumAsByte<Engine_ESplinePointType> type, bool bUpdateSpline);
	void SetSplinePoints(TArray<struct Fvector> points, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineLocalPoints(TArray<struct Fvector> points);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetLocationAtSplinePoint(int PointIndex, const struct Fvector& InLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetDrawDebug(bool bShow);
	void SetDefaultUpVector(const struct Fvector& UpVector, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetClosedLoopAtPosition(bool bInClosedLoop, float key, bool bUpdateSpline);
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void RemoveSplinePoint(int index, bool bUpdateSpline);
	bool IsClosedLoop();
	struct Fvector GetWorldTangentAtDistanceAlongSpline(float distance);
	struct FRotator GetWorldRotationAtTime(float time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float distance);
	struct Fvector GetWorldLocationAtTime(float time, bool bUseConstantVelocity);
	struct Fvector GetWorldLocationAtSplinePoint(int PointIndex);
	struct Fvector GetWorldLocationAtDistanceAlongSpline(float distance);
	struct Fvector GetWorldDirectionAtTime(float time, bool bUseConstantVelocity);
	struct Fvector GetWorldDirectionAtDistanceAlongSpline(float distance);
	struct Fvector GetVectorPropertyAtSplinePoint(int index, const struct FName& propertyName);
	struct Fvector GetVectorPropertyAtSplineInputKey(float InKey, const struct FName& propertyName);
	struct Fvector GetUpVectorAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct Fvector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetUpVectorAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform GetTransformAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct Fvector GetTangentAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct Fvector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetTangentAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<Engine_ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	struct Fvector GetScaleAtTime(float time, bool bUseConstantVelocity);
	struct Fvector GetScaleAtSplinePoint(int PointIndex);
	struct Fvector GetScaleAtSplineInputKey(float InKey);
	struct Fvector GetScaleAtDistanceAlongSpline(float distance);
	struct FRotator GetRotationAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetRightVectorAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct Fvector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetRightVectorAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	int GetNumberOfSplineSegments();
	int GetNumberOfSplinePoints();
	struct Fvector GetLocationAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct Fvector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetLocationAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int PointIndex, struct Fvector* location, struct Fvector* Tangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct Fvector* LocalLocation, struct Fvector* LocalTangent);
	struct Fvector GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetInputKeyAtDistanceAlongSpline(float distance);
	float GetFloatPropertyAtSplinePoint(int index, const struct FName& propertyName);
	float GetFloatPropertyAtSplineInputKey(float InKey, const struct FName& propertyName);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	struct Fvector GetDirectionAtTime(float time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct Fvector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetDirectionAtDistanceAlongSpline(float distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetDefaultUpVector(TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector FindUpVectorClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform FindTransformClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct Fvector FindTangentClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector FindScaleClosestToWorldLocation(const struct Fvector& WorldLocation);
	struct FRotator FindRotationClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float FindRollClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector FindRightVectorClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct Fvector FindLocationClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float FindInputKeyClosestToWorldLocation(const struct Fvector& WorldLocation);
	struct Fvector FindDirectionClosestToWorldLocation(const struct Fvector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints(bool bUpdateSpline);
	void AddSplineWorldPoint(const struct Fvector& position);
	void AddSplinePointAtIndex(const struct Fvector& position, int index, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplinePoint(const struct Fvector& position, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplineLocalPoint(const struct Fvector& position);
	void AddPoints(TArray<struct FSplinePoint> points, bool bUpdateSpline);
	void AddPoint(const struct FSplinePoint& point, bool bUpdateSpline);
};

// Class Engine.animInstance
// 0x0240 (FullSize[0x0270] - InheritedSize[0x0030])
class UanimInstance : public UObject
{
public:
	class USkeleton*                                   CurrentSkeleton;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionMode>                RootMotionMode;                                            // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMultiThreadedAnimationUpdate : 1;                      // 0x0039(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsingCopyPoseFromMesh : 1;                                // 0x0039(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z8ZQ : 2;                                      // 0x0039(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bReceiveNotifiesFromLinkedInstances : 1;                   // 0x0039(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPropagateNotifiesToLinkedInstances : 1;                   // 0x0039(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bQueueMontageEvents : 1;                                   // 0x0039(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HKWH[0x6];                                     // 0x003A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                      // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                          // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                            // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAllMontageInstancesEnded;                                // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WV5U[0x88];                                    // 0x0080(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAnimNotifyQueue                            NotifyQueue;                                               // 0x0108(0x0070) (Transient, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                                     // 0x0178(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J1TV[0xE8];                                    // 0x0188(0x00E8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.animInstance");
		return ptr;
	}



	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	void UnlinkAnimClassLayers(class UClass* InClass);
	class Upawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName);
	void SnapshotPose(struct FPoseSnapshot* Snapshot);
	void SetRootMotionMode(TEnumAsByte<Engine_ERootMotionMode> Value);
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);
	void SetPropagateNotifiesToLinkedInstances(bool bSet);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	void SavePoseSnapshot(const struct FName& SnapshotName);
	void ResetDynamics(Engine_ETeleportType InTeleportType);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* asset, const struct FName& SlotNodeName, float BlendInTime, float blendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	float PlaySlotAnimation(class UAnimSequenceBase* asset, const struct FName& SlotNodeName, float BlendInTime, float blendOutTime, float InPlayRate, int LoopCount);
	void Montage_StopGroupByName(float InBlendOutTime, const struct FName& groupName);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* montage);
	void Montage_SetPosition(class UAnimMontage* montage, float NewPosition);
	void Montage_SetPlayRate(class UAnimMontage* montage, float NewPlayRate);
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* montage);
	void Montage_Resume(class UAnimMontage* montage);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, Engine_EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
	void Montage_Pause(class UAnimMontage* montage);
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* montage);
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* montage);
	bool Montage_IsPlaying(class UAnimMontage* montage);
	bool Montage_IsActive(class UAnimMontage* montage);
	float Montage_GetPosition(class UAnimMontage* montage);
	float Montage_GetPlayRate(class UAnimMontage* montage);
	bool Montage_GetIsStopped(class UAnimMontage* montage);
	struct FName Montage_GetCurrentSection(class UAnimMontage* montage);
	float Montage_GetBlendTime(class UAnimMontage* montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	bool IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* asset, const struct FName& SlotNodeName);
	bool IsAnyMontagePlaying();
	bool HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName);
	bool GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime);
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(const struct FName& InSyncGroupName);
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);
	bool GetReceiveNotifiesFromLinkedInstances();
	bool GetPropagateNotifiesToLinkedInstances();
	class UskeletalMeshComponent* GetOwningComponent();
	class Uactor* GetOwningActor();
	class UanimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);
	class UanimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UanimInstance*>* OutLinkedInstances);
	class UanimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float GetInstanceMachineWeight(int MachineIndex);
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float GetCurveValue(const struct FName& CurveName);
	struct FName GetCurrentStateName(int MachineIndex);
	class UAnimMontage* GetCurrentActiveMontage();
	void GetAllCurveNames(TArray<struct FName>* OutNames);
	void GetActiveCurveNames(Engine_EAnimCurveType CurveType, TArray<struct FName>* OutNames);
	void ClearMorphTargets();
	float CalculateDirection(const struct Fvector& Velocity, const struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintPostEvaluateAnimation();
	void BlueprintLinkedAnimationLayersInitialized();
	void BlueprintInitializeAnimation();
	void BlueprintBeginPlay();
};

// Class Engine.AudioComponent
// 0x05F0 (FullSize[0x0800] - InheritedSize[0x0210])
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                                  Sound;                                                     // 0x0210(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                        // 0x0218(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                                 SoundClassOverride;                                        // 0x0228(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDestroy : 1;                                          // 0x0230(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                               // 0x0230(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                          // 0x0230(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowSpatialization : 1;                                  // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideSubtitlePriority : 1;                             // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsUISound : 1;                                            // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableLowPassFilter : 1;                                  // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverridePriority : 1;                                     // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressSubtitles : 1;                                    // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IX5F : 6;                                      // 0x0231(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_OT5U : 3;                                      // 0x0232(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAutoManageAttachment : 1;                                 // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MLQP[0x5];                                     // 0x0233(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       AudioComponentUserID;                                      // 0x0238(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchModulationMin;                                        // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchModulationMax;                                        // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeModulationMin;                                       // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeModulationMax;                                       // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMultiplier;                                          // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerAttackTime;                                // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerReleaseTime;                               // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              priority;                                                  // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SubtitlePriority;                                          // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                         // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMultiplier;                                           // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LowPassFilterFrequency;                                    // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3QV0[0x8];                                     // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                      // 0x0288(0x03A0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USoundConcurrency*                           ConcurrencySettings;                                       // 0x0628(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ConcurrencySet[0x50];                                      // 0x0630(0x0050) UNKNOWN PROPERTY: SetProperty
	unsigned char                                      UnknownData_EB1Y[0xC];                                     // 0x0680(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EAttachmentRule                             AutoAttachLocationRule;                                    // 0x068C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachRotationRule;                                    // 0x068D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachScaleRule;                                       // 0x068E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T18F[0x1];                                     // 0x068F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioFinished;                                           // 0x0690(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SKTP[0x18];                                    // 0x06A0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioPlaybackPercent;                                    // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R6P7[0x18];                                    // 0x06C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioSingleEnvelopeValue;                                // 0x06E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WWOA[0x18];                                    // 0x06F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioMultiEnvelopeValue;                                 // 0x0708(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EJII[0x18];                                    // 0x0718(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoundModulation                            Modulation;                                                // 0x0730(0x0010) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScriptDelegate                             OnQueueSubtitles;                                          // 0x0740(0x0010) ELEMENT_SIZE_MISMATCH (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E1YS[0x4];                                     // 0x0740(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                          // 0x0754(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AutoAttachSocketName;                                      // 0x075C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4G98[0x98];                                    // 0x0768(0x0098) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}



	void StopDelayed(float DelayTime);
	void stop();
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);
	void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetPaused(bool bPause);
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);
	void SetIntParameter(const struct FName& InName, int InInt);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void SetBoolParameter(const struct FName& InName, bool InBool);
	void Play(float startTime);
	bool IsPlaying();
	bool HasCookedFFTData();
	bool HasCookedAmplitudeEnvelopeData();
	Engine_EAudioComponentPlayState GetPlayState();
	bool GetCookedFFTDataForAllPlayingSounds(TArray<struct FSoundWaveSpectralDataPerSound>* OutSoundWaveSpectralData);
	bool GetCookedFFTData(TArray<float> FrequenciesToGet, TArray<struct FSoundWaveSpectralData>* OutSoundWaveSpectralData);
	bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FSoundWaveEnvelopeDataPerSound>* OutEnvelopeData);
	bool GetCookedEnvelopeData(float* OutEnvelopeData);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, Engine_EAudioFaderCurve FadeCurve);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float startTime, Engine_EAudioFaderCurve FadeCurve);
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, Engine_EAudioFaderCurve FadeCurve);
	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);
};

// Class Engine.FXSystemComponent
// 0x0000 (FullSize[0x0428] - InheritedSize[0x0428])
class UFXSystemComponent : public UprimitiveComponent
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.FXSystemComponent");
		return ptr;
	}



	void SetVectorParameter(const struct FName& parameterName, const struct Fvector& param);
	void SetUseAutoManageAttachment(bool bAutoManage);
	void SetFloatParameter(const struct FName& parameterName, float param);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetColorParameter(const struct FName& parameterName, const struct FLinearColor& param);
	void SetBoolParameter(const struct FName& parameterName, bool param);
	void SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, Engine_EAttachmentRule LocationRule, Engine_EAttachmentRule RotationRule, Engine_EAttachmentRule ScaleRule);
	void SetActorParameter(const struct FName& parameterName, class Uactor* param);
	void ReleaseToPool();
	class UFXSystemAsset* GetFXSystemAsset();
};

// Class Engine.FXSystemAsset
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UFXSystemAsset : public UObject
{
public:
	uint32_t                                           MaxPoolSize;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5S2G[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.FXSystemAsset");
		return ptr;
	}



};

// Class Engine.animNotify
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UanimNotify : public UObject
{
public:
	unsigned char                                      UnknownData_BVV5[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.animNotify");
		return ptr;
	}



	bool Received_Notify(class UskeletalMeshComponent* MeshComp, class UAnimSequenceBase* animation);
	struct FString GetNotifyName();
};

// Class Engine.AnimNotifyState
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UAnimNotifyState : public UObject
{
public:
	unsigned char                                      UnknownData_2TU2[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotifyState");
		return ptr;
	}



	bool Received_NotifyTick(class UskeletalMeshComponent* MeshComp, class UAnimSequenceBase* animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class UskeletalMeshComponent* MeshComp, class UAnimSequenceBase* animation);
	bool Received_NotifyBegin(class UskeletalMeshComponent* MeshComp, class UAnimSequenceBase* animation, float TotalDuration);
	struct FString GetNotifyName();
};

// Class Engine.SaveGame
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class USaveGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SaveGame");
		return ptr;
	}



};

// Class Engine.GameModeBase
// 0x00A8 (FullSize[0x02D8] - InheritedSize[0x0230])
class UGameModeBase : public UInfo
{
public:
	struct FString                                     OptionsString;                                             // 0x0230(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameSessionClass;                                          // 0x0240(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameStateClass;                                            // 0x0248(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PlayerControllerClass;                                     // 0x0250(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PlayerStateClass;                                          // 0x0258(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      HUDClass;                                                  // 0x0260(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultPawnClass;                                          // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      SpectatorClass;                                            // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                      // 0x0278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ServerStatReplicatorClass;                                 // 0x0280(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameSession*                                GameSession;                                               // 0x0288(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameStateBase*                              gameState;                                                 // 0x0290(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UServerStatReplicator*                       ServerStatReplicator;                                      // 0x0298(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FText                                       DefaultPlayerName;                                         // 0x02A0(0x0018) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSeamlessTravel : 1;                                    // 0x02B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStartPlayersAsSpectators : 1;                             // 0x02B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bPauseable : 1;                                            // 0x02B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_58LN[0x1F];                                    // 0x02B9(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameModeBase");
		return ptr;
	}



	void StartPlay();
	class Upawn* SpawnDefaultPawnFor(class Ucontroller* NewPlayer, class Uactor* StartSpot);
	class Upawn* SpawnDefaultPawnAtTransform(class Ucontroller* NewPlayer, const struct FTransform& SpawnTransform);
	bool ShouldReset(class Uactor* ActorToReset);
	void ReturnToMainMenuHost();
	void RestartPlayerAtTransform(class Ucontroller* NewPlayer, const struct FTransform& SpawnTransform);
	void RestartPlayerAtPlayerStart(class Ucontroller* NewPlayer, class Uactor* StartSpot);
	void RestartPlayer(class Ucontroller* NewPlayer);
	void ResetLevel();
	bool PlayerCanRestart(class UplayerController* player);
	bool MustSpectate(class UplayerController* NewPlayerController);
	void K2_PostLogin(class UplayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class UplayerController* OldPC, class UplayerController* NewPC);
	void K2_OnRestartPlayer(class Ucontroller* NewPlayer);
	void K2_OnLogout(class Ucontroller* ExitingController);
	void K2_OnChangeName(class Ucontroller* other, const struct FString& NewName, bool bNameChange);
	class Uactor* K2_FindPlayerStart(class Ucontroller* player, const struct FString& IncomingName);
	void InitStartSpot(class Uactor* StartSpot, class Ucontroller* NewPlayer);
	void InitializeHUDForPlayer(class UplayerController* NewPlayer);
	bool HasMatchStarted();
	void HandleStartingNewPlayer(class UplayerController* NewPlayer);
	int GetNumSpectators();
	int GetNumPlayers();
	class UClass* GetDefaultPawnClassForController(class Ucontroller* InController);
	class Uactor* FindPlayerStart(class Ucontroller* player, const struct FString& IncomingName);
	class Uactor* ChoosePlayerStart(class Ucontroller* player);
	void ChangeName(class Ucontroller* controller, const struct FString& NewName, bool bNameChange);
	bool CanSpectate(class UplayerController* Viewer, class UplayerState* ViewTarget);
};

// Class Engine.GameMode
// 0x0050 (FullSize[0x0328] - InheritedSize[0x02D8])
class UGameMode : public UGameModeBase
{
public:
	struct FName                                       MatchState;                                                // 0x02D8(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bDelayedStart : 1;                                         // 0x02E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K6D4[0x3];                                     // 0x02E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumSpectators;                                             // 0x02E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumPlayers;                                                // 0x02EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumBots;                                                   // 0x02F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinRespawnDelay;                                           // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumTravellingPlayers;                                      // 0x02F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_387S[0x4];                                     // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EngineMessageClass;                                        // 0x0300(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UplayerState*>                        InactivePlayerArray;                                       // 0x0308(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InactivePlayerStateLifeSpan;                               // 0x0318(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxInactivePlayers;                                        // 0x031C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bHandleDedicatedServerReplays;                             // 0x0320(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_WM2Z[0x7];                                     // 0x0321(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameMode");
		return ptr;
	}



	void StartMatch();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void Say(const struct FString& msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(const struct FName& NewState);
	bool IsMatchInProgress();
	bool HasMatchEnded();
	struct FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};

// Class Engine.GameStateBase
// 0x0050 (FullSize[0x0280] - InheritedSize[0x0230])
class UGameStateBase : public UInfo
{
public:
	class UClass*                                      GameModeClass;                                             // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameModeBase*                               AuthorityGameMode;                                         // 0x0238(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      SpectatorClass;                                            // 0x0240(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UplayerState*>                        PlayerArray;                                               // 0x0248(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReplicatedHasBegunPlay;                                   // 0x0258(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_VB8L[0x3];                                     // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ReplicatedWorldTimeSeconds;                                // 0x025C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerWorldTimeSecondsDelta;                               // 0x0260(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                     // 0x0264(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_M23P[0x18];                                    // 0x0268(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameStateBase");
		return ptr;
	}



	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_GameModeClass();
	bool HasMatchStarted();
	bool HasBegunPlay();
	float GetServerWorldTimeSeconds();
	float GetPlayerStartTime(class Ucontroller* controller);
	float GetPlayerRespawnDelay(class Ucontroller* controller);
};

// Class Engine.gameState
// 0x0028 (FullSize[0x02A8] - InheritedSize[0x0280])
class UgameState : public UGameStateBase
{
public:
	struct FName                                       MatchState;                                                // 0x0280(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       PreviousMatchState;                                        // 0x028C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                ElapsedTime;                                               // 0x0298(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S583[0xC];                                     // 0x029C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.gameState");
		return ptr;
	}



	void OnRep_MatchState();
	void OnRep_ElapsedTime();
};

// Class Engine.controller
// 0x0080 (FullSize[0x02B0] - InheritedSize[0x0230])
class Ucontroller : public Uactor
{
public:
	unsigned char                                      UnknownData_P54F[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UplayerState*                                playerState;                                               // 0x0238(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5SQR[0x8];                                     // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                     // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FName                                       stateName;                                                 // 0x0258(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OJ3R[0x4];                                     // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Upawn*                                       pawn;                                                      // 0x0268(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_QLHH[0x8];                                     // 0x0270(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Ucharacter*                                  character;                                                 // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             TransformComponent;                                        // 0x0280(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_6NRI[0x18];                                    // 0x0288(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    ControlRotation;                                           // 0x02A0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      bAttachToPawn : 1;                                         // 0x02AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_J6LS[0x3];                                     // 0x02AD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.controller");
		return ptr;
	}



	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct Fvector& NewLocation, const struct FRotator& NewRotation);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	void ReceiveUnPossess(class Upawn* UnpossessedPawn);
	void ReceivePossess(class Upawn* PossessedPawn);
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class Uactor* DamagedActor, class Uactor* DamageCauser);
	void Possess(class Upawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class Uactor* other, const struct Fvector& ViewPoint, bool bAlternateChecks);
	class Upawn* K2_GetPawn();
	bool IsPlayerController();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class Uactor* GetViewTarget();
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct Fvector& NewLocation, const struct FRotator& NewRotation);
	class UplayerController* CastToPlayerController();
};

// Class Engine.playerController
// 0x02D8 (FullSize[0x0588] - InheritedSize[0x02B0])
class UplayerController : public Ucontroller
{
public:
	class Uplayer*                                     player;                                                    // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Upawn*                                       AcknowledgedPawn;                                          // 0x02B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                   // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHud*                                        MyHUD;                                                     // 0x02C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCameraManager*                        PlayerCameraManager;                                       // 0x02D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PlayerCameraManagerClass;                                  // 0x02D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoManageActiveCameraTarget;                             // 0x02E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N0TT[0x3];                                     // 0x02E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    TargetViewRotation;                                        // 0x02E4(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TLCG[0xC];                                     // 0x02F0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SmoothTargetViewRotationSpeed;                             // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5RUB[0x8];                                     // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class Uactor*>                              HiddenActors;                                              // 0x0308(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UprimitiveComponent>>  HiddenPrimitiveComponents;                                 // 0x0318(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JCDR[0x4];                                     // 0x0328(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastSpectatorStateSynchTime;                               // 0x032C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     LastSpectatorSyncLocation;                                 // 0x0330(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    LastSpectatorSyncRotation;                                 // 0x033C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                ClientCap;                                                 // 0x0348(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BT8F[0x4];                                     // 0x034C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCheatManager*                               CheatManager;                                              // 0x0350(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      CheatClass;                                                // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UplayerInput*                                playerInput;                                               // 0x0360(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                                // 0x0368(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LOW2[0x70];                                    // 0x0378(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_8JT0 : 4;                                      // 0x03E8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPlayerIsWaiting : 1;                                      // 0x03E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z0KC[0x3];                                     // 0x03E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      NetPlayerIndex;                                            // 0x03EC(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X6NX[0x3B];                                    // 0x03ED(0x003B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              PendingSwapConnection;                                     // 0x0428(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetConnection*                              NetConnection;                                             // 0x0430(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P0E6[0xC];                                     // 0x0438(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InputYawScale;                                             // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InputPitchScale;                                           // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InputRollScale;                                            // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowMouseCursor : 1;                                      // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableClickEvents : 1;                                    // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableTouchEvents : 1;                                    // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMouseOverEvents : 1;                                // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableTouchOverEvents : 1;                                // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceFeedbackEnabled : 1;                                 // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X4HD[0x3];                                     // 0x0451(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceFeedbackScale;                                        // 0x0454(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Fkey>                                ClickEventKeys;                                            // 0x0458(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EMouseCursor>              DefaultMouseCursor;                                        // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EMouseCursor>              CurrentMouseCursor;                                        // 0x0469(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              DefaultClickTraceChannel;                                  // 0x046A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              CurrentClickTraceChannel;                                  // 0x046B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitResultTraceDistance;                                    // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16_t                                           SeamlessTravelCount;                                       // 0x0470(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16_t                                           LastCompletedSeamlessTravelCount;                          // 0x0472(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GS6C[0x74];                                    // 0x0474(0x0074) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInputComponent*                             InactiveStateInputComponent;                               // 0x04E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_QWSI : 2;                                      // 0x04F0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bShouldPerformFullTickWhenPaused : 1;                      // 0x04F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_6GGE[0x17];                                    // 0x04F1(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTouchInterface*                             CurrentTouchInterface;                                     // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_G4EL[0x50];                                    // 0x0510(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USpectatorPawn*                              SpectatorPawn;                                             // 0x0560(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_OTZ4[0x4];                                     // 0x0568(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsLocalPlayerController;                                  // 0x056C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_BL3V[0x3];                                     // 0x056D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     SpawnLocation;                                             // 0x0570(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_4R3G[0xC];                                     // 0x057C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.playerController");
		return ptr;
	}



	bool WasInputKeyJustReleased(const struct Fkey& key);
	bool WasInputKeyJustPressed(const struct Fkey& key);
	void ToggleSpeaking(bool bInSpeaking);
	void TestServerLevelVisibilityChange(const struct FName& PackageName, const struct FName& FileName);
	void SwitchLevel(const struct FString& Url);
	void StopHapticEffect(InputCore_EControllerHand Hand);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class Uactor* NewViewTarget, float BlendTime, TEnumAsByte<Engine_EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetMouseLocation(int x, int y);
	void SetMouseCursorWidget(TEnumAsByte<CoreUObject_EMouseCursor> Cursor, class UUserWidget* CursorWidget);
	void SetHapticsByValue(float frequency, float amplitude, InputCore_EControllerHand Hand);
	void SetDisableHaptics(bool bNewDisabled);
	void SetControllerLightColor(const struct Fcolor& color);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct Fvector& location, const struct FRotator& rotation);
	void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct Fvector& AttenuationLocationOVerride);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities);
	void ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& playerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct Fvector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& playerId);
	void ServerExecRPC(const struct FString& msg);
	void ServerExec(const struct FString& msg);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& newMode);
	void ServerAcknowledgePossession(class Upawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	void ResetControllerLightColor();
	bool ProjectWorldLocationToScreen(const struct Fvector& WorldLocation, struct FVector2D* ScreenLocation, bool bPlayerViewportRelative);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, InputCore_EControllerHand Hand, float scale, bool bLoop);
	void PlayDynamicForceFeedback(float intensity, float duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<Engine_EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const struct FString& Url);
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
	bool IsInputKeyDown(const struct Fkey& key);
	void GetViewportSize(int* sizeX, int* sizeY);
	class USpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct Fvector GetInputVectorKeyState(const struct Fkey& key);
	void GetInputTouchState(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct Fvector* Tilt, struct Fvector* RotationRate, struct Fvector* Gravity, struct Fvector* Acceleration);
	float GetInputKeyTimeDown(const struct Fkey& key);
	void GetInputAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct Fkey& key);
	class UHud* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FhitResult* hitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FhitResult* hitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FhitResult* hitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FhitResult* hitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FhitResult* hitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FhitResult* hitResult);
	struct Fvector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct Fvector* WorldLocation, struct Fvector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct Fvector* WorldLocation, struct Fvector* WorldDirection);
	void ConsoleKey(const struct Fkey& key);
	void ClientWasKicked(uint32_t kickReason, uint32_t errorCode, const struct FString& additionalInfo);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LodIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& playerId);
	void ClientTravelInternal(const struct FString& Url, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct Fguid& MapPackageGuid);
	void ClientTravel(const struct FString& Url, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct Fguid& MapPackageGuid);
	void ClientTeamMessage(class UplayerState* SenderPlayerState, const struct FString& S, const struct FName& type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& tag);
	void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class Uactor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UmaterialInterface* MATERIAL, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct Fcolor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason);
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class Upawn* NewPawn);
	void ClientRestart(class Upawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* message, int SWITCH, class UplayerState* RelatedPlayerState_2, class UplayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientPrestreamTextures(class Uactor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& levelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct Fvector& location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FForceFeedbackParameters& Params);
	void ClientPlayCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);
	void ClientPlayCameraShake(class UClass* Shake, float scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float scale, float rate, float BlendInTime, float blendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<Engine_ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& playerId);
	void ClientMessage(const struct FString& S, const struct FName& type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class Uactor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct Fvector& InLoc, float duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void ClearAudioListenerAttenuationOverride();
	bool CanRestartPlayer();
	void camera(const struct FName& newMode);
	void AddYawInput(float val);
	void AddRollInput(float val);
	void AddPitchInput(float val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};

// Class Engine.ApplicationLifecycleComponent
// 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
class UApplicationLifecycleComponent : public UactorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                         // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                         // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                    // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                   // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                          // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                  // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;               // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnTemperatureChangeDelegate;                               // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLowPowerModeDelegate;                                    // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ApplicationLifecycleComponent");
		return ptr;
	}



};

// Class Engine.Subsystem
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class USubsystem : public UObject
{
public:
	unsigned char                                      UnknownData_VNUD[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Subsystem");
		return ptr;
	}



};

// Class Engine.DynamicSubsystem
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UDynamicSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DynamicSubsystem");
		return ptr;
	}



};

// Class Engine.EngineSubsystem
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UEngineSubsystem : public UDynamicSubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EngineSubsystem");
		return ptr;
	}



};

// Class Engine.MovementComponent
// 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
class UMovementComponent : public UactorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                          // 0x00B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UprimitiveComponent*                         UpdatedPrimitive;                                          // 0x00C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X5PP[0x4];                                     // 0x00C8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     Velocity;                                                  // 0x00CC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     PlaneConstraintNormal;                                     // 0x00D8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Fvector                                     PlaneConstraintOrigin;                                     // 0x00E4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                 // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                           // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTickBeforeOwner : 1;                                      // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                         // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConstrainToPlane : 1;                                     // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                   // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoRegisterPhysicsVolumeUpdates : 1;                     // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bComponentShouldUpdatePhysicsVolume : 1;                   // 0x00F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6UI9[0x2];                                     // 0x00F1(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EPlaneConstraintAxisSetting                 PlaneConstraintAxisSetting;                                // 0x00F3(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_NCWK[0x4];                                     // 0x00F4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MovementComponent");
		return ptr;
	}



	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct Fvector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct Fvector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct Fvector& Forward, const struct Fvector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(Engine_EPlaneConstraintAxisSetting NewAxisSetting);
	void PhysicsVolumeChanged(class UPhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct Fvector& delta, const struct FRotator& NewRotation, struct FhitResult* outHit, bool bSweep, bool bTeleport);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct Fvector GetPlaneConstraintOrigin();
	struct Fvector GetPlaneConstraintNormal();
	Engine_EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();
	class UPhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct Fvector ConstrainNormalToPlane(const struct Fvector& normal);
	struct Fvector ConstrainLocationToPlane(const struct Fvector& location);
	struct Fvector ConstrainDirectionToPlane(const struct Fvector& direction);
};

// Class Engine.NavMovementComponent
// 0x0048 (FullSize[0x0140] - InheritedSize[0x00F8])
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                             // 0x00F8(0x0038) (Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FixedPathBrakingDistance;                                  // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                    // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUseAccelerationForPaths : 1;                              // 0x0134(0x0001) BIT_FIELD (Edit, Config, GlobalConfig, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bUseFixedBrakingDistanceForPaths : 1;                      // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMovementProperties                         MovementState;                                             // 0x0135(0x0001) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UJ27[0x2];                                     // 0x0136(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UObject*                                     PathFollowingComp;                                         // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavMovementComponent");
		return ptr;
	}



	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
};

// Class Engine.PawnMovementComponent
// 0x0008 (FullSize[0x0148] - InheritedSize[0x0140])
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class Upawn*                                       PawnOwner;                                                 // 0x0140(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PawnMovementComponent");
		return ptr;
	}



	struct Fvector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct Fvector GetPendingInputVector();
	class Upawn* GetPawnOwner();
	struct Fvector GetLastInputVector();
	struct Fvector ConsumeInputVector();
	void AddInputVector(const struct Fvector& WorldVector, bool bForce);
};

// Class Engine.SoundEffectPreset
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class USoundEffectPreset : public UObject
{
public:
	unsigned char                                      UnknownData_KU5Z[0x18];                                    // 0x0030(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundEffectPreset");
		return ptr;
	}



};

// Class Engine.SoundEffectSourcePreset
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundEffectSourcePreset");
		return ptr;
	}



};

// Class Engine.SoundEffectSubmixPreset
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundEffectSubmixPreset");
		return ptr;
	}



};

// Class Engine.GameInstanceSubsystem
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UGameInstanceSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameInstanceSubsystem");
		return ptr;
	}



};

// Class Engine.ShapeComponent
// 0x0018 (FullSize[0x0440] - InheritedSize[0x0428])
class UShapeComponent : public UprimitiveComponent
{
public:
	class UBodySetup*                                  ShapeBodySetup;                                            // 0x0428(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AreaClass;                                                 // 0x0430(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      ShapeColor;                                                // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                   // 0x043C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                             // 0x043C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDynamicObstacle : 1;                                      // 0x043C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4FG4[0x3];                                     // 0x043D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ShapeComponent");
		return ptr;
	}



};

// Class Engine.BoxComponent
// 0x0010 (FullSize[0x0450] - InheritedSize[0x0440])
class UBoxComponent : public UShapeComponent
{
public:
	struct Fvector                                     BoxExtent;                                                 // 0x0440(0x000C) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LineThickness;                                             // 0x044C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BoxComponent");
		return ptr;
	}



	void SetBoxExtent(const struct Fvector& InBoxExtent, bool bUpdateOverlaps);
	struct Fvector GetUnscaledBoxExtent();
	struct Fvector GetScaledBoxExtent();
};

// Class Engine.NavAreaBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UNavAreaBase : public UObject
{
public:
	unsigned char                                      UnknownData_PR8D[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavAreaBase");
		return ptr;
	}



};

// Class Engine.LevelScriptActor
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class ULevelScriptActor : public Uactor
{
public:
	unsigned char                                      bInputEnabled : 1;                                         // 0x0230(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_R26Q[0x7];                                     // 0x0231(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelScriptActor");
		return ptr;
	}



	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void LevelReset();
};

// Class Engine.CameraActor
// 0x0570 (FullSize[0x07A0] - InheritedSize[0x0230])
class UCameraActor : public Uactor
{
public:
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoActivateForPlayer;                                     // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_YYVB[0x7];                                     // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCameraComponent*                            CameraComponent;                                           // 0x0238(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             SceneComponent;                                            // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_Q6EK[0x8];                                     // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x0250(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_86VI[0x3];                                     // 0x0251(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AspectRatio;                                               // 0x0254(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              FOVAngle;                                                  // 0x0258(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              PostProcessBlendWeight;                                    // 0x025C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0260(0x0540) (Deprecated, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}



	int GetAutoActivatePlayerIndex();
};

// Class Engine.PrimaryDataAsset
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UPrimaryDataAsset : public UDataAsset
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PrimaryDataAsset");
		return ptr;
	}



};

// Class Engine.DecalActor
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UDecalActor : public Uactor
{
public:
	class UDecalComponent*                             Decal;                                                     // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}



	void SetDecalMaterial(class UmaterialInterface* NewDecalMaterial);
	class UmaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};

// Class Engine.CharacterMovementComponent
// 0x04E8 (FullSize[0x0630] - InheritedSize[0x0148])
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData_YIOO[0x10];                                    // 0x0148(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Ucharacter*                                  CharacterOwner;                                            // 0x0158(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              GravityScale;                                              // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxStepHeight;                                             // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpZVelocity;                                             // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpOffJumpZFactor;                                        // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WalkableFloorAngle;                                        // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              WalkableFloorZ;                                            // 0x0174(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_EMovementMode>                  MovementMode;                                              // 0x0178(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CustomMovementMode;                                        // 0x0179(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ENetworkSmoothingMode                       NetworkSmoothingMode;                                      // 0x017A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DKGY[0x1];                                     // 0x017B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GroundFriction;                                            // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SYSZ[0x1C];                                    // 0x0180(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              maxWalkSpeed;                                              // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxWalkSpeedCrouched;                                      // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSwimSpeed;                                              // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxFlySpeed;                                               // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxCustomMovementSpeed;                                    // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAcceleration;                                           // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinAnalogWalkSpeed;                                        // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingFrictionFactor;                                     // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingFriction;                                           // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingSubStepTime;                                        // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationWalking;                                // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationFalling;                                // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationSwimming;                               // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BrakingDecelerationFlying;                                 // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControl;                                                // 0x01D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControlBoostMultiplier;                                 // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControlBoostVelocityThreshold;                          // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FallingLateralFriction;                                    // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CrouchedHalfHeight;                                        // 0x01E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Buoyancy;                                                  // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PerchRadiusThreshold;                                      // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PerchAdditionalHeight;                                     // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationRate;                                              // 0x01F4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                           // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyGravityWhileJumping : 1;                             // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseControllerDesiredRotation : 1;                         // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientRotationToMovement : 1;                             // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSweepWhileNavWalking : 1;                                 // 0x0200(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8Z5E : 1;                                      // 0x0200(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bMovementInProgress : 1;                                   // 0x0200(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                          // 0x0200(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableServerDualMoveScopedMovementUpdates : 1;            // 0x0201(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceMaxAccel : 1;                                        // 0x0201(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRunPhysicsWithNoController : 1;                           // 0x0201(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceNextFloorCheck : 1;                                  // 0x0201(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShrinkProxyCapsule : 1;                                   // 0x0201(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanWalkOffLedges : 1;                                     // 0x0201(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                        // 0x0201(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z2QU : 1;                                      // 0x0201(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_8763 : 1;                                      // 0x0202(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNetworkSkipProxyPredictionOnNetUpdate : 1;                // 0x0202(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;       // 0x0202(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                             // 0x0202(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePhysicsInteraction : 1;                             // 0x0202(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTouchForceScaledToMass : 1;                               // 0x0202(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPushForceScaledToMass : 1;                                // 0x0202(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPushForceUsingZOffset : 1;                                // 0x0202(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScalePushForceToVelocity : 1;                             // 0x0203(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I0X6[0x4];                                     // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USceneComponent*                             DeferredUpdatedMoveComponent;                              // 0x0208(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOutOfWaterStepHeight;                                   // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutofWaterZ;                                               // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Mass;                                                      // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StandingDownwardForceScale;                                // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialPushForceFactor;                                    // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PushForceFactor;                                           // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PushForcePointZOffsetFactor;                               // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TouchForceFactor;                                          // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTouchForce;                                             // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxTouchForce;                                             // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RepulsionForce;                                            // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     Acceleration;                                              // 0x023C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_DFNB[0x8];                                     // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FQuat                                       LastUpdateRotation;                                        // 0x0250(0x0010) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct Fvector                                     LastUpdateLocation;                                        // 0x0260(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Fvector                                     LastUpdateVelocity;                                        // 0x026C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerLastTransformUpdateTimeStamp;                        // 0x0278(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerLastClientGoodMoveAckTime;                           // 0x027C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ServerLastClientAdjustmentTime;                            // 0x0280(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Fvector                                     PendingImpulseToApply;                                     // 0x0284(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Fvector                                     PendingForceToApply;                                       // 0x0290(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AnalogInputModifier;                                       // 0x029C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_XJ9G[0xC];                                     // 0x02A0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxSimulationTimeStep;                                     // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSimulationIterations;                                   // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxJumpApexAttemptsPerSimulation;                          // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithGeometry;                              // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithGeometryAsProxy;                       // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithPawn;                                  // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationWithPawnAsProxy;                           // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkSimulatedSmoothLocationTime;                        // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkSimulatedSmoothRotationTime;                        // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;            // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;            // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetProxyShrinkRadius;                                      // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetProxyShrinkHalfHeight;                                  // 0x02DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMaxSmoothUpdateDistance;                            // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkNoSmoothUpdateDistance;                             // 0x02E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                   // 0x02E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMinTimeBetweenClientAdjustments;                    // 0x02EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;     // 0x02F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetworkLargeClientCorrectionDistance;                      // 0x02F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LedgeCheckThreshold;                                       // 0x02F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpOutOfWaterPitch;                                       // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindFloorResult                            CurrentFloor;                                              // 0x0300(0x009C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMovementMode>                  DefaultLandMovementMode;                                   // 0x039C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMovementMode>                  DefaultWaterMovementMode;                                  // 0x039D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMovementMode>                  GroundMovementMode;                                        // 0x039E(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                     // 0x039F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseVelocityX : 1;                                  // 0x039F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseVelocityY : 1;                                  // 0x039F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                  // 0x039F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                            // 0x039F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bJustTeleported : 1;                                       // 0x039F(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetworkUpdateReceived : 1;                                // 0x039F(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNetworkMovementModeChanged : 1;                           // 0x039F(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection : 1;         // 0x03A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bServerAcceptClientAuthoritativePosition : 1;              // 0x03A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNotifyApex : 1;                                           // 0x03A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCheatFlying : 1;                                          // 0x03A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWantsToCrouch : 1;                                        // 0x03A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                          // 0x03A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreBaseRotation : 1;                                   // 0x03A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFastAttachedMove : 1;                                     // 0x03A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysCheckFloor : 1;                                     // 0x03A1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                            // 0x03A1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPerformingJumpOff : 1;                                    // 0x03A1(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                               // 0x03A1(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRVOAvoidance : 1;                                      // 0x03A1(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                         // 0x03A1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MXFR : 1;                                      // 0x03A1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bWasSimulatingRootMotion : 1;                              // 0x03A1(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowPhysicsRotationDuringAnimRootMotion : 1;             // 0x03A2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasRequestedVelocity : 1;                                 // 0x03A2(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                            // 0x03A2(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                  // 0x03A2(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_PZP0 : 2;                                      // 0x03A2(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bProjectNavMeshWalking : 1;                                // 0x03A2(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels : 1;                    // 0x03A2(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_MVFM[0x11];                                    // 0x03A3(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AvoidanceConsiderationRadius;                              // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     RequestedVelocity;                                         // 0x03B8(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AvoidanceUID;                                              // 0x03C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                            // 0x03C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                             // 0x03CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                            // 0x03D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                              AvoidanceWeight;                                           // 0x03D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     PendingLaunchVelocity;                                     // 0x03D8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WJVM[0xAC];                                    // 0x03E4(0x00AC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NavMeshProjectionInterval;                                 // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionTimer;                                    // 0x0494(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionInterpSpeed;                              // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionHeightScaleUp;                            // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavMeshProjectionHeightScaleDown;                          // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NavWalkingFloorDistTolerance;                              // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                   // 0x04A8(0x0030) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_91RQ[0x18];                                    // 0x04D8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinTimeBetweenTimeStampResets;                             // 0x04F0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2JJN[0x4];                                     // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionSourceGroup                      CurrentRootMotion;                                         // 0x04F8(0x0038) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U616[0x90];                                    // 0x0530(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionMovementParams                   RootMotionParams;                                          // 0x05C0(0x0040) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct Fvector                                     AnimRootMotionVelocity;                                    // 0x0600(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4YUQ[0x24];                                    // 0x060C(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CharacterMovementComponent");
		return ptr;
	}



	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	void K2_FindFloor(const struct Fvector& CapsuleLocation, struct FFindFloorResult* FloorResult);
	void K2_ComputeFloorDist(const struct Fvector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult);
	bool IsWalking();
	bool IsWalkable(const struct FhitResult& hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UprimitiveComponent* GetMovementBase();
	float GetMinAnalogSpeed();
	float GetMaxJumpHeightWithJumpTime();
	float GetMaxJumpHeight();
	float GetMaxBrakingDeceleration();
	float GetMaxAcceleration();
	struct Fvector GetLastUpdateVelocity();
	struct FRotator GetLastUpdateRotation();
	struct Fvector GetLastUpdateLocation();
	struct Fvector GetImpartedMovementBaseVelocity();
	struct Fvector GetCurrentAcceleration();
	class Ucharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClearAccumulatedForces();
	void CapsuleTouched(class UprimitiveComponent* OverlappedComp, class Uactor* other, class UprimitiveComponent* otherComp, int otherBodyIndex, bool bFromSweep, const struct FhitResult& sweepResult);
	void CalcVelocity(float deltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct Fvector& Impulse, bool bVelocityChange);
	void AddForce(const struct Fvector& Force);
};

// Class Engine.ParticleSystemComponent
// 0x0284 (FullSize[0x06AC] - InheritedSize[0x0428])
class UParticleSystemComponent : public UFXSystemComponent
{
public:
	class UparticleSystem*                             Template;                                                  // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UmaterialInterface*>                  EmitterMaterials;                                          // 0x0430(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UskeletalMeshComponent*>              SkelMeshComponents;                                        // 0x0440(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9PMF[0x1];                                     // 0x0450(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bResetOnDetach : 1;                                        // 0x0451(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                              // 0x0451(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZHOT : 2;                                      // 0x0451(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowRecycling : 1;                                       // 0x0451(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoManageAttachment : 1;                                 // 0x0451(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoAttachWeldSimulatedBodies : 1;                        // 0x0451(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IF74 : 1;                                      // 0x0451(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_ZAKK : 1;                                      // 0x0452(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bWarmingUp : 1;                                            // 0x0452(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideLODMethod : 1;                                    // 0x0452(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                      // 0x0452(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IQIU[0xC];                                     // 0x0453(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x045F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleSignificanceLevel                  RequiredSignificance;                                      // 0x0460(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2MI5[0x7];                                     // 0x0461(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleSysParam>                   InstanceParameters;                                        // 0x0468(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x04A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bOldPositionValid;                                         // 0x04B8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EVM4[0x3];                                     // 0x04B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     OldPosition;                                               // 0x04BC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     PartSysVelocity;                                           // 0x04C8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTime;                                                // 0x04D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTickRate;                                            // 0x04D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XK1M[0x4];                                     // 0x04DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SecondsBeforeInactive;                                     // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y8U0[0x4];                                     // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxTimeBeforeForceUpdateTransform;                         // 0x04E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MTPI[0x1C];                                    // 0x04EC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleSystemReplay*>               ReplayClips;                                               // 0x0508(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XWGY[0x8];                                     // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomTimeDilation;                                        // 0x0520(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LXIZ[0x68];                                    // 0x0524(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                          // 0x058C(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AutoAttachSocketName;                                      // 0x0594(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachLocationRule;                                    // 0x05A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachRotationRule;                                    // 0x05A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAttachmentRule                             AutoAttachScaleRule;                                       // 0x05A2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4BGO[0x2D];                                    // 0x05A3(0x002D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnSystemFinished;                                          // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EU2D[0xCC];                                    // 0x05E0(0x00CC) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}



	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UparticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& parameterName, class UmaterialInterface* param);
	void SetBeamTargetTangent(int EmitterIndex, const struct Fvector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct Fvector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct Fvector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct Fvector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const struct Fvector& NewEndPoint);
	void SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<Engine_EAttachLocation> LocationType);
	int GetNumActiveParticles();
	class UmaterialInterface* GetNamedMaterial(const struct FName& InName);
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct Fvector* OutTangentPoint);
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength);
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct Fvector* OutTargetPoint);
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct Fvector* OutTangentPoint);
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength);
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct Fvector* OutSourcePoint);
	bool GetBeamEndPoint(int EmitterIndex, struct Fvector* OutEndPoint);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct Fvector& InLocation, const struct Fvector& InDirection, const struct Fvector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UmaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
};

// Class Engine.Hud
// 0x00F0 (FullSize[0x0320] - InheritedSize[0x0230])
class UHud : public Uactor
{
public:
	class UplayerController*                           PlayerOwner;                                               // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLostFocusPaused : 1;                                      // 0x0238(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowHUD : 1;                                              // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowDebugInfo : 1;                                        // 0x0238(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CGFP[0x3];                                     // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CurrentTargetIndex;                                        // 0x023C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                  // 0x0240(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowOverlays : 1;                                         // 0x0240(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableDebugTextShadow : 1;                                // 0x0240(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J8SC[0x7];                                     // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class Uactor*>                              PostRenderedActors;                                        // 0x0248(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QQLK[0x8];                                     // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               DebugDisplay;                                              // 0x0260(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               ToggledDebugCategories;                                    // 0x0270(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvas*                                     Canvas;                                                    // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvas*                                     DebugCanvas;                                               // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                             // 0x0290(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                      ShowDebugTargetDesiredClass;                               // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class Uactor*                                      ShowDebugTargetActor;                                      // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_XG97[0x70];                                    // 0x02B0(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Hud");
		return ptr;
	}



	void ShowHUD();
	void ShowDebugToggleSubCategory(const struct FName& category);
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void ShowDebug(const struct FName& DebugType);
	void RemoveDebugText(class Uactor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const struct FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void ReceiveHitBoxClick(const struct FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void ReceiveDrawHUD(int sizeX, int sizeY);
	struct Fvector Project(const struct Fvector& location);
	void PreviousDebugTarget();
	void NextDebugTarget();
	void GetTextSize(const struct FString& text, float* OutWidth, float* OutHeight, class UFont* Font, float scale);
	class UplayerController* GetOwningPlayerController();
	class Upawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class Uactor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
	void DrawTextureSimple(class Utexture* texture, float ScreenX, float ScreenY, float scale, bool bScalePosition);
	void DrawTexture(class Utexture* texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float scale, bool bScalePosition, float rotation, const struct FVector2D& RotPivot);
	void DrawText(const struct FString& text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UmaterialInterface* MATERIAL, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UmaterialInterface* MATERIAL, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float scale, bool bScalePosition);
	void DrawMaterial(class UmaterialInterface* MATERIAL, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float scale, bool bScalePosition, float rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void Deproject(float ScreenX, float ScreenY, struct Fvector* WorldPosition, struct Fvector* WorldDirection);
	void AddHitBox(const struct FVector2D& position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int priority);
	void AddDebugText(const struct FString& DebugText, class Uactor* SrcActor, float duration, const struct Fvector& Offset, const struct Fvector& DesiredOffset, const struct Fcolor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
};

// Class Engine.CheatManager
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UCheatManager : public UObject
{
public:
	class UDebugCameraController*                      DebugCameraControllerRef;                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DebugCameraControllerClass;                                // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9JPE[0x40];                                    // 0x0040(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}



	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void UpdateSafeArea();
	void ToggleServerStatReplicatorUpdateStatNet();
	void ToggleServerStatReplicatorClientOverwrite();
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void SpawnServerStatReplicator();
	void Slomo(float NewTimeDilation);
	void SetWorldOrigin();
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float delay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyServerStatReplicator();
	void DestroyPawns(class UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<Engine_ECollisionChannel> channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void CheatScript(const struct FString& ScriptName);
	void ChangeSize(float F);
	void BugItStringCreator(const struct Fvector& ViewLocation, const struct FRotator& viewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float x, float y, float z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
};

// Class Engine.DebugCameraController
// 0x0108 (FullSize[0x0690] - InheritedSize[0x0588])
class UDebugCameraController : public UplayerController
{
public:
	unsigned char                                      bShowSelectedInfo : 1;                                     // 0x0588(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsFrozenRendering : 1;                                    // 0x0588(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsOrbitingSelectedActor : 1;                              // 0x0588(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrbitPivotUseCenter : 1;                                  // 0x0588(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableBufferVisualization : 1;                            // 0x0588(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableBufferVisualizationFullMode : 1;                    // 0x0588(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsBufferVisualizationInputSetup : 1;                      // 0x0588(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLastDisplayEnabled : 1;                                   // 0x0588(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BUWE[0x7];                                     // 0x0589(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x0590(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Uactor*                                      SelectedActor;                                             // 0x0598(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UprimitiveComponent*                         SelectedComponent;                                         // 0x05A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FhitResult                                  SelectedHitPoint;                                          // 0x05A8(0x0090) (IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UplayerController*                           OriginalControllerRef;                                     // 0x0638(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Uplayer*                                     OriginalPlayer;                                            // 0x0640(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedScale;                                                // 0x0648(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialMaxSpeed;                                           // 0x064C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialAccel;                                              // 0x0650(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialDecel;                                              // 0x0654(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FACM[0x38];                                    // 0x0658(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DebugCameraController");
		return ptr;
	}



	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void SetPawnMovementSpeedScale(float NewSpeedScale);
	void ReceiveOnDeactivate(class UplayerController* RestoredPC);
	void ReceiveOnActorSelected(class Uactor* NewSelectedActor, const struct Fvector& SelectHitLocation, const struct Fvector& SelectHitNormal, const struct FhitResult& hit);
	void ReceiveOnActivate(class UplayerController* OriginalPC);
	class Uactor* GetSelectedActor();
};

// Class Engine.engine
// 0x0EF8 (FullSize[0x0F28] - InheritedSize[0x0030])
class Uengine : public UObject
{
public:
	unsigned char                                      UnknownData_EGKX[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UFont*                                       TinyFont;                                                  // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             TinyFontName;                                              // 0x0040(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       SmallFont;                                                 // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             SmallFontName;                                             // 0x0068(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       MediumFont;                                                // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             MediumFontName;                                            // 0x0090(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       LargeFont;                                                 // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             LargeFontName;                                             // 0x00B8(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       SubtitleFont;                                              // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             SubtitleFontName;                                          // 0x00E0(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFont*>                               AdditionalFonts;                                           // 0x0100(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_UP0Z[0x8];                                     // 0x0110(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             AdditionalFontNames;                                       // 0x0118(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ConsoleClass;                                              // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              ConsoleClassName;                                          // 0x0130(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameViewportClientClass;                                   // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GameViewportClientClassName;                               // 0x0158(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      LocalPlayerClass;                                          // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              LocalPlayerClassName;                                      // 0x0180(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      WorldSettingsClass;                                        // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              WorldSettingsClassName;                                    // 0x01A8(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              NavigationSystemClassName;                                 // 0x01C8(0x0020) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      NavigationSystemClass;                                     // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              NavigationSystemConfigClassName;                           // 0x01F0(0x0020) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      NavigationSystemConfigClass;                               // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              AvoidanceManagerClassName;                                 // 0x0218(0x0020) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AvoidanceManagerClass;                                     // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              PhysicsCollisionHandlerClassName;                          // 0x0248(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GameUserSettingsClassName;                                 // 0x0268(0x0020) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameUserSettingsClass;                                     // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              AIControllerClassName;                                     // 0x0290(0x0020) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameUserSettings*                           GameUserSettings;                                          // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      LevelScriptActorClass;                                     // 0x02B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              LevelScriptActorClassName;                                 // 0x02C0(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              DefaultBlueprintBaseClassName;                             // 0x02E0(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GameSingletonClassName;                                    // 0x0300(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     GameSingleton;                                             // 0x0320(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              AssetManagerClassName;                                     // 0x0328(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetManager*                               AssetManager;                                              // 0x0348(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture;                                            // 0x0350(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultTextureName;                                        // 0x0358(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Utexture*                                    DefaultDiffuseTexture;                                     // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultDiffuseTextureName;                                 // 0x0380(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                   // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBSPVertexTextureName;                               // 0x03A8(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                 // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             HighFrequencyNoiseTextureName;                             // 0x03D0(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultBokehTexture;                                       // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBokehTextureName;                                   // 0x03F8(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultBloomKernelTexture;                                 // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBloomKernelTextureName;                             // 0x0420(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   WireframeMaterial;                                         // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     WireframeMaterialName;                                     // 0x0448(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   DebugMeshMaterial;                                         // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DebugMeshMaterialName;                                     // 0x0460(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   EmissiveMeshMaterial;                                      // 0x0480(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             EmissiveMeshMaterialName;                                  // 0x0488(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   LevelColorationLitMaterial;                                // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LevelColorationLitMaterialName;                            // 0x04B0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   LevelColorationUnlitMaterial;                              // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LevelColorationUnlitMaterialName;                          // 0x04C8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   LightingTexelDensityMaterial;                              // 0x04D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LightingTexelDensityName;                                  // 0x04E0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   ShadedLevelColorationLitMaterial;                          // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ShadedLevelColorationLitMaterialName;                      // 0x04F8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   ShadedLevelColorationUnlitMaterial;                        // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                    // 0x0510(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   RemoveSurfaceMaterial;                                     // 0x0520(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             RemoveSurfaceMaterialName;                                 // 0x0528(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   VertexColorMaterial;                                       // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorMaterialName;                                   // 0x0550(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   VertexColorViewModeMaterial_ColorOnly;                     // 0x0560(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                 // 0x0568(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   VertexColorViewModeMaterial_AlphaAsColor;                  // 0x0578(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;              // 0x0580(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   VertexColorViewModeMaterial_RedOnly;                       // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                   // 0x0598(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   VertexColorViewModeMaterial_GreenOnly;                     // 0x05A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                 // 0x05B0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   VertexColorViewModeMaterial_BlueOnly;                      // 0x05C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                  // 0x05C8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DebugEditorMaterialName;                                   // 0x05D8(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   ConstraintLimitMaterial;                                   // 0x05F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                  // 0x0600(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                              // 0x0608(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                  // 0x0610(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                              // 0x0618(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                  // 0x0620(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                              // 0x0628(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                          // 0x0630(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   InvalidLightmapSettingsMaterial;                           // 0x0638(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             InvalidLightmapSettingsMaterialName;                       // 0x0640(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   PreviewShadowsIndicatorMaterial;                           // 0x0660(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             PreviewShadowsIndicatorMaterialName;                       // 0x0668(0x0020) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMATERIAL*                                   ArrowMaterial;                                             // 0x0688(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                       // 0x0690(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             ArrowMaterialName;                                         // 0x0698(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LightingOnlyBrightness;                                    // 0x06B8(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                    // 0x06C8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        QuadComplexityColors;                                      // 0x06D8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        LightComplexityColors;                                     // 0x06E8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                              // 0x06F8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        LODColorationColors;                                       // 0x0708(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        HLODColorationColors;                                      // 0x0718(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                        StreamingAccuracyColors;                                   // 0x0728(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPixelShaderAdditiveComplexityCount;                     // 0x0738(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                  // 0x073C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinLightMapDensity;                                        // 0x0740(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IdealLightMapDensity;                                      // 0x0744(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxLightMapDensity;                                        // 0x0748(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                       // 0x074C(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W5KI[0x3];                                     // 0x074D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RenderLightMapDensityGrayscaleScale;                       // 0x0750(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RenderLightMapDensityColorScale;                           // 0x0754(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                          // 0x0758(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LightMapDensitySelectedColor;                              // 0x0768(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                         // 0x0778(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UphysicalMaterial*                           DefaultPhysMaterial;                                       // 0x0788(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultPhysMaterialName;                                   // 0x0790(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                   // 0x07B0(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                      // 0x07C0(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                     // 0x07D0(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                     // 0x07E0(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                              // 0x07F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             PreIntegratedSkinBRDFTextureName;                          // 0x07F8(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  BlueNoiseTexture;                                          // 0x0818(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             BlueNoiseTextureName;                                      // 0x0820(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  MiniFontTexture;                                           // 0x0840(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             MiniFontTextureName;                                       // 0x0848(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Utexture*                                    WeightMapPlaceholderTexture;                               // 0x0868(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             WeightMapPlaceholderTextureName;                           // 0x0870(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  LightMapDensityTexture;                                    // 0x0890(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             LightMapDensityTextureName;                                // 0x0898(0x0020) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CW24[0x8];                                     // 0x08B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         GameViewport;                                              // 0x08C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             DeferredCommands;                                          // 0x08C8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TickCycles;                                                // 0x08D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GameCycles;                                                // 0x08DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ClientCycles;                                              // 0x08E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NearClipPlane;                                             // 0x08E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHardwareSurveyEnabled : 1;                                // 0x08E8(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSubtitlesEnabled : 1;                                     // 0x08E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSubtitlesForcedOff : 1;                                   // 0x08E8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TCSU[0x3];                                     // 0x08E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaximumLoopIterationCount;                                 // 0x08EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                           // 0x08F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;            // 0x08F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowMultiThreadedAnimationUpdate : 1;                    // 0x08F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                          // 0x08F0(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SWJJ : 1;                                      // 0x08F0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSmoothFrameRate : 1;                                      // 0x08F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFixedFrameRate : 1;                                    // 0x08F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_544I[0x3];                                     // 0x08F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FixedFrameRate;                                            // 0x08F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                                 SmoothedFrameRateRange;                                    // 0x08F8(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEngineCustomTimeStep*                       CustomTimeStep;                                            // 0x0908(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_6C38[0x20];                                    // 0x0910(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoftClassPath                              CustomTimeStepClassName;                                   // 0x0930(0x0020) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimecodeProvider*                           TimecodeProvider;                                          // 0x0950(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_99YV[0x20];                                    // 0x0958(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoftClassPath                              TimecodeProviderClassName;                                 // 0x0978(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGenerateDefaultTimecode;                                  // 0x0998(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZHE0[0x3];                                     // 0x0999(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FFrameRate                                  GenerateDefaultTimecodeFrameRate;                          // 0x099C(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GenerateDefaultTimecodeFrameDelay;                         // 0x09A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                 // 0x09A8(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C98I[0x3];                                     // 0x09A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                        // 0x09AC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                    // 0x09B0(0x0001) BIT_FIELD (Config, GlobalConfig, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5CV7[0x3];                                     // 0x09B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fcolor                                      C_WorldBox;                                                // 0x09B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_BrushWire;                                               // 0x09B8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_AddWire;                                                 // 0x09BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_SubtractWire;                                            // 0x09C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_SemiSolidWire;                                           // 0x09C4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_NonSolidWire;                                            // 0x09C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_WireBackground;                                          // 0x09CC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_ScaleBoxHi;                                              // 0x09D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_VolumeCollision;                                         // 0x09D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_BSPCollision;                                            // 0x09D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_OrthoBackground;                                         // 0x09DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_Volume;                                                  // 0x09E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      C_BrushShape;                                              // 0x09E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StreamingDistanceFactor;                                   // 0x09E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W5GA[0x4];                                     // 0x09EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FDirectoryPath                              GameScreenshotSaveDirectory;                               // 0x09F0(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	Engine_ETransitionType                             TransitionType;                                            // 0x0A00(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DBFY[0x7];                                     // 0x0A01(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TransitionDescription;                                     // 0x0A08(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     TransitionGameMode;                                        // 0x0A18(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MeshLODRange;                                              // 0x0A28(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowMatureLanguage : 1;                                  // 0x0A2C(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V5QN[0x3];                                     // 0x0A2D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraRotationThreshold;                                   // 0x0A30(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraTranslationThreshold;                                // 0x0A34(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrimitiveProbablyVisibleTime;                              // 0x0A38(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOcclusionPixelsFraction;                                // 0x0A3C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                   // 0x0A40(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XIBU[0x3];                                     // 0x0A41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxParticleResize;                                         // 0x0A44(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxParticleResizeWarn;                                     // 0x0A48(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BLID[0x4];                                     // 0x0A4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                       // 0x0A50(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetClientTicksPerSecond;                                   // 0x0A60(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DisplayGamma;                                              // 0x0A64(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinDesiredFrameRate;                                       // 0x0A68(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                DefaultSelectedMaterialColor;                              // 0x0A6C(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SelectedMaterialColor;                                     // 0x0A7C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SelectionOutlineColor;                                     // 0x0A8C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SubduedSelectionOutlineColor;                              // 0x0A9C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                                SelectedMaterialColorOverride;                             // 0x0AAC(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bIsOverridingSelectedColor;                                // 0x0ABC(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_7HEL[0x3];                                     // 0x0ABD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                          // 0x0AC0(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                   // 0x0AC0(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressMapWarnings : 1;                                  // 0x0AC0(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableAILogging : 1;                                     // 0x0AC0(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_72ST[0x3];                                     // 0x0AC1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           bEnableVisualLogRecordingOnStart;                          // 0x0AC4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XAN2[0x4];                                     // 0x0AC8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ScreenSaverInhibitorSemaphore;                             // 0x0ACC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bLockReadOnlyLevels : 1;                                   // 0x0AD0(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J7VA[0x7];                                     // 0x0AD1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ParticleEventManagerClassPath;                             // 0x0AD8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SelectionHighlightIntensity;                               // 0x0AE8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BSPSelectionHighlightIntensity;                            // 0x0AEC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SelectionHighlightIntensityBillboards;                     // 0x0AF0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5358[0x24C];                                   // 0x0AF4(0x024C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                      // 0x0D40(0x0010) (ZeroConstructor, Transient, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             ServerActors;                                              // 0x0D50(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             RuntimeServerActors;                                       // 0x0D60(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetErrorLogInterval;                                       // 0x0D70(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStartedLoadMapMovie : 1;                                  // 0x0D74(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3A94[0x1B];                                    // 0x0D75(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NextWorldContextHandle;                                    // 0x0D90(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_00D3[0x194];                                   // 0x0D94(0x0194) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.engine");
		return ptr;
	}



};

// Class Engine.GameEngine
// 0x0050 (FullSize[0x0F78] - InheritedSize[0x0F28])
class UGameEngine : public Uengine
{
public:
	float                                              MaxDeltaTime;                                              // 0x0F28(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerFlushLogInterval;                                    // 0x0F2C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UgameInstance*                               gameInstance;                                              // 0x0F30(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8OHU[0x40];                                    // 0x0F38(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}



};

// Class Engine.GameSession
// 0x0020 (FullSize[0x0250] - InheritedSize[0x0230])
class UGameSession : public UInfo
{
public:
	int                                                MaxSpectators;                                             // 0x0230(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxPlayers;                                                // 0x0234(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxPartySize;                                              // 0x0238(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MaxSplitscreensPerConnection;                              // 0x023C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRequiresPushToTalk;                                       // 0x023D(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9P04[0x2];                                     // 0x023E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SessionName;                                               // 0x0240(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CKTV[0x4];                                     // 0x024C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameSession");
		return ptr;
	}



};

// Class Engine.GameUserSettings
// 0x00F8 (FullSize[0x0128] - InheritedSize[0x0030])
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                 // 0x0030(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDynamicResolution;                                     // 0x0031(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AUSY[0x56];                                    // 0x0032(0x0056) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ResolutionSizeX;                                           // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           ResolutionSizeY;                                           // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                          // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                          // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                WindowPosX;                                                // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                WindowPosY;                                                // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                FullscreenMode;                                            // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastConfirmedFullscreenMode;                               // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                PreferredFullscreenMode;                                   // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           version;                                                   // 0x00AC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                AudioQualityLevel;                                         // 0x00B0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastConfirmedAudioQualityLevel;                            // 0x00B4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FrameRateLimit;                                            // 0x00B8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_EZWA[0x4];                                     // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DesiredScreenWidth;                                        // 0x00C0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseDesiredScreenHeight;                                   // 0x00C4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YHQK[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DesiredScreenHeight;                                       // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastUserConfirmedDesiredScreenWidth;                       // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastUserConfirmedDesiredScreenHeight;                      // 0x00D0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastRecommendedScreenWidth;                                // 0x00D4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastRecommendedScreenHeight;                               // 0x00D8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastCPUBenchmarkResult;                                    // 0x00DC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastGPUBenchmarkResult;                                    // 0x00E0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_J7HK[0x4];                                     // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      LastCPUBenchmarkSteps;                                     // 0x00E8(0x0010) (ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                      LastGPUBenchmarkSteps;                                     // 0x00F8(0x0010) (ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastGPUBenchmarkMultiplier;                                // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseHDRDisplayOutput;                                      // 0x010C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_VHZY[0x3];                                     // 0x010D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                HDRDisplayOutputNits;                                      // 0x0110(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_VJ3E[0x4];                                     // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnGameUserSettingsUINeedsUpdate;                           // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameUserSettings");
		return ptr;
	}



	void ValidateSettings();
	bool SupportsHDRDisplayOutput();
	void SetVSyncEnabled(bool bEnable);
	void SetVisualEffectQuality(int Value);
	void SetViewDistanceQuality(int Value);
	void SetToDefaults();
	void SetTextureQuality(int Value);
	void SetShadowQuality(int Value);
	void SetShadingQuality(int Value);
	void SetScreenResolution(const struct FIntPoint& resolution);
	void SetResolutionScaleValueEx(float NewScaleValue);
	void SetResolutionScaleValue(int NewScaleValue);
	void SetResolutionScaleNormalized(float NewScaleNormalized);
	void SetPostProcessingQuality(int Value);
	void SetOverallScalabilityLevel(int Value);
	void SetFullscreenMode(TEnumAsByte<Engine_EWindowMode> InFullscreenMode);
	void SetFrameRateLimit(float NewLimit);
	void SetFoliageQuality(int Value);
	void SetDynamicResolutionEnabled(bool bEnable);
	void SetBenchmarkFallbackValues();
	void SetAudioQualityLevel(int QualityLevel);
	void SetAntiAliasingQuality(int Value);
	void SaveSettings();
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);
	void RevertVideoMode();
	void ResetToCurrentSettings();
	void LoadSettings(bool bForceReload);
	bool IsVSyncEnabled();
	bool IsVSyncDirty();
	bool IsScreenResolutionDirty();
	bool IsHDREnabled();
	bool IsFullscreenModeDirty();
	bool IsDynamicResolutionEnabled();
	bool IsDynamicResolutionDirty();
	bool IsDirty();
	int GetVisualEffectQuality();
	int GetViewDistanceQuality();
	int GetTextureQuality();
	int STATIC_GetSyncInterval();
	int GetShadowQuality();
	int GetShadingQuality();
	struct FIntPoint GetScreenResolution();
	float GetResolutionScaleNormalized();
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
	void GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue);
	float GetRecommendedResolutionScale();
	TEnumAsByte<Engine_EWindowMode> GetPreferredFullscreenMode();
	int GetPostProcessingQuality();
	int GetOverallScalabilityLevel();
	struct FIntPoint GetLastConfirmedScreenResolution();
	TEnumAsByte<Engine_EWindowMode> GetLastConfirmedFullscreenMode();
	class UGameUserSettings* STATIC_GetGameUserSettings();
	TEnumAsByte<Engine_EWindowMode> GetFullscreenMode();
	float GetFrameRateLimit();
	int STATIC_GetFramePace();
	int GetFoliageQuality();
	struct FIntPoint GetDesktopResolution();
	struct FIntPoint STATIC_GetDefaultWindowPosition();
	TEnumAsByte<Engine_EWindowMode> STATIC_GetDefaultWindowMode();
	float GetDefaultResolutionScale();
	struct FIntPoint STATIC_GetDefaultResolution();
	int GetCurrentHDRDisplayNits();
	int GetAudioQualityLevel();
	int GetAntiAliasingQuality();
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);
	void ConfirmVideoMode();
	void ApplySettings(bool bCheckForCommandLineOverrides);
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void ApplyNonResolutionSettings();
	void ApplyHardwareBenchmarkResults();
};

// Class Engine.ScriptViewportClient
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData_H17G[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ScriptViewportClient");
		return ptr;
	}



};

// Class Engine.GameViewportClient
// 0x0300 (FullSize[0x0340] - InheritedSize[0x0040])
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData_JB1U[0x8];                                     // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UConsole*                                    ViewportConsole;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                           // 0x0050(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OH9P[0x10];                                    // 0x0060(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxSplitscreenPlayers;                                     // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LBWN[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Uworld*                                      world;                                                     // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UgameInstance*                               gameInstance;                                              // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_G709[0x2B0];                                   // 0x0090(0x02B0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}



	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int playerIndex);
};

// Class Engine.LocalPlayer
// 0x0218 (FullSize[0x0268] - InheritedSize[0x0050])
class ULocalPlayer : public Uplayer
{
public:
	unsigned char                                      UnknownData_2KIC[0x28];                                    // 0x0050(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         ViewportClient;                                            // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HPI5[0x1C];                                    // 0x0080(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAspectRatioAxisConstraint>     AspectRatioAxisConstraint;                                 // 0x009C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V5A1[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PendingLevelPlayerControllerClass;                         // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSentSplitJoin : 1;                                        // 0x00A8(0x0001) BIT_FIELD (Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0NQN[0x17];                                    // 0x00A9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ControllerID;                                              // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_2Q0X[0x1A4];                                   // 0x00C4(0x01A4) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}



};

// Class Engine.PlayerCameraManager
// 0x251C (FullSize[0x274C] - InheritedSize[0x0230])
class UPlayerCameraManager : public Uactor
{
public:
	class UplayerController*                           PCOwner;                                                   // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                             TransformComponent;                                        // 0x0238(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_AT48[0xC];                                     // 0x0240(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultFOV;                                                // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R64U[0x4];                                     // 0x0250(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultOrthoWidth;                                         // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7N3Z[0x4];                                     // 0x0258(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultAspectRatio;                                        // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DB8M[0x40];                                    // 0x0260(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCameraCacheEntry                           CameraCache;                                               // 0x02A0(0x05E0) (Transient, NativeAccessSpecifierPublic)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                      // 0x0880(0x05E0) (Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                                ViewTarget;                                                // 0x0E60(0x05F0) (Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                                PendingViewTarget;                                         // 0x1450(0x05F0) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_11QQ[0x30];                                    // 0x1A40(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCameraCacheEntry                           CameraCachePrivate;                                        // 0x1A70(0x05E0) (Transient, NativeAccessSpecifierPrivate)
	struct FCameraCacheEntry                           LastFrameCameraCachePrivate;                               // 0x2050(0x05E0) (Transient, NativeAccessSpecifierPrivate)
	TArray<class UCameraModifier*>                     ModifierList;                                              // 0x2630(0x0010) (ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UClass*>                              DefaultModifiers;                                          // 0x2640(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FreeCamDistance;                                           // 0x2650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     FreeCamOffset;                                             // 0x2654(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     ViewTargetOffset;                                          // 0x2660(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LQSL[0x14];                                    // 0x266C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UEmitterCameraLensEffectBase*>        CameraLensEffects;                                         // 0x2680(0x0010) (ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                      // 0x2690(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                         // 0x2698(0x0040) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                                     // 0x26D8(0x0010) (ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_ZUND[0x10];                                    // 0x26E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                               // 0x26F8(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                 // 0x2708(0x0010) (ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraActor*                                AnimCameraActor;                                           // 0x2718(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bIsOrthographic : 1;                                       // 0x2720(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultConstrainAspectRatio : 1;                          // 0x2720(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VZF4 : 4;                                      // 0x2720(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bClientSimulatingViewTarget : 1;                           // 0x2720(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                           // 0x2720(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A27B : 2;                                      // 0x2721(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bGameCameraCutThisFrame : 1;                               // 0x2721(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OWJK[0x2];                                     // 0x2722(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ViewPitchMin;                                              // 0x2724(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewPitchMax;                                              // 0x2728(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewYawMin;                                                // 0x272C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewYawMax;                                                // 0x2730(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewRollMin;                                               // 0x2734(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ViewRollMax;                                               // 0x2738(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I78B[0x4];                                     // 0x273C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ServerUpdateCameraTimeout;                                 // 0x2740(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_4HXA[0x8];                                     // 0x2744(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlayerCameraManager");
		return ptr;
	}



	void StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately);
	void StopCameraFade();
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShakeFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraAnims(bool bImmediate);
	void StartCameraFade(float FromAlpha, float ToAlpha, float duration, const struct FLinearColor& color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& color, bool bInFadeAudio);
	void SetGameCameraCutThisFrame();
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(class UEmitterCameraLensEffectBase* Emitter);
	class UCameraShake* PlayCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent);
	class UCameraShake* PlayCameraShake(class UClass* ShakeClass, float scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float rate, float scale, float BlendInTime, float blendOutTime, bool bLoop, bool bRandomStartTime, float duration, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void PhotographyCameraModify(const struct Fvector& NewCameraLocation, const struct Fvector& PreviousCameraLocation, const struct Fvector& OriginalCameraLocation, struct Fvector* ResultCameraLocation);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographyMultiPartCaptureEnd();
	class UplayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct Fvector GetCameraLocation();
	class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class Uactor* CameraTarget, struct Fvector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);
	class UEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
};

// Class Engine.NavigationObjectBase
// 0x0028 (FullSize[0x0258] - InheritedSize[0x0230])
class UNavigationObjectBase : public Uactor
{
public:
	unsigned char                                      UnknownData_E68F[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0238(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         GoodSprite;                                                // 0x0240(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         BadSprite;                                                 // 0x0248(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsPIEPlayerStart : 1;                                     // 0x0250(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SGHN[0x7];                                     // 0x0251(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavigationObjectBase");
		return ptr;
	}



};

// Class Engine.PlayerStart
// 0x0010 (FullSize[0x0268] - InheritedSize[0x0258])
class UPlayerStart : public UNavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                            // 0x0258(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SR8K[0x4];                                     // 0x0264(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}



};

// Class Engine.playerState
// 0x0108 (FullSize[0x0338] - InheritedSize[0x0230])
class UplayerState : public UInfo
{
public:
	float                                              Score;                                                     // 0x0230(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                playerId;                                                  // 0x0234(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Ping;                                                      // 0x0238(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HT8I[0x1];                                     // 0x0239(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bShouldUpdateReplicatedPing : 1;                           // 0x023A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bIsSpectator : 1;                                          // 0x023A(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlySpectator : 1;                                        // 0x023A(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsABot : 1;                                               // 0x023A(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HNA5 : 1;                                      // 0x023A(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsInactive : 1;                                           // 0x023A(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFromPreviousLevel : 1;                                    // 0x023A(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NM0S[0x1];                                     // 0x023B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                startTime;                                                 // 0x023C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EngineMessageClass;                                        // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_814N[0x8];                                     // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SavedNetworkAddress;                                       // 0x0250(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                            UniqueID;                                                  // 0x0260(0x0028) (Net, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0AK3[0x10];                                    // 0x0288(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Upawn*                                       PawnPrivate;                                               // 0x0298(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_AMDZ[0x78];                                    // 0x02A0(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlayerNamePrivate;                                         // 0x0318(0x0010) (Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_UHBT[0x10];                                    // 0x0328(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.playerState");
		return ptr;
	}



	void ReceiveOverrideWith(class UplayerState* OldPlayerState);
	void ReceiveCopyProperties(class UplayerState* NewPlayerState);
	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_PlayerId();
	void OnRep_bIsInactive();
	struct FString GetPlayerName();
};

// Class Engine.DefaultPawn
// 0x0028 (FullSize[0x02B8] - InheritedSize[0x0290])
class UDefaultPawn : public Upawn
{
public:
	float                                              BaseTurnRate;                                              // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BaseLookUpRate;                                            // 0x0294(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPawnMovementComponent*                      MovementComponent;                                         // 0x0298(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                            CollisionComponent;                                        // 0x02A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                        MeshComponent;                                             // 0x02A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bAddDefaultMovementBindings : 1;                           // 0x02B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PZP1[0x7];                                     // 0x02B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DefaultPawn");
		return ptr;
	}



	void TurnAtRate(float rate);
	void MoveUp_World(float val);
	void MoveRight(float val);
	void MoveForward(float val);
	void LookUpAtRate(float rate);
};

// Class Engine.SpectatorPawn
// 0x0000 (FullSize[0x02B8] - InheritedSize[0x02B8])
class USpectatorPawn : public UDefaultPawn
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SpectatorPawn");
		return ptr;
	}



};

// Class Engine.SpringArmComponent
// 0x0090 (FullSize[0x02A0] - InheritedSize[0x0210])
class USpringArmComponent : public USceneComponent
{
public:
	float                                              TargetArmLength;                                           // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     SocketOffset;                                              // 0x0214(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     TargetOffset;                                              // 0x0220(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProbeSize;                                                 // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              ProbeChannel;                                              // 0x0230(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XUTH[0x3];                                     // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDoCollisionTest : 1;                                      // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritPitch : 1;                                         // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritYaw : 1;                                           // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritRoll : 1;                                          // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableCameraLag : 1;                                      // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableCameraRotationLag : 1;                              // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseCameraLagSubstepping : 1;                              // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                  // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YUX5[0x2];                                     // 0x0236(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraLagSpeed;                                            // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraRotationLagSpeed;                                    // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraLagMaxTimeStep;                                      // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraLagMaxDistance;                                      // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QIYA[0x58];                                    // 0x0248(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SpringArmComponent");
		return ptr;
	}



	bool IsCollisionFixApplied();
	struct Fvector GetUnfixedCameraPosition();
	struct FRotator GetTargetRotation();
};

// Class Engine.StaticMeshComponent
// 0x0070 (FullSize[0x04E8] - InheritedSize[0x0478])
class UStaticMeshComponent : public UMeshComponent
{
public:
	unsigned char                                      UnknownData_NC9B[0x4];                                     // 0x0478(0x0004) Fix Super Size
	int                                                PreviousLODLevel;                                          // 0x047C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinLod;                                                    // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubDivisionStepSize;                                       // 0x0484(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U7K4[0x8];                                     // 0x0488(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 StaticMesh;                                                // 0x0490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct Fcolor                                      WireframeColorOverride;                                    // 0x0498(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEvaluateWorldPositionOffset : 1;                          // 0x049C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideWireframeColor : 1;                               // 0x049C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideMinLOD : 1;                                       // 0x049C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideNavigationExport : 1;                             // 0x049C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceNavigationObstacle : 1;                              // 0x049C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisallowMeshPaintPerInstance : 1;                         // 0x049C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                    // 0x049C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideLightMapRes : 1;                                  // 0x049C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastDistanceFieldIndirectShadow : 1;                      // 0x049D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideDistanceFieldSelfShadowBias : 1;                  // 0x049D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseSubDivisions : 1;                                      // 0x049D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseDefaultCollision : 1;                                  // 0x049D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReverseCulling : 1;                                       // 0x049D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2K69[0x2];                                     // 0x049E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                OverriddenLightMapRes;                                     // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldIndirectShadowMinVisibility;                  // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldSelfShadowBias;                               // 0x04A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StreamingDistanceMultiplier;                               // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticMeshComponentLODInfo>         LodData;                                                   // 0x04B0(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStreamingTextureBuildInfo>          StreamingTextureData;                                      // 0x04C0(0x0010) (ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x04D0(0x0018) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}



	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetReverseCulling(bool ReverseCulling);
	void SetForcedLodModel(int NewForcedLodModel);
	void SetDistanceFieldSelfShadowBias(float newValue);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct Fvector* min, struct Fvector* max);
};

// Class Engine.InstancedStaticMeshComponent
// 0x00B8 (FullSize[0x05A0] - InheritedSize[0x04E8])
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                         // 0x04E8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic, CPF_SkipSerialization)
	int                                                NumCustomDataFloats;                                       // 0x04F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_74HB[0x4];                                     // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      PerInstanceSMCustomData;                                   // 0x0500(0x0010) (Edit, EditFixedSize, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic, CPF_SkipSerialization)
	int                                                InstancingRandomSeed;                                      // 0x0510(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InstanceStartCullDistance;                                 // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InstanceEndCullDistance;                                   // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ULAF[0x4];                                     // 0x051C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        InstanceReorderTable;                                      // 0x0520(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KN7X[0x48];                                    // 0x0530(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumPendingLightmaps;                                       // 0x0578(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_9SS4[0x4];                                     // 0x057C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                            // 0x0580(0x0010) (ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_ETFH[0x10];                                    // 0x0590(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		return ptr;
	}



	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex);
	bool GetInstanceTransform(int InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace);
	TArray<int> GetInstancesOverlappingSphere(const struct Fvector& center, float radius, bool bSphereInWorldSpace);
	TArray<int> GetInstancesOverlappingBox(const struct Fbox& box, bool bBoxInWorldSpace);
	int GetInstanceCount();
	void ClearInstances();
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, TArray<struct FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	int AddInstance(const struct FTransform& InstanceTransform);
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x00E8 (FullSize[0x0688] - InheritedSize[0x05A0])
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_LM9G[0x8];                                     // 0x05A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        SortedInstances;                                           // 0x05A8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumBuiltInstances;                                         // 0x05B8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5MRZ[0x4];                                     // 0x05BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fbox                                        BuiltInstanceBounds;                                       // 0x05C0(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct Fbox                                        UnbuiltInstanceBounds;                                     // 0x05DC(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct Fbox>                                UnbuiltInstanceBoundsList;                                 // 0x05F8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableDensityScaling : 1;                                 // 0x0608(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1P9D[0x7];                                     // 0x0609(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                OcclusionLayerNumNodes;                                    // 0x0610(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                            CacheMeshExtendedBounds;                                   // 0x0614(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bDisableCollision;                                         // 0x0630(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UDD6[0x3];                                     // 0x0631(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                InstanceCountToRender;                                     // 0x0634(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZDD3[0x50];                                    // 0x0638(0x0050) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HierarchicalInstancedStaticMeshComponent");
		return ptr;
	}



	bool RemoveInstances(TArray<int> InstancesToRemove);
};

// Class Engine.HISMMaterialHelperComponent
// 0x0028 (FullSize[0x06B0] - InheritedSize[0x0688])
class UHISMMaterialHelperComponent : public UHierarchicalInstancedStaticMeshComponent
{
public:
	TArray<struct FMaterialConfig>                     MaterialConfigurations;                                    // 0x0688(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIndexList>                          IndexOverrides;                                            // 0x0698(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U67R[0x8];                                     // 0x06A8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HISMMaterialHelperComponent");
		return ptr;
	}



};

// Class Engine.SkeletalMeshActor
// 0x0088 (FullSize[0x02B8] - InheritedSize[0x0230])
class USkeletalMeshActor : public Uactor
{
public:
	unsigned char                                      UnknownData_H84K[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bShouldDoAnimNotifies : 1;                                 // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWakeOnLevelStart : 1;                                     // 0x0238(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XU91[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UskeletalMeshComponent*                      skeletalMeshComponent;                                     // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMesh*                               ReplicatedMesh;                                            // 0x0248(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                       // 0x0250(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UmaterialInterface*                          ReplicatedMaterial0;                                       // 0x0258(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UmaterialInterface*                          ReplicatedMaterial1;                                       // 0x0260(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YZ5C[0x50];                                    // 0x0268(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}



	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};

// Class Engine.WorldSubsystem
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UWorldSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.WorldSubsystem");
		return ptr;
	}



};

// Class Engine.SphereComponent
// 0x0010 (FullSize[0x0450] - InheritedSize[0x0440])
class USphereComponent : public UShapeComponent
{
public:
	float                                              SphereRadius;                                              // 0x0440(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_CDE8[0xC];                                     // 0x0444(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SphereComponent");
		return ptr;
	}



	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};

// Class Engine.CapsuleComponent
// 0x0010 (FullSize[0x0450] - InheritedSize[0x0440])
class UCapsuleComponent : public UShapeComponent
{
public:
	float                                              CapsuleHalfHeight;                                         // 0x0440(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CapsuleRadius;                                             // 0x0444(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_8BM2[0x8];                                     // 0x0448(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CapsuleComponent");
		return ptr;
	}



	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float GetScaledCapsuleHalfHeight();
};

// Class Engine.LightComponentBase
// 0x004C (FullSize[0x025C] - InheritedSize[0x0210])
class ULightComponentBase : public USceneComponent
{
public:
	struct Fguid                                       LightGuid;                                                 // 0x0210(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              brightness;                                                // 0x0220(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              intensity;                                                 // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      LightColor;                                                // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectsWorld : 1;                                         // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastShadows : 1;                                           // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastStaticShadows : 1;                                     // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastDynamicShadows : 1;                                    // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2COZ[0x3];                                     // 0x022D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDetailMode>                    DetailLevelBeforeCastShadows;                              // 0x0230(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_U8OW[0x3];                                     // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_ELightingDetailMode                         DetailLevelBeforeCastDynamicShadows;                       // 0x0234(0x0001) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_X06P[0x3];                                     // 0x0231(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	int                                                CascadeShadowMapQualityReductionBHVR;                      // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreDynamicObjectsInShadows : 1;                        // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_OR96[0x3];                                     // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_ELightingDetailMode                         DetailLevelThresholdBeforeIgnoringDynamicObjectsInShadows; // 0x0240(0x0001) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_RGCG[0x3];                                     // 0x023D(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      bAffectTranslucentLighting : 1;                            // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTransmission : 1;                                         // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastVolumetricShadow : 1;                                 // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastDeepShadow : 1;                                       // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastRaytracedShadow : 1;                                  // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectReflection : 1;                                     // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectGlobalIllumination : 1;                             // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E1FS[0x3];                                     // 0x0245(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IndirectLightingIntensity;                                 // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricScatteringIntensity;                             // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AmbientOcclusionContribution;                              // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SamplesPerPixel;                                           // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BHI5[0x4];                                     // 0x0258(0x0004) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightComponentBase");
		return ptr;
	}



	void SetSamplesPerPixel(int newValue);
	void SetCastVolumetricShadow(bool bNewValue);
	void SetCastShadows(bool bNewValue);
	void SetCastRaytracedShadow(bool bNewValue);
	void SetCastDeepShadow(bool bNewValue);
	void SetAffectReflection(bool bNewValue);
	void SetAffectGlobalIllumination(bool bNewValue);
	struct FLinearColor GetLightColor();
};

// Class Engine.LightComponent
// 0x0130 (FullSize[0x038C] - InheritedSize[0x025C])
class ULightComponent : public ULightComponentBase
{
public:
	float                                              MaxDrawDistance;                                           // 0x025C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistanceFadeRange;                                      // 0x0260(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseTemperature : 1;                                       // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GMD8[0x3];                                     // 0x0265(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ShadowMapChannel;                                          // 0x0268(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2PXU[0x4];                                     // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinRoughness;                                              // 0x0270(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpecularScale;                                             // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowResolutionScale;                                     // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowBias;                                                // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowSlopeBias;                                           // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowSharpen;                                             // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ContactShadowLength;                                       // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ContactShadowLengthInWS : 1;                               // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      InverseSquaredFalloff : 1;                                 // 0x028C(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastTranslucentShadows : 1;                                // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                  // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceCachedShadowsForMovablePrimitives : 1;               // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EHR2[0x3];                                     // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FlightingChannels                           lightingChannels;                                          // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8GMU[0x7];                                     // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UmaterialInterface*                          LightFunctionMaterial;                                     // 0x0298(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     LightFunctionScale;                                        // 0x02A0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YURS[0x4];                                     // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureLightProfile*                        IESTexture;                                                // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseIESBrightness : 1;                                     // 0x02B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D9S6[0x3];                                     // 0x02B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IESBrightnessScale;                                        // 0x02BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightFunctionFadeDistance;                                 // 0x02C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DisabledBrightness;                                        // 0x02C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableLightShaftBloom : 1;                                // 0x02C8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UN6J[0x3];                                     // 0x02C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BloomScale;                                                // 0x02CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BloomThreshold;                                            // 0x02D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BloomMaxBrightness;                                        // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      BloomTint;                                                 // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseRayTracedDistanceFieldShadows;                         // 0x02DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_25NM[0x3];                                     // 0x02DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RayStartOffsetDepthScale;                                  // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NR9V[0xA8];                                    // 0x02E4(0x00A8) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}



	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetUseIESBrightness(bool bNewValue);
	void SetTransmission(bool bNewValue);
	void SetTemperature(float NewTemperature);
	void SetSpecularScale(float newValue);
	void SetShadowSlopeBias(float newValue);
	void SetShadowBias(float newValue);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetLightFunctionScale(const struct Fvector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UmaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float newValue);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* newValue);
	void SetIESBrightnessScale(float newValue);
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const struct Fcolor& newValue);
	void SetBloomThreshold(float newValue);
	void SetBloomScale(float newValue);
	void SetBloomMaxBrightness(float newValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
};

// Class Engine.LocalLightComponent
// 0x0014 (FullSize[0x03A0] - InheritedSize[0x038C])
class ULocalLightComponent : public ULightComponent
{
public:
	float                                              radius;                                                    // 0x038C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AttenuationRadius;                                         // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPointLightSettings                LightmassSettings;                                         // 0x0394(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LocalLightComponent");
		return ptr;
	}



	void SetIntensityUnits(Engine_ELightUnits NewIntensityUnits);
	void SetAttenuationRadius(float NewRadius);
	float STATIC_GetUnitsConversionFactor(Engine_ELightUnits SrcUnits, Engine_ELightUnits TargetUnits, float CosHalfConeAngle);
};

// Class Engine.PointLightComponent
// 0x001C (FullSize[0x03BC] - InheritedSize[0x03A0])
class UPointLightComponent : public ULocalLightComponent
{
public:
	unsigned char                                      bUseInverseSquaredFalloff : 1;                             // 0x03A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AAHU[0x3];                                     // 0x03A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LightFalloffExponent;                                      // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceRadius;                                              // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SoftSourceRadius;                                          // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceLength;                                              // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FLPN[0x8];                                     // 0x03B4(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}



	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float newValue);
	void SetSoftSourceRadius(float bNewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};

// Class Engine.SpotLightComponent
// 0x000C (FullSize[0x03C8] - InheritedSize[0x03BC])
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              OuterConeAngle;                                            // 0x03BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightShaftConeAngle;                                       // 0x03C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_016U[0x4];                                     // 0x03C4(0x0004) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// Class Engine.LocalPlayerSubsystem
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class ULocalPlayerSubsystem : public USubsystem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LocalPlayerSubsystem");
		return ptr;
	}



};

// Class Engine.ProjectileMovementComponent
// 0x00E8 (FullSize[0x01E0] - InheritedSize[0x00F8])
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                              // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSpeed;                                                  // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRotationFollowsVelocity : 1;                              // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRotationRemainsVertical : 1;                              // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBounce : 1;                                         // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                          // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceSubStepping : 1;                                     // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSimulationEnabled : 1;                                    // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSweepCollision : 1;                                       // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsHomingProjectile : 1;                                   // 0x0100(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                           // 0x0101(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSliding : 1;                                            // 0x0101(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInterpMovement : 1;                                       // 0x0101(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInterpRotation : 1;                                       // 0x0101(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KCN4[0x2];                                     // 0x0102(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PreviousHitTime;                                           // 0x0104(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     PreviousHitNormal;                                         // 0x0108(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProjectileGravityScale;                                    // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Buoyancy;                                                  // 0x0118(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Bounciness;                                                // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Friction;                                                  // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BounceVelocityStopSimulatingThreshold;                     // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinFrictionFraction;                                       // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BJEM[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                        // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                          // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              HomingAccelerationMagnitude;                               // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                     // 0x0154(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSimulationTimeStep;                                     // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSimulationIterations;                                   // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BounceAdditionalIterations;                                // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpLocationTime;                                        // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpRotationTime;                                        // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpLocationMaxLagDistance;                              // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InterpLocationSnapToTargetDistance;                        // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J5WF[0x68];                                    // 0x0178(0x0068) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ProjectileMovementComponent");
		return ptr;
	}



	void StopSimulating(const struct FhitResult& hitResult);
	void SetVelocityInLocalSpace(const struct Fvector& NewVelocity);
	void SetInterpolatedComponent(class USceneComponent* component);
	void ResetInterpolation();
	void OnProjectileStopDelegate__DelegateSignature(const struct FhitResult& impactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FhitResult& impactResult, const struct Fvector& impactVelocity);
	void MoveInterpolationTarget(const struct Fvector& NewLocation, const struct FRotator& NewRotation);
	struct Fvector LimitVelocity(const struct Fvector& NewVelocity);
	bool IsVelocityUnderSimulationThreshold();
	bool IsInterpolationComplete();
};

// Class Engine.SkyLight
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class USkyLight : public UInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                            // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x0238(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OJ4I[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}



	void OnRep_bEnabled();
};

// Class Engine.texture
// 0x0078 (FullSize[0x00C0] - InheritedSize[0x0048])
class Utexture : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData_VDI0[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       LightingGuid;                                              // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                LODBias;                                                   // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureCompressionSettings>    CompressionSettings;                                       // 0x0064(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureFilter>                 filter;                                                    // 0x0065(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ETextureMipLoadOptions                      MipLoadOptions;                                            // 0x0066(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureGroup>                  LODGroup;                                                  // 0x0067(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      SRGB : 1;                                                  // 0x0068(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoTiling : 1;                                             // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      VirtualTextureStreaming : 1;                               // 0x0068(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CompressionYCoCg : 1;                                      // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                   // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_42AV[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_4LDO[0x40];                                    // 0x0080(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.texture");
		return ptr;
	}



};

// Class Engine.TextureCube
// 0x0058 (FullSize[0x0118] - InheritedSize[0x00C0])
class UTextureCube : public Utexture
{
public:
	unsigned char                                      UnknownData_U0KZ[0x58];                                    // 0x00C0(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}



};

// Class Engine.StaticMeshActor
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class UStaticMeshActor : public Uactor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bStaticMeshReplicateMovement;                              // 0x0238(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ENavDataGatheringMode                       NavigationGeometryGatheringMode;                           // 0x0239(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1W67[0x6];                                     // 0x023A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}



	void SetMobility(TEnumAsByte<Engine_EComponentMobility> InMobility);
};

// Class Engine.materialInterface
// 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
class UmaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData_BG7D[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USubsurfaceProfile*                          SubsurfaceProfile;                                         // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HA9U[0x10];                                    // 0x0048(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                         // 0x0058(0x0010) (Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMaterialTextureInfo>                TextureStreamingData;                                      // 0x0068(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0078(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_WJW6[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.materialInterface");
		return ptr;
	}



	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);
	class UPhysicalMaterialMask* GetPhysicalMaterialMask();
	class UphysicalMaterial* GetPhysicalMaterialFromMap(int index);
	class UphysicalMaterial* GetPhysicalMaterial();
	struct FMaterialParameterInfo GetParameterInfo(TEnumAsByte<Engine_EMaterialParameterAssociation> Association, const struct FName& parameterName, class UMaterialFunctionInterface* LayerFunction);
	class UMATERIAL* GetBaseMaterial();
};

// Class Engine.MaterialInstance
// 0x0380 (FullSize[0x0410] - InheritedSize[0x0090])
class UMaterialInstance : public UmaterialInterface
{
public:
	class UphysicalMaterial*                           PhysMaterial;                                              // 0x0090(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UphysicalMaterial*                           PhysicalMaterialMap[0x8];                                  // 0x0098(0x0040) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UmaterialInterface*                          Parent;                                                    // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasStaticPermutationResource : 1;                         // 0x00E0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                            // 0x00E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HEZ1[0x7];                                     // 0x00E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                     // 0x00E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                     // 0x00F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                    // 0x0108(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                      // 0x0118(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                       // 0x0128(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                     // 0x0138(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZG88[0x10];                                    // 0x0140(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStaticParameterSet                         StaticParameters;                                          // 0x0150(0x0040) (NativeAccessSpecifierPrivate)
	struct FMaterialCachedParameters                   CachedLayerParameters;                                     // 0x0190(0x01A0) (NativeAccessSpecifierPrivate)
	TArray<class UObject*>                             CachedReferencedTextures;                                  // 0x0330(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_TFD0[0xD0];                                    // 0x0340(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}



};

// Class Engine.MaterialInstanceConstant
// 0x0008 (FullSize[0x0418] - InheritedSize[0x0410])
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                          // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}



	struct FLinearColor K2_GetVectorParameterValue(const struct FName& parameterName);
	class Utexture* K2_GetTextureParameterValue(const struct FName& parameterName);
	float K2_GetScalarParameterValue(const struct FName& parameterName);
};

// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCustomOutput");
		return ptr;
	}



};

// Class Engine.EngineCustomTimeStep
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UEngineCustomTimeStep : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EngineCustomTimeStep");
		return ptr;
	}



};

// Class Engine.DynamicBlueprintBinding
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UDynamicBlueprintBinding : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DynamicBlueprintBinding");
		return ptr;
	}



};

// Class Engine.BlueprintGeneratedClass
// 0x00F8 (FullSize[0x0338] - InheritedSize[0x0240])
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                   // 0x0240(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasNativizedParent : 1;                                   // 0x0244(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasCookedComponentInstancingData : 1;                     // 0x0244(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G0SI[0x3];                                     // 0x0245(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                     // 0x0248(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UactorComponent*>                     ComponentTemplates;                                        // 0x0258(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x0268(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                   // 0x0278(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*                InheritableComponentHandler;                               // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructProperty*                             UberGraphFramePointerProperty;                             // 0x0298(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XRX9[0x8];                                     // 0x02A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UFunction*                                   UberGraphFunction;                                         // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                             // 0x02B0(0x0050) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PL7A[0x38];                                    // 0x0300(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintGeneratedClass");
		return ptr;
	}



};

// Class Engine.CameraComponent
// 0x05C0 (FullSize[0x07D0] - InheritedSize[0x0210])
class UCameraComponent : public USceneComponent
{
public:
	float                                              FieldOfView;                                               // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrthoWidth;                                                // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrthoNearClipPlane;                                        // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrthoFarClipPlane;                                         // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AspectRatio;                                               // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x0224(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                 // 0x0224(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockToHmd : 1;                                            // 0x0224(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x0224(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECameraProjectionMode>          ProjectionMode;                                            // 0x0225(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ULHG[0x3A];                                    // 0x0226(0x003A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PostProcessBlendWeight;                                    // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TBSU[0x2C];                                    // 0x0264(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0290(0x0540) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraComponent");
		return ptr;
	}



	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(TEnumAsByte<Engine_ECameraProjectionMode> InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void RemoveBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject);
	void OnCameraMeshHiddenChanged();
	void GetCameraView(float deltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};

// Class Engine.SoundBase
// 0x0138 (FullSize[0x0168] - InheritedSize[0x0030])
class USoundBase : public UObject
{
public:
	class USoundClass*                                 SoundClassObject;                                          // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDebug : 1;                                                // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideConcurrency : 1;                                  // 0x0038(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOutputToBusOnly : 1;                                      // 0x0038(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasDelayNode : 1;                                         // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasConcatenatorNode : 1;                                  // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBypassVolumeScaleForPriority : 1;                         // 0x0038(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EVirtualizationMode                         VirtualizationMode;                                        // 0x0039(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SZ7K[0x56];                                    // 0x003A(0x0056) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ConcurrencySet[0x50];                                      // 0x003A(0x0050) UNKNOWN PROPERTY: SetProperty
	struct FSoundConcurrencySettings                   ConcurrencyOverrides;                                      // 0x00E0(0x0020) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                              duration;                                                  // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistance;                                               // 0x0104(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TotalSamples;                                              // 0x0108(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              priority;                                                  // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundModulation                            Modulation;                                                // 0x0118(0x0010) (Edit, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                            SoundSubmixObject;                                         // 0x0128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSubmixSendInfo>                SoundSubmixSends;                                          // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                         // 0x0140(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>             BusSends;                                                  // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>             PreEffectBusSends;                                         // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundBase");
		return ptr;
	}



};

// Class Engine.SoundWave
// 0x01B0 (FullSize[0x0318] - InheritedSize[0x0168])
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                        // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StreamingPriority;                                         // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	AudioPlatformConfiguration_ESoundwaveSampleRateSettings SampleRateQuality;                                         // 0x0170(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1S4N[0x1];                                     // 0x0171(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESoundGroup>                    SoundGroup;                                                // 0x0172(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x0173(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStreaming : 1;                                            // 0x0173(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSeekableStreaming : 1;                                    // 0x0173(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ESoundWaveLoadingBehavior                   LoadingBehavior;                                           // 0x0174(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K677 : 5;                                      // 0x0175(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bMature : 1;                                               // 0x0175(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bManualWordWrap : 1;                                       // 0x0175(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSingleLine : 1;                                           // 0x0175(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsAmbisonics : 1;                                         // 0x0176(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RKZF[0x1];                                     // 0x0177(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      FrequenciesToAnalyze;                                      // 0x0178(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveSpectralTimeData>          CookedSpectralTimeData;                                    // 0x0188(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveEnvelopeTimeData>          CookedEnvelopeTimeData;                                    // 0x0198(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InitialChunkSize;                                          // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N6RL[0x44];                                    // 0x01AC(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x01F0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SubtitlePriority;                                          // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              volume;                                                    // 0x0204(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Pitch;                                                     // 0x0208(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumChannels;                                               // 0x020C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SampleRate;                                                // 0x0210(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_VNVA[0xC];                                     // 0x0214(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSubtitleCue>                        Subtitles;                                                 // 0x0220(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                                 Curves;                                                    // 0x0230(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                                 InternalCurves;                                            // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_47E2[0xD8];                                    // 0x0240(0x00D8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundWave");
		return ptr;
	}



};

// Class Engine.SoundWaveProcedural
// 0x0058 (FullSize[0x0370] - InheritedSize[0x0318])
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData_YL40[0x58];                                    // 0x0318(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundWaveProcedural");
		return ptr;
	}



};

// Class Engine.BlueprintCore
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                    // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GeneratedClass;                                            // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLegacyNeedToPurgeSkelRefs;                                // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4ZE2[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       BlueprintGuid;                                             // 0x0044(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_WXLK[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintCore");
		return ptr;
	}



};

// Class Engine.Blueprint
// 0x0050 (FullSize[0x00A8] - InheritedSize[0x0058])
class UBlueprint : public UBlueprintCore
{
public:
	class UClass*                                      ParentClass;                                               // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBlueprintType>                 BlueprintType;                                             // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRecompileOnLoad : 1;                                      // 0x0061(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasBeenRegenerated : 1;                                   // 0x0061(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                 // 0x0061(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4JB8[0x2];                                     // 0x0062(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlueprintSystemVersion;                                    // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UactorComponent*>                     ComponentTemplates;                                        // 0x0070(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x0080(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                   // 0x0090(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*                InheritableComponentHandler;                               // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Blueprint");
		return ptr;
	}



};

// Class Engine.Model
// 0x0230 (FullSize[0x0260] - InheritedSize[0x0030])
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData_5BDT[0x230];                                   // 0x0030(0x0230) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Model");
		return ptr;
	}



};

// Class Engine.channel
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class Uchannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UKAC[0x40];                                    // 0x0038(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.channel");
		return ptr;
	}



};

// Class Engine.ActorChannel
// 0x0228 (FullSize[0x02A0] - InheritedSize[0x0078])
class UActorChannel : public Uchannel
{
public:
	class Uactor*                                      actor;                                                     // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NBZ9[0xE8];                                    // 0x0080(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             CreateSubObjects;                                          // 0x0168(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BGC2[0x128];                                   // 0x0178(0x0128) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}



};

// Class Engine.AnimationAsset
// 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
class UAnimationAsset : public UObject
{
public:
	unsigned char                                      UnknownData_F7TZ[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0040(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_VH5T[0x20];                                    // 0x0048(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAnimMetaData*>                       Metadata;                                                  // 0x0068(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0078(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimationAsset");
		return ptr;
	}



};

// Class Engine.BlendSpaceBase
// 0x00C8 (FullSize[0x0150] - InheritedSize[0x0088])
class UBlendSpaceBase : public UAnimationAsset
{
public:
	unsigned char                                      UnknownData_RQ6N[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bRotationBlendInMeshSpace;                                 // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MBEX[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AnimLength;                                                // 0x0094(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpolationParameter                     InterpolationParam[0x3];                                   // 0x0098(0x0018) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TargetWeightInterpolationSpeedPerSec;                      // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ENotifyTriggerMode>             NotifyTriggerMode;                                         // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GJ28[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                              // 0x00B8(0x0010) (Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SampleIndexWithMarkers;                                    // 0x00C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SN8N[0x4];                                     // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBlendSample>                        SampleData;                                                // 0x00D0(0x0010) (Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FEditorElement>                      GridSamples;                                               // 0x00E0(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBlendParameter                             BlendParameters[0x3];                                      // 0x00F0(0x0060) (Edit, Protected, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlendSpaceBase");
		return ptr;
	}



};

// Class Engine.Blendspace
// 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
class UBlendspace : public UBlendSpaceBase
{
public:
	TEnumAsByte<Engine_EBlendSpaceAxis>                AxisToScaleAnimation;                                      // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_ORZF[0x7];                                     // 0x0151(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Blendspace");
		return ptr;
	}



};

// Class Engine.AimOffsetBlendSpace
// 0x0000 (FullSize[0x0158] - InheritedSize[0x0158])
class UAimOffsetBlendSpace : public UBlendspace
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AimOffsetBlendSpace");
		return ptr;
	}



};

// Class Engine.BlendSpace1D
// 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                           // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6V8H[0x7];                                     // 0x0151(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlendSpace1D");
		return ptr;
	}



};

// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (FullSize[0x0158] - InheritedSize[0x0158])
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AimOffsetBlendSpace1D");
		return ptr;
	}



};

// Class Engine.AISystemBase
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UAISystemBase : public UObject
{
public:
	struct FSoftClassPath                              AISystemClassName;                                         // 0x0030(0x0020) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       AISystemModuleName;                                        // 0x0050(0x000C) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_ASED[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bInstantiateAISystemOnClient;                              // 0x0068(0x0001) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_Y9IE[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AISystemBase");
		return ptr;
	}



};

// Class Engine.AmbientSound
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UAmbientSound : public Uactor
{
public:
	class UAudioComponent*                             AudioComponent;                                            // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}



	void stop();
	void Play(float startTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};

// Class Engine.AnimationSettings
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UAnimationSettings : public UDeveloperSettings
{
public:
	int                                                CompressCommandletVersion;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M2FG[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                             // 0x0050(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ForceRecompression;                                        // 0x0060(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOnlyCheckForMissingSkeletalMeshes;                        // 0x0061(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceBelowThreshold;                                      // 0x0062(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                     // 0x0063(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRaiseMaxErrorToExisting;                                  // 0x0064(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnablePerformanceLog;                                     // 0x0065(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bStripAnimationDataOnDedicatedServer;                      // 0x0066(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bTickAnimationOnSkeletalMeshInit;                          // 0x0067(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimationSettings");
		return ptr;
	}



};

// Class Engine.AnimBlueprint
// 0x0028 (FullSize[0x00D0] - InheritedSize[0x00A8])
class UAnimBlueprint : public UBlueprint
{
public:
	unsigned char                                      UnknownData_NCW5[0x8];                                     // 0x00A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   TargetSkeleton;                                            // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimGroupInfo>                      Groups;                                                    // 0x00B8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseMultiThreadedAnimationUpdate;                          // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWarnAboutBlueprintUsage;                                  // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SYHK[0x6];                                     // 0x00CA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimBlueprint");
		return ptr;
	}



};

// Class Engine.AnimBlueprintGeneratedClass
// 0x01C0 (FullSize[0x04F8] - InheritedSize[0x0338])
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	unsigned char                                      UnknownData_EYKS[0x8];                                     // 0x0338(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                        // 0x0340(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                                   TargetSkeleton;                                            // 0x0350(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                              // 0x0358(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                                // 0x0368(0x0050) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LN5O[0x80];                                    // 0x03B8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               SyncGroupNames;                                            // 0x0438(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExposedValueHandler>                EvaluateGraphExposedInputs;                                // 0x0448(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;                               // 0x0458(0x0050) (NativeAccessSpecifierPublic)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                         // 0x04A8(0x0050) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimBlueprintGeneratedClass");
		return ptr;
	}



};

// Class Engine.AnimBoneCompressionCodec
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UAnimBoneCompressionCodec : public UObject
{
public:
	struct FString                                     description;                                               // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimBoneCompressionCodec");
		return ptr;
	}



};

// Class Engine.AnimBoneCompressionSettings
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UAnimBoneCompressionSettings : public UObject
{
public:
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                    // 0x0030(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimBoneCompressionSettings");
		return ptr;
	}



};

// Class Engine.AnimClassData
// 0x0240 (FullSize[0x0270] - InheritedSize[0x0030])
class UAnimClassData : public UObject
{
public:
	unsigned char                                      UnknownData_MNWW[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                        // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                                   TargetSkeleton;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                              // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                                // 0x0060(0x0050) (NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunction>              AnimBlueprintFunctions;                                    // 0x00B0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunctionData>          AnimBlueprintFunctionData;                                 // 0x00C0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AnimNodeProperties[0x10];                                  // 0x00D0(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_K5B6[0x10];                                    // 0x00E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      LinkedAnimGraphNodeProperties[0x10];                       // 0x00E0(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_4ZRZ[0x10];                                    // 0x0100(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      LinkedAnimLayerNodeProperties[0x10];                       // 0x0100(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_WWZS[0x10];                                    // 0x0120(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      PreUpdateNodeProperties[0x10];                             // 0x0120(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_0J4A[0x10];                                    // 0x0140(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      DynamicResetNodeProperties[0x10];                          // 0x0140(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_HIXG[0x10];                                    // 0x0160(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      StateMachineNodeProperties[0x10];                          // 0x0160(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_59NN[0x10];                                    // 0x0180(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      InitializationNodeProperties[0x10];                        // 0x0180(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      UnknownData_9PLG[0x10];                                    // 0x01A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;                                     // 0x01B0(0x0050) (NativeAccessSpecifierPublic)
	TArray<struct FName>                               SyncGroupNames;                                            // 0x0200(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExposedValueHandler>                EvaluateGraphExposedInputs;                                // 0x0210(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                         // 0x0220(0x0050) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimClassData");
		return ptr;
	}



};

// Class Engine.AnimClassInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimClassInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimClassInterface");
		return ptr;
	}



};

// Class Engine.AnimSequenceBase
// 0x0028 (FullSize[0x00B0] - InheritedSize[0x0088])
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                  // 0x0088(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SequenceLength;                                            // 0x0098(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RateScale;                                                 // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawCurveTracks                             RawCurveData;                                              // 0x00A0(0x0010) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimSequenceBase");
		return ptr;
	}



	float GetPlayLength();
};

// Class Engine.AnimCompositeBase
// 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
class UAnimCompositeBase : public UAnimSequenceBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompositeBase");
		return ptr;
	}



};

// Class Engine.AnimComposite
// 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                            // 0x00B0(0x0010) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimComposite");
		return ptr;
	}



};

// Class Engine.AnimCompress
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UAnimCompress : public UAnimBoneCompressionCodec
{
public:
	unsigned char                                      bNeedsSkeleton : 1;                                        // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L8UR[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    TranslationCompressionFormat;                              // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    RotationCompressionFormat;                                 // 0x0045(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    ScaleCompressionFormat;                                    // 0x0046(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3EVK[0x1];                                     // 0x0047(0x0001) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompress");
		return ptr;
	}



};

// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompress_BitwiseCompressOnly");
		return ptr;
	}



};

// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompress_LeastDestructive");
		return ptr;
	}



};

// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAngleDiff;                                              // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxScaleDiff;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxEffectorDiff;                                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinEffectorDiff;                                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EffectorDiffSocket;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParentKeyScale;                                            // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRetarget : 1;                                             // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                             // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DZOE[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompress_RemoveLinearKeys");
		return ptr;
	}



};

// Class Engine.AnimCompress_PerTrackCompression
// 0x0078 (FullSize[0x00E0] - InheritedSize[0x0068])
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                       // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPosDiffBitwise;                                         // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAngleDiffBitwise;                                       // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxScaleDiffBitwise;                                       // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedRotationFormats;                                    // 0x0078(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedTranslationFormats;                                 // 0x0088(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedScaleFormats;                                       // 0x0098(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bResampleAnimation : 1;                                    // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZP1K[0x3];                                     // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResampledFramerate;                                        // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinKeysForResampling;                                      // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAdaptiveError : 1;                                     // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                           // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OK08[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TrackHeightBias;                                           // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParentingDivisor;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParentingDivisorExponent;                                  // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAdaptiveError2 : 1;                                    // 0x00C4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q7KK[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RotationErrorSourceRatio;                                  // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslationErrorSourceRatio;                               // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScaleErrorSourceRatio;                                     // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxErrorPerTrackRatio;                                     // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PerturbationProbeSize;                                     // 0x00D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YFM1[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompress_PerTrackCompression");
		return ptr;
	}



};

// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                   // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStartAtSecondKey : 1;                                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NDGD[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompress_RemoveEverySecondKey");
		return ptr;
	}



};

// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAngleDiff;                                              // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxScaleDiff;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8HDJ[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCompress_RemoveTrivialKeys");
		return ptr;
	}



};

// Class Engine.AnimCurveCompressionCodec
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimCurveCompressionCodec : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCurveCompressionCodec");
		return ptr;
	}



};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCurveCompressionCodec_CompressedRichCurve");
		return ptr;
	}



};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCurveCompressionCodec_UniformIndexable");
		return ptr;
	}



};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCurveCompressionCodec_UniformlySampled");
		return ptr;
	}



};

// Class Engine.AnimCurveCompressionSettings
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UAnimCurveCompressionSettings : public UObject
{
public:
	class UAnimCurveCompressionCodec*                  Codec;                                                     // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimCurveCompressionSettings");
		return ptr;
	}



};

// Class Engine.AnimLayerInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimLayerInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimLayerInterface");
		return ptr;
	}



};

// Class Engine.AnimMetaData
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimMetaData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimMetaData");
		return ptr;
	}



};

// Class Engine.AnimMontage
// 0x0130 (FullSize[0x01E0] - InheritedSize[0x00B0])
class UAnimMontage : public UAnimCompositeBase
{
public:
	struct FAlphaBlend                                 BlendIn;                                                   // 0x00B0(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                              BlendInTime;                                               // 0x00E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CA7N[0x4];                                     // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAlphaBlend                                 BlendOut;                                                  // 0x00E8(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                              blendOutTime;                                              // 0x0118(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendOutTriggerTime;                                       // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SyncGroup;                                                 // 0x0120(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SyncSlotIndex;                                             // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarkerSyncData                             MarkerData;                                                // 0x0130(0x0020) (NativeAccessSpecifierPublic)
	TArray<struct FCompositeSection>                   CompositeSections;                                         // 0x0150(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                            // 0x0160(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                           // 0x0170(0x0010) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotionTranslation;                              // 0x0180(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotionRotation;                                 // 0x0181(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAutoBlendOut;                                       // 0x0182(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x0183(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S4QG[0x4];                                     // 0x0184(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                                     // 0x0188(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int>                                        BranchingPointStateNotifyIndices;                          // 0x0198(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimeStretchCurve                           TimeStretchCurve;                                          // 0x01A8(0x0028) (Edit, NativeAccessSpecifierPublic)
	struct FName                                       TimeStretchCurveName;                                      // 0x01D0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HQZO[0x4];                                     // 0x01DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimMontage");
		return ptr;
	}



	float GetDefaultBlendOutTime();
};

// Class Engine.AnimNotify_PauseClothingSimulation
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimNotify_PauseClothingSimulation : public UanimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotify_PauseClothingSimulation");
		return ptr;
	}



};

// Class Engine.AnimNotify_PlayParticleEffect
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UAnimNotify_PlayParticleEffect : public UanimNotify
{
public:
	class UparticleSystem*                             PSTemplate;                                                // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     LocationOffset;                                            // 0x0048(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationOffset;                                            // 0x0054(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct Fvector                                     scale;                                                     // 0x0060(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OBGS[0x14];                                    // 0x006C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      Attached : 1;                                              // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C4N0[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SocketName;                                                // 0x0084(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotify_PlayParticleEffect");
		return ptr;
	}



};

// Class Engine.AnimNotify_PlaySound
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UAnimNotify_PlaySound : public UanimNotify
{
public:
	class USoundBase*                                  Sound;                                                     // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMultiplier;                                          // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMultiplier;                                           // 0x004C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFollow : 1;                                               // 0x0050(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y7L6[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       AttachName;                                                // 0x0054(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotify_PlaySound");
		return ptr;
	}



};

// Class Engine.AnimNotify_ResetClothingSimulation
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimNotify_ResetClothingSimulation : public UanimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotify_ResetClothingSimulation");
		return ptr;
	}



};

// Class Engine.AnimNotify_ResetDynamics
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimNotify_ResetDynamics : public UanimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotify_ResetDynamics");
		return ptr;
	}



};

// Class Engine.AnimNotify_ResumeClothingSimulation
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimNotify_ResumeClothingSimulation : public UanimNotify
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotify_ResumeClothingSimulation");
		return ptr;
	}



};

// Class Engine.AnimNotifyState_DisableRootMotion
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotifyState_DisableRootMotion");
		return ptr;
	}



};

// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UparticleSystem*                             PSTemplate;                                                // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SocketName;                                                // 0x0040(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     LocationOffset;                                            // 0x004C(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationOffset;                                            // 0x0058(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bDestroyAtEnd;                                             // 0x0064(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_97RI[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotifyState_TimedParticleEffect");
		return ptr;
	}



};

// Class Engine.AnimNotifyState_Trail
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UparticleSystem*                             PSTemplate;                                                // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       FirstSocketName;                                           // 0x0040(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SecondSocketName;                                          // 0x004C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETrailWidthMode>                WidthScaleMode;                                            // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MZP3[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       WidthScaleCurve;                                           // 0x005C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRecycleSpawnedSystems : 1;                                // 0x0068(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IW2M[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimNotifyState_Trail");
		return ptr;
	}



	class UparticleSystem* OverridePSTemplate(class UskeletalMeshComponent* MeshComp, class UAnimSequenceBase* animation);
};

// Class Engine.AnimSequence
// 0x00F8 (FullSize[0x01A8] - InheritedSize[0x00B0])
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                 // 0x00B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_793E[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                                   // 0x00B8(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SNHV[0x10];                                    // 0x00C8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                   // 0x00D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                  // 0x00E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CIDY[0x70];                                    // 0x00E8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAdditiveAnimationType>         AdditiveAnimType;                                          // 0x0158(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EAdditiveBasePoseType>          RefPoseType;                                               // 0x0159(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BRAH[0x6];                                     // 0x015A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               RefPoseSeq;                                                // 0x0160(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RefFrameIndex;                                             // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       RetargetSource;                                            // 0x016C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAnimInterpolationType                      Interpolation;                                             // 0x0178(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotion;                                         // 0x0179(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x017A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceRootLock;                                            // 0x017B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseNormalizedRootMotionScale;                             // 0x017C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRootMotionSettingsCopiedFromMontage;                      // 0x017D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RS49[0x2];                                     // 0x017E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAnimSyncMarker>                     AuthoredSyncMarkers;                                       // 0x0180(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RRYK[0x18];                                    // 0x0190(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}



};

// Class Engine.AnimSet
// 0x00D0 (FullSize[0x0100] - InheritedSize[0x0030])
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HRCA[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               TrackBoneNames;                                            // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                               // 0x0048(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                    // 0x0058(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                   // 0x0068(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FName>                               UseTranslationBoneNames;                                   // 0x0078(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                             // 0x0088(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       PreviewSkelMeshName;                                       // 0x0098(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       BestRatioSkelMeshName;                                     // 0x00A4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DMZG[0x50];                                    // 0x00B0(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}



};

// Class Engine.AnimSingleNodeInstance
// 0x0020 (FullSize[0x0290] - InheritedSize[0x0270])
class UAnimSingleNodeInstance : public UanimInstance
{
public:
	class UAnimationAsset*                             CurrentAsset;                                              // 0x0270(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                     // 0x0278(0x0010) ELEMENT_SIZE_MISMATCH (ZeroConstructor, Transient, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NKD8[0x4];                                     // 0x0278(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData_R30A[0x4];                                     // 0x028C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimSingleNodeInstance");
		return ptr;
	}



	void StopAnim();
	void SetReverse(bool bInReverse);
	void SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero);
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const struct Fvector& InBlendInput);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void playAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
	class UAnimationAsset* GetAnimationAsset();
};

// Class Engine.AnimStateMachineTypes
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UAnimStateMachineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimStateMachineTypes");
		return ptr;
	}



};

// Class Engine.AnimStreamable
// 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
class UAnimStreamable : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                 // 0x00B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EAnimInterpolationType                      Interpolation;                                             // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TEKK[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       RetargetSource;                                            // 0x00B8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_90MP[0x14];                                    // 0x00C4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                   // 0x00D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                  // 0x00E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRootMotion;                                         // 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x00E9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceRootLock;                                            // 0x00EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseNormalizedRootMotionScale;                             // 0x00EB(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E3XB[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AnimStreamable");
		return ptr;
	}



};

// Class Engine.ArrowComponent
// 0x0018 (FullSize[0x0440] - InheritedSize[0x0428])
class UArrowComponent : public UprimitiveComponent
{
public:
	unsigned char                                      UnknownData_RDHQ[0x4];                                     // 0x0428(0x0004) Fix Super Size
	float                                              ArrowSize;                                                 // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScreenSize;                                                // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsScreenSizeScaled : 1;                                   // 0x0434(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTreatAsASprite : 1;                                       // 0x0434(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CYOV[0xB];                                     // 0x0435(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}



	void SetArrowColor(const struct FLinearColor& newColor);
};

// Class Engine.AssetExportTask
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UAssetExportTask : public UObject
{
public:
	class UObject*                                     Object;                                                    // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExporter*                                   Exporter;                                                  // 0x0038(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     FileName;                                                  // 0x0040(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSelected;                                                 // 0x0050(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReplaceIdentical;                                         // 0x0051(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPrompt;                                                   // 0x0052(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutomated;                                                // 0x0053(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseFileArchive;                                           // 0x0054(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWriteEmptyFiles;                                          // 0x0055(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1BUQ[0x2];                                     // 0x0056(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             IgnoreObjectList;                                          // 0x0058(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     Options;                                                   // 0x0068(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             Errors;                                                    // 0x0070(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AssetExportTask");
		return ptr;
	}



};

// Class Engine.AssetManager
// 0x0410 (FullSize[0x0440] - InheritedSize[0x0030])
class UAssetManager : public UObject
{
public:
	unsigned char                                      UnknownData_DW62[0x298];                                   // 0x0030(0x0298) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             ObjectReferenceList;                                       // 0x02C8(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsGlobalAsyncScanEnvironment;                             // 0x02D8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldGuessTypeAndName;                                   // 0x02D9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldUseSynchronousLoad;                                 // 0x02DA(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsLoadingFromPakFiles;                                    // 0x02DB(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldAcquireMissingChunksOnLoad;                         // 0x02DC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bOnlyCookProductionAssets;                                 // 0x02DD(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsBulkScanning;                                           // 0x02DE(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsPrimaryAssetDirectoryCurrent;                           // 0x02DF(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsManagementDatabaseCurrent;                              // 0x02E0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUpdateManagementDatabaseAfterScan;                        // 0x02E1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIncludeOnlyOnDiskAssets;                                  // 0x02E2(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_PF3Q[0x1];                                     // 0x02E3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumberOfSpawnedNotifications;                              // 0x02E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_UVSF[0x158];                                   // 0x02E8(0x0158) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AssetManager");
		return ptr;
	}



};

// Class Engine.AssetManagerSettings
// 0x00C8 (FullSize[0x0110] - InheritedSize[0x0048])
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>               PrimaryAssetTypesToScan;                                   // 0x0048(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                      DirectoriesToExclude;                                      // 0x0058(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesOverride>          PrimaryAssetRules;                                         // 0x0068(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesCustomOverride>    CustomPrimaryAssetRules;                                   // 0x0078(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOnlyCookProductionAssets;                                 // 0x0088(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldManagerDetermineTypeAndName;                        // 0x0089(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldGuessTypeAndNameInEditor;                           // 0x008A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldAcquireMissingChunksOnLoad;                         // 0x008B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6FAI[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAssetManagerRedirect>               PrimaryAssetIdRedirects;                                   // 0x0090(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>               PrimaryAssetTypeRedirects;                                 // 0x00A0(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>               AssetPathRedirects;                                        // 0x00B0(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MetaDataTagsForAssetRegistry[0x50];                        // 0x00C0(0x0050) UNKNOWN PROPERTY: SetProperty


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AssetManagerSettings");
		return ptr;
	}



};

// Class Engine.AssetMappingTable
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                       MappedAssets;                                              // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AssetMappingTable");
		return ptr;
	}



};

// Class Engine.AsyncActionHandleSaveGame
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                 // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L9KE[0x20];                                    // 0x0048(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USaveGame*                                   SaveGameObject;                                            // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AsyncActionHandleSaveGame");
		return ptr;
	}



	class UAsyncActionHandleSaveGame* STATIC_AsyncSaveGameToSlot(class UObject* worldContextObject, class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	class UAsyncActionHandleSaveGame* STATIC_AsyncLoadGameFromSlot(class UObject* worldContextObject, const struct FString& SlotName, int UserIndex);
};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{
public:
	unsigned char                                      UnknownData_0ZZA[0x48];                                    // 0x0038(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetBase");
		return ptr;
	}



};

// Class Engine.AsyncActionLoadPrimaryAsset
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                 // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAsset");
		return ptr;
	}



	class UAsyncActionLoadPrimaryAsset* STATIC_AsyncLoadPrimaryAsset(class UObject* worldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                 // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetClass");
		return ptr;
	}



	class UAsyncActionLoadPrimaryAssetClass* STATIC_AsyncLoadPrimaryAssetClass(class UObject* worldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);
};

// Class Engine.AsyncActionLoadPrimaryAssetList
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                 // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetList");
		return ptr;
	}



	class UAsyncActionLoadPrimaryAssetList* STATIC_AsyncLoadPrimaryAssetList(class UObject* worldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                 // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetClassList");
		return ptr;
	}



	class UAsyncActionLoadPrimaryAssetClassList* STATIC_AsyncLoadPrimaryAssetClassList(class UObject* worldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                 // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AsyncActionChangePrimaryAssetBundles");
		return ptr;
	}



	class UAsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForPrimaryAssetList(class UObject* worldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> AddBundles, TArray<struct FName> RemoveBundles);
	class UAsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* worldContextObject, TArray<struct FName> NewBundles, TArray<struct FName> OldBundles);
};

// Class Engine.AtmosphericFog
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UAtmosphericFog : public UInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                   // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AtmosphericFog");
		return ptr;
	}



};

// Class Engine.AtmosphericFogComponent
// 0x0110 (FullSize[0x0320] - InheritedSize[0x0210])
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                              SunMultiplier;                                             // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FogMultiplier;                                             // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DensityMultiplier;                                         // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DensityOffset;                                             // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceScale;                                             // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AltitudeScale;                                             // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceOffset;                                            // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GroundOffset;                                              // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartDistance;                                             // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SunDiscScale;                                              // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultBrightness;                                         // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      DefaultLightColor;                                         // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableSunDisk : 1;                                       // 0x0240(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAtmosphereAffectsSunIlluminance : 1;                      // 0x0240(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableGroundScattering : 1;                              // 0x0240(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3K7F[0x3];                                     // 0x0241(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                          // 0x0244(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                                  TransmittanceTexture;                                      // 0x0270(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  IrradianceTexture;                                         // 0x0278(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WX8Y[0xA0];                                    // 0x0280(0x00A0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AtmosphericFogComponent");
		return ptr;
	}



	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};

// Class Engine.AudioSettings
// 0x0150 (FullSize[0x0198] - InheritedSize[0x0048])
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                             DefaultSoundClassName;                                     // 0x0048(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultMediaSoundClassName;                                // 0x0068(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultSoundConcurrencyName;                               // 0x0088(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             DefaultBaseSoundMix;                                       // 0x00A8(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             VoiPSoundClass;                                            // 0x00C8(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             MasterSubmix;                                              // 0x00E8(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             ReverbSubmix;                                              // 0x0108(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             EQSubmix;                                                  // 0x0128(0x0020) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EVoiceSampleRate                            VoiPSampleRate;                                            // 0x0148(0x0001) ELEMENT_SIZE_MISMATCH (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BIIV[0x3];                                     // 0x0148(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              DefaultReverbSendLevel;                                    // 0x014C(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaximumConcurrentStreams;                                  // 0x0150(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalMinPitchScale;                                       // 0x0154(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalMaxPitchScale;                                       // 0x0158(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1ZKQ[0x4];                                     // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAudioQualitySettings>               QualityLevels;                                             // 0x0160(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowPlayWhenSilent : 1;                                  // 0x0170(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMasterEQ : 1;                                      // 0x0170(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowCenterChannel3DPanning : 1;                          // 0x0170(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2URZ[0x3];                                     // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           NumStoppingSources;                                        // 0x0174(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EPanningMethod                              PanningMethod;                                             // 0x0178(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMonoChannelUpmixMethod                     MonoChannelUpmixMethod;                                    // 0x0179(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OO6T[0x6];                                     // 0x017A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DialogueFilenameFormat;                                    // 0x0180(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LLZG[0x8];                                     // 0x0190(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AudioSettings");
		return ptr;
	}



};

// Class Engine.AudioVolume
// 0x0050 (FullSize[0x02B8] - InheritedSize[0x0268])
class UAudioVolume : public Uvolume
{
public:
	float                                              priority;                                                  // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x026C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_AWUE[0x3];                                     // 0x026D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             settings;                                                  // 0x0270(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FInteriorSettings                           AmbientZoneSettings;                                       // 0x0290(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_YW9O[0x4];                                     // 0x02B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AudioVolume");
		return ptr;
	}



	void SetReverbSettings(const struct FReverbSettings& NewReverbSettings);
	void SetPriority(float NewPriority);
	void SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings);
	void SetEnabled(bool bNewEnabled);
	void OnRep_bEnabled();
};

// Class Engine.AutoDestroySubsystem
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UAutoDestroySubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData_9YVM[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class Uactor*>                              ActorsToPoll;                                              // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AutoDestroySubsystem");
		return ptr;
	}



	void OnActorEndPlay(class Uactor* actor, TEnumAsByte<Engine_EEndPlayReason> endPlayReason);
};

// Class Engine.AutomationTestSettings
// 0x0308 (FullSize[0x0338] - InheritedSize[0x0030])
class UAutomationTestSettings : public UObject
{
public:
	TArray<struct FString>                             EngineTestModules;                                         // 0x0030(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             EditorTestModules;                                         // 0x0040(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             AutomationTestmap;                                         // 0x0050(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                 // 0x0070(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                     AssetsToOpen;                                              // 0x0080(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                        // 0x0090(0x01F0) (Edit, Config, NativeAccessSpecifierPublic)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                               // 0x0280(0x0030) (Edit, Config, NativeAccessSpecifierPublic)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                               // 0x02B0(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	struct FBlueprintEditorPromotionSettings           BlueprintEditorPromotionTest;                              // 0x02C0(0x0030) (Edit, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             TestLevelFolders;                                          // 0x02F0(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                             // 0x0300(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                               // 0x0310(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                          // 0x0320(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                                   DefaultScreenshotResolution;                               // 0x0330(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AutomationTestSettings");
		return ptr;
	}



};

// Class Engine.AvoidanceManager
// 0x00B8 (FullSize[0x00E8] - InheritedSize[0x0030])
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData_YTCL[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultTimeToLive;                                         // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LockTimeAfterAvoid;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LockTimeAfterClean;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DeltaTimeToPredict;                                        // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ArtificialRadiusExpansion;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TestHeightDifference;                                      // 0x004C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightCheckMargin;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NFUB[0x94];                                    // 0x0054(0x0094) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.AvoidanceManager");
		return ptr;
	}



	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	struct Fvector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
};

// Class Engine.BandwidthTestActor
// 0x0020 (FullSize[0x0250] - InheritedSize[0x0230])
class UBandwidthTestActor : public Uactor
{
public:
	struct FBandwidthTestGenerator                     BandwidthGenerator;                                        // 0x0230(0x0020) (Net, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BandwidthTestActor");
		return ptr;
	}



};

// Class Engine.GPUCullingInstancedStaticMeshComponent
// 0x0010 (FullSize[0x05B0] - InheritedSize[0x05A0])
class UGPUCullingInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_41PF[0x10];                                    // 0x05A0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GPUCullingInstancedStaticMeshComponent");
		return ptr;
	}



};

// Class Engine.BillboardComponent
// 0x0028 (FullSize[0x0450] - InheritedSize[0x0428])
class UBillboardComponent : public UprimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                    // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsScreenSizeScaled : 1;                                   // 0x0430(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OBGH[0x3];                                     // 0x0431(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScreenSize;                                                // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              U;                                                         // 0x0438(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UL;                                                        // 0x043C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              V;                                                         // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VL;                                                        // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DSZA[0x8];                                     // 0x0448(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BillboardComponent");
		return ptr;
	}



	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UTexture2D* NewSprite);
};

// Class Engine.BlendableInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBlendableInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlendableInterface");
		return ptr;
	}



};

// Class Engine.Skeleton
// 0x0340 (FullSize[0x0370] - InheritedSize[0x0030])
class USkeleton : public UObject
{
public:
	unsigned char                                      UnknownData_M5H4[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBoneNode>                           BoneTree;                                                  // 0x0040(0x0010) (Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                          RefLocalPoses;                                             // 0x0050(0x0010) (ZeroConstructor, Deprecated, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_PUNM[0x118];                                   // 0x0060(0x0118) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       VirtualBoneGuid;                                           // 0x0178(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVirtualBone>                        VirtualBones;                                              // 0x0188(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x0198(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VESY[0x50];                                    // 0x01A8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSmartNameContainer                         SmartNames;                                                // 0x01F8(0x0050) (Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_64H2[0x30];                                    // 0x0248(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UBlendProfile*>                       BlendProfiles;                                             // 0x0278(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                                // 0x0288(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_Q5GS[0xC8];                                    // 0x0298(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0360(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Skeleton");
		return ptr;
	}



};

// Class Engine.BlendProfile
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UBlendProfile : public UObject
{
public:
	unsigned char                                      UnknownData_H88X[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   OwningSkeleton;                                            // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBlendProfileBoneEntry>              ProfileEntries;                                            // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlendProfile");
		return ptr;
	}



};

// Class Engine.BlockingVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class UBlockingVolume : public Uvolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}



};

// Class Engine.BlueprintExtension
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBlueprintExtension : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintExtension");
		return ptr;
	}



};

// Class Engine.BlueprintMapLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintMapLibrary");
		return ptr;
	}



	void STATIC_SetMapPropertyByName(class UObject* Object, const struct FName& propertyName, TMap<int, int> Value);
	void STATIC_Map_Values(TMap<int, int> TargetMap, TArray<int>* values);
	bool STATIC_Map_Remove(TMap<int, int> TargetMap, int key);
	int STATIC_Map_Length(TMap<int, int> TargetMap);
	void STATIC_Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys);
	bool STATIC_Map_Find(TMap<int, int> TargetMap, int key, int* Value);
	bool STATIC_Map_Contains(TMap<int, int> TargetMap, int key);
	void STATIC_Map_Clear(TMap<int, int> TargetMap);
	void STATIC_Map_Add(TMap<int, int> TargetMap, int key, int Value);
};

// Class Engine.BlueprintPathsLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintPathsLibrary");
		return ptr;
	}



	struct FString STATIC_VideoCaptureDir();
	void STATIC_ValidatePath(const struct FString& InPath, bool* bDidSucceed, struct FText* OutReason);
	void STATIC_Split(const struct FString& InPath, struct FString* PathPart, struct FString* FilenamePart, struct FString* ExtensionPart);
	struct FString STATIC_SourceConfigDir();
	bool STATIC_ShouldSaveToUserDir();
	struct FString STATIC_ShaderWorkingDir();
	void STATIC_SetProjectFilePath(const struct FString& NewGameProjectFilePath);
	struct FString STATIC_SetExtension(const struct FString& InPath, const struct FString& InNewExtension);
	struct FString STATIC_ScreenShotDir();
	struct FString STATIC_SandboxesDir();
	struct FString STATIC_RootDir();
	void STATIC_RemoveDuplicateSlashes(const struct FString& InPath, struct FString* OutPath);
	struct FString STATIC_ProjectUserDir();
	struct FString STATIC_ProjectSavedDir();
	struct FString STATIC_ProjectPluginsDir();
	struct FString STATIC_ProjectPersistentDownloadDir();
	struct FString STATIC_ProjectModsDir();
	struct FString STATIC_ProjectLogDir();
	struct FString STATIC_ProjectIntermediateDir();
	struct FString STATIC_ProjectDir();
	struct FString STATIC_ProjectContentDir();
	struct FString STATIC_ProjectConfigDir();
	struct FString STATIC_ProfilingDir();
	void STATIC_NormalizeFilename(const struct FString& InPath, struct FString* OutPath);
	void STATIC_NormalizeDirectoryName(const struct FString& InPath, struct FString* OutPath);
	struct FString STATIC_MakeValidFileName(const struct FString& InString, const struct FString& InReplacementChar);
	void STATIC_MakeStandardFilename(const struct FString& InPath, struct FString* OutPath);
	void STATIC_MakePlatformFilename(const struct FString& InPath, struct FString* OutPath);
	bool STATIC_MakePathRelativeTo(const struct FString& InPath, const struct FString& InRelativeTo, struct FString* OutPath);
	struct FString STATIC_LaunchDir();
	bool STATIC_IsSamePath(const struct FString& PathA, const struct FString& PathB);
	bool STATIC_IsRestrictedPath(const struct FString& InPath);
	bool STATIC_IsRelative(const struct FString& InPath);
	bool STATIC_IsProjectFilePathSet();
	bool STATIC_IsDrive(const struct FString& InPath);
	bool STATIC_HasProjectPersistentDownloadDir();
	TArray<struct FString> STATIC_GetToolTipLocalizationPaths();
	TArray<struct FString> STATIC_GetRestrictedFolderNames();
	struct FString STATIC_GetRelativePathToRoot();
	TArray<struct FString> STATIC_GetPropertyNameLocalizationPaths();
	struct FString STATIC_GetProjectFilePath();
	struct FString STATIC_GetPath(const struct FString& InPath);
	struct FString STATIC_GetInvalidFileSystemChars();
	TArray<struct FString> STATIC_GetGameLocalizationPaths();
	struct FString STATIC_GetExtension(const struct FString& InPath, bool bIncludeDot);
	TArray<struct FString> STATIC_GetEngineLocalizationPaths();
	TArray<struct FString> STATIC_GetEditorLocalizationPaths();
	struct FString STATIC_GetCleanFilename(const struct FString& InPath);
	struct FString STATIC_GetBaseFilename(const struct FString& InPath, bool bRemovePath);
	struct FString STATIC_GeneratedConfigDir();
	struct FString STATIC_GameUserDeveloperDir();
	struct FString STATIC_GameSourceDir();
	struct FString STATIC_GameDevelopersDir();
	struct FString STATIC_GameAgnosticSavedDir();
	bool STATIC_FileExists(const struct FString& InPath);
	struct FString STATIC_FeaturePackDir();
	struct FString STATIC_EnterprisePluginsDir();
	struct FString STATIC_EnterpriseFeaturePackDir();
	struct FString STATIC_EnterpriseDir();
	struct FString STATIC_EngineVersionAgnosticUserDir();
	struct FString STATIC_EngineUserDir();
	struct FString STATIC_EngineSourceDir();
	struct FString STATIC_EngineSavedDir();
	struct FString STATIC_EnginePluginsDir();
	struct FString STATIC_EngineIntermediateDir();
	struct FString STATIC_EngineDir();
	struct FString STATIC_EngineContentDir();
	struct FString STATIC_EngineConfigDir();
	bool STATIC_DirectoryExists(const struct FString& InPath);
	struct FString STATIC_DiffDir();
	struct FString STATIC_CreateTempFilename(const struct FString& path, const struct FString& Prefix, const struct FString& Extension);
	struct FString STATIC_ConvertToSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);
	struct FString STATIC_ConvertRelativePathToFull(const struct FString& InPath, const struct FString& InBasePath);
	struct FString STATIC_ConvertFromSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);
	struct FString STATIC_Combine(TArray<struct FString> InPaths);
	bool STATIC_CollapseRelativeDirectories(const struct FString& InPath, struct FString* OutPath);
	struct FString STATIC_CloudDir();
	struct FString STATIC_ChangeExtension(const struct FString& InPath, const struct FString& InNewExtension);
	struct FString STATIC_BugItDir();
	struct FString STATIC_AutomationTransientDir();
	struct FString STATIC_AutomationLogDir();
	struct FString STATIC_AutomationDir();
};

// Class Engine.PlatformGameInstance
// 0x00D0 (FullSize[0x02C0] - InheritedSize[0x01F0])
class UPlatformGameInstance : public UgameInstance
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                         // 0x01F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                         // 0x0200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                    // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                   // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                          // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                  // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;               // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForRemoteNotificationsDelegate;       // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForUserNotificationsDelegate;         // 0x0270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x0280(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedRemoteNotificationDelegate;             // 0x0290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedLocalNotificationDelegate;              // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlatformGameInstance");
		return ptr;
	}



};

// Class Engine.BlueprintPlatformLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintPlatformLibrary");
		return ptr;
	}



	int STATIC_ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void STATIC_ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, const struct FString& ActivationEvent);
	int STATIC_ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FString& ActivationEvent);
	int STATIC_ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void STATIC_GetLaunchNotification(bool* NotificationLaunchedApp, struct FString* ActivationEvent, int* FireDate);
	TEnumAsByte<Engine_EScreenOrientation> STATIC_GetDeviceOrientation();
	void STATIC_ClearAllLocalNotifications();
	void STATIC_CancelLocalNotificationById(int NotificationId);
	void STATIC_CancelLocalNotification(const struct FString& ActivationEvent);
};

// Class Engine.BlueprintSetLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BlueprintSetLibrary");
		return ptr;
	}



	void STATIC_SetSetPropertyByName(class UObject* Object, const struct FName& propertyName);
	void STATIC_Set_Union();
	void STATIC_Set_ToArray(TArray<int>* result);
	void STATIC_Set_RemoveItems(TArray<int> Items);
	bool STATIC_Set_Remove(int Item);
	int STATIC_Set_Length();
	void STATIC_Set_Intersection();
	void STATIC_Set_Difference();
	bool STATIC_Set_Contains(int ItemToFind);
	void STATIC_Set_Clear();
	void STATIC_Set_AddItems(TArray<int> NewItems);
	void STATIC_Set_Add(int NewItem);
};

// Class Engine.BodySetup
// 0x0238 (FullSize[0x0268] - InheritedSize[0x0030])
class UBodySetup : public UObject
{
public:
	struct FKAggregateGeom                             AggGeom;                                                   // 0x0030(0x0058) (Edit, NativeAccessSpecifierPublic)
	struct FName                                       BoneName;                                                  // 0x0088(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EPhysicsType>                   PhysicsType;                                               // 0x0094(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysFullAnimWeight : 1;                                 // 0x0095(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConsiderForBounds : 1;                                    // 0x0095(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMeshCollideAll : 1;                                       // 0x0095(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDoubleSidedGeometry : 1;                                  // 0x0095(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                         // 0x0095(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSharedCookedData : 1;                                     // 0x0095(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateMirroredCollision : 1;                            // 0x0095(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportUVsAndFaceRemap : 1;                               // 0x0095(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8ZEE[0x1];                                     // 0x0096(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBodyCollisionResponse>         CollisionReponse;                                          // 0x0097(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionTraceFlag>            CollisionTraceFlag;                                        // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EDOZ[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UphysicalMaterial*                           PhysMaterial;                                              // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                     // 0x00A8(0x0010) (Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4MPN[0x78];                                    // 0x00B8(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               DefaultInstance;                                           // 0x0130(0x0118) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7U01[0x8];                                     // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     BuildScale3D;                                              // 0x0250(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SBZL[0xC];                                     // 0x025C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BodySetup");
		return ptr;
	}



};

// Class Engine.BoneMaskFilter
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                                // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BoneMaskFilter");
		return ptr;
	}



};

// Class Engine.BookmarkBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UBookmarkBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BookmarkBase");
		return ptr;
	}



};

// Class Engine.BookMark
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UBookMark : public UBookmarkBase
{
public:
	struct Fvector                                     location;                                                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    rotation;                                                  // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             HiddenLevels;                                              // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}



};

// Class Engine.BookMark2D
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UBookMark2D : public UBookmarkBase
{
public:
	float                                              Zoom2D;                                                    // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                                   location;                                                  // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P6IE[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BookMark2D");
		return ptr;
	}



};

// Class Engine.ReflectionCapture
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UReflectionCapture : public Uactor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                          // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ReflectionCapture");
		return ptr;
	}



};

// Class Engine.BoxReflectionCapture
// 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
class UBoxReflectionCapture : public UReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BoxReflectionCapture");
		return ptr;
	}



};

// Class Engine.ReflectionCaptureComponent
// 0x007C (FullSize[0x028C] - InheritedSize[0x0210])
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                    // 0x0210(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EReflectionSourceType                       ReflectionSourceType;                                      // 0x0218(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C890[0x7];                                     // 0x0219(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                Cubemap;                                                   // 0x0220(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceCubemapAngle;                                        // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              brightness;                                                // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              contributionFactor;                                        // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     CaptureOffset;                                             // 0x0234(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       MapBuildDataId;                                            // 0x0240(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9BWZ[0x3C];                                    // 0x0250(0x003C) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ReflectionCaptureComponent");
		return ptr;
	}



	void SetContributionFactor(float NewContributionFactor);
	void SetBrightness(float NewBrightness);
};

// Class Engine.BoxReflectionCaptureComponent
// 0x0014 (FullSize[0x02A0] - InheritedSize[0x028C])
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	unsigned char                                      UnknownData_15Y3[0x4];                                     // 0x028C(0x0004) Fix Super Size
	class UBoxComponent*                               PreviewInfluenceBox;                                       // 0x0290(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x0298(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BoxReflectionCaptureComponent");
		return ptr;
	}



};

// Class Engine.Breakpoint
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                              // 0x0030(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_MO14[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UEdGraphNode*                                Node;                                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bStepOnce : 1;                                             // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                       // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                              // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_QCZR[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Breakpoint");
		return ptr;
	}



};

// Class Engine.BrushBuilder
// 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                            // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ToolTip;                                                   // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      NotifyBadParams : 1;                                       // 0x0050(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0EX6[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct Fvector>                             Vertices;                                                  // 0x0058(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FBuilderPoly>                        Polys;                                                     // 0x0068(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       Layer;                                                     // 0x0078(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      MergeCoplanars : 1;                                        // 0x0084(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_NZBD[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BrushBuilder");
		return ptr;
	}



};

// Class Engine.BrushComponent
// 0x0018 (FullSize[0x0440] - InheritedSize[0x0428])
class UBrushComponent : public UprimitiveComponent
{
public:
	class UModel*                                      brush;                                                     // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BrushBodySetup;                                            // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5KHW[0x8];                                     // 0x0438(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}



};

// Class Engine.BrushShape
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class UBrushShape : public Ubrush
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.BrushShape");
		return ptr;
	}



};

// Class Engine.ButtonStyleAsset
// 0x02A8 (FullSize[0x02D8] - InheritedSize[0x0030])
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                               // 0x0030(0x02A8) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ButtonStyleAsset");
		return ptr;
	}



};

// Class Engine.CameraAnim
// 0x0580 (FullSize[0x05B0] - InheritedSize[0x0030])
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                         // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimLength;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fbox                                        BoundingBox;                                               // 0x003C(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bRelativeToInitialTransform : 1;                           // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRelativeToInitialFOV : 1;                                 // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3GPP[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseFOV;                                                   // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                        BasePostProcessSettings;                                   // 0x0060(0x0540) (NativeAccessSpecifierPublic)
	float                                              BasePostProcessBlendWeight;                                // 0x05A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EF1Y[0xC];                                     // 0x05A4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}



};

// Class Engine.CameraAnimInst
// 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                   // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpGroupInst*                            InterpGroupInst;                                           // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_0S39[0x18];                                    // 0x0040(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              playRate;                                                  // 0x0058(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IS8B[0x14];                                    // 0x005C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpTrackMove*                            MoveTrack;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackInstMove*                        MoveInst;                                                  // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECameraAnimPlaySpace>           PlaySpace;                                                 // 0x0080(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4V21[0x9F];                                    // 0x0081(0x009F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}



	void stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
};

// Class Engine.CameraBlockingVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class UCameraBlockingVolume : public Uvolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraBlockingVolume");
		return ptr;
	}



};

// Class Engine.CameraModifier
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                                // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExclusive : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MY9F[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      priority;                                                  // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4CYV[0x3];                                     // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPlayerCameraManager*                        CameraOwner;                                               // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaInTime;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaOutTime;                                              // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Alpha;                                                     // 0x0048(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_5J7L[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}



	bool IsDisabled();
	class Uactor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float deltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float deltaTime, const struct Fvector& ViewLocation, const struct FRotator& viewRotation, float FOV, struct Fvector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
};

// Class Engine.CameraModifier_CameraShake
// 0x0068 (FullSize[0x00B8] - InheritedSize[0x0050])
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FActiveCameraShakeInfo>              ActiveShakes;                                              // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UClass*, struct FPooledCameraShakes>    ExpiredPooledShakesMap;                                    // 0x0060(0x0050) (Protected, NativeAccessSpecifierProtected)
	float                                              SplitScreenShakeScale;                                     // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_OELB[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		return ptr;
	}



};

// Class Engine.CameraShake
// 0x0140 (FullSize[0x0170] - InheritedSize[0x0030])
class UCameraShake : public UObject
{
public:
	unsigned char                                      bSingleInstance : 1;                                       // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JRGH[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OscillationDuration;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OscillationBlendInTime;                                    // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OscillationBlendOutTime;                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FROscillator                                RotOscillation;                                            // 0x0040(0x0024) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVOscillator                                LocOscillation;                                            // 0x0064(0x0024) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFOscillator                                FOVOscillation;                                            // 0x0088(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                              AnimPlayRate;                                              // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimScale;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimBlendInTime;                                           // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimBlendOutTime;                                          // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAnimSegmentDuration;                                 // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                                 Anim;                                                      // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRandomAnimSegment : 1;                                    // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GX6E[0x17];                                    // 0x00B1(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPlayerCameraManager*                        CameraOwner;                                               // 0x00C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_C4ZW[0x88];                                    // 0x00D0(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShakeScale;                                                // 0x0158(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OscillatorTimeRemaining;                                   // 0x015C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnimInst*                             AnimInst;                                                  // 0x0160(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TRBO[0x8];                                     // 0x0168(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraShake");
		return ptr;
	}



	void ReceiveStopShake(bool bImmediately);
	void ReceivePlayShake(float scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float deltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV);
};

// Class Engine.CameraShakeSourceActor
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UCameraShakeSourceActor : public Uactor
{
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                                // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraShakeSourceActor");
		return ptr;
	}



};

// Class Engine.CameraShakeSourceComponent
// 0x0020 (FullSize[0x0230] - InheritedSize[0x0210])
class UCameraShakeSourceComponent : public USceneComponent
{
public:
	Engine_ECameraShakeAttenuation                     Attenuation;                                               // 0x0210(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5CSZ[0x3];                                     // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InnerAttenuationRadius;                                    // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OuterAttenuationRadius;                                    // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NMR4[0x4];                                     // 0x021C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      CameraShake;                                               // 0x0220(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoPlay;                                                 // 0x0228(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_486M[0x7];                                     // 0x0229(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CameraShakeSourceComponent");
		return ptr;
	}



	void StopAllCameraShakes(bool bImmediately);
	void PlayCameraShake(class UClass* InCameraShake);
	void Play();
	float GetAttenuationFactor(const struct Fvector& location);
};

// Class Engine.Canvas
// 0x02A0 (FullSize[0x02D0] - InheritedSize[0x0030])
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                      // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrgY;                                                      // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClipX;                                                     // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClipY;                                                     // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      DrawColor;                                                 // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCenterX : 1;                                              // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCenterY : 1;                                              // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoSmooth : 1;                                             // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JMZ0[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                sizeX;                                                     // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                sizeY;                                                     // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fplane                                      ColorModulate;                                             // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  GradientTexture0;                                          // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReporterGraph*                              ReporterGraph;                                             // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SXTZ[0x258];                                   // 0x0078(0x0258) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}



	struct FVector2D K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& scale);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);
	struct Fvector K2_Project(const struct Fvector& WorldLocation);
	void K2_DrawTriangle(class Utexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawTexture(class Utexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class Utexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UmaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawMaterial(class UmaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBorder(class Utexture* BorderTexture, class Utexture* BackgroundTexture, class Utexture* LeftBorderTexture, class Utexture* RightBorderTexture, class Utexture* TopBorderTexture, class Utexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct Fvector* WorldOrigin, struct Fvector* WorldDirection);
};

// Class Engine.TextureRenderTarget
// 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
class UTextureRenderTarget : public Utexture
{
public:
	float                                              TargetGamma;                                               // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XGU5[0x4];                                     // 0x00C4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}



};

// Class Engine.TextureRenderTarget2D
// 0x0028 (FullSize[0x00F0] - InheritedSize[0x00C8])
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                sizeX;                                                     // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                sizeY;                                                     // 0x00CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                ClearColor;                                                // 0x00D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x00E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x00E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00E2(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHDR : 1;                                                  // 0x00E2(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGPUSharedFlag : 1;                                        // 0x00E2(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureRenderTargetFormat>     RenderTargetFormat;                                        // 0x00E3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoGenerateMips : 1;                                     // 0x00E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureFilter>                 MipsSamplerFilter;                                         // 0x00E5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                MipsAddressU;                                              // 0x00E6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                MipsAddressV;                                              // 0x00E7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x00E8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GUQ7[0x7];                                     // 0x00E9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}



};

// Class Engine.CanvasRenderTarget2D
// 0x0020 (FullSize[0x0110] - InheritedSize[0x00F0])
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                                // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class Uworld>                       world;                                                     // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                   // 0x0108(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_N2VU[0x7];                                     // 0x0109(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CanvasRenderTarget2D");
		return ptr;
	}



	void UpdateResource();
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	class UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UObject* worldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height);
};

// Class Engine.ChaosPhysicalMaterial
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UChaosPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                  // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StaticFriction;                                            // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Restitution;                                               // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LinearEtherDrag;                                           // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngularEtherDrag;                                          // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SleepingLinearVelocityThreshold;                           // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SleepingAngularVelocityThreshold;                          // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A8RO[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ChaosPhysicalMaterial");
		return ptr;
	}



};

// Class Engine.CheckBoxStyleAsset
// 0x05E0 (FullSize[0x0610] - InheritedSize[0x0030])
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                             // 0x0030(0x05E0) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CheckBoxStyleAsset");
		return ptr;
	}



};

// Class Engine.ChildActorComponent
// 0x0040 (FullSize[0x0250] - InheritedSize[0x0210])
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                           // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class Uactor*                                      ChildActor;                                                // 0x0218(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class Uactor*                                      ChildActorTemplate;                                        // 0x0220(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bAlwaysRecreateOnRegister;                                 // 0x0228(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_0QU8[0x27];                                    // 0x0229(0x0027) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ChildActorComponent");
		return ptr;
	}



	void SetChildActorClass(class UClass* InClass);
};

// Class Engine.ChildConnection
// 0x0008 (FullSize[0x1A50] - InheritedSize[0x1A48])
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                    // 0x1A48(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}



};

// Class Engine.PlatformInterfaceBase
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                              // 0x0030(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlatformInterfaceBase");
		return ptr;
	}



};

// Class Engine.CloudStorageBase
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                           // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressDelegateCalls : 1;                                // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I3BD[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CloudStorageBase");
		return ptr;
	}



};

// Class Engine.CollisionProfile
// 0x0120 (FullSize[0x0168] - InheritedSize[0x0048])
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                  // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                   // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FCustomProfile>                      EditProfiles;                                              // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                         ProfileRedirects;                                          // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                 // 0x0088(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_0WSV[0xD0];                                    // 0x0098(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CollisionProfile");
		return ptr;
	}



};

// Class Engine.ComponentDelegateBinding
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                 // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ComponentDelegateBinding");
		return ptr;
	}



};

// Class Engine.CurveTable
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData_R4TM[0x78];                                    // 0x0030(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveTable");
		return ptr;
	}



};

// Class Engine.CompositeCurveTable
// 0x0028 (FullSize[0x00D0] - InheritedSize[0x00A8])
class UCompositeCurveTable : public UCurveTable
{
public:
	TArray<class UCurveTable*>                         ParentTables;                                              // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCurveTable*>                         OldParentTables;                                           // 0x00B8(0x0010) (ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_5T92[0x8];                                     // 0x00C8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CompositeCurveTable");
		return ptr;
	}



};

// Class Engine.DataTable
// 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                 // 0x0030(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8762[0x50];                                    // 0x0038(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bStripFromClientBuilds : 1;                                // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreExtraFields : 1;                                    // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMissingFields : 1;                                  // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RNTV[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ImportKeyField;                                            // 0x0090(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0TLS[0x30];                                    // 0x00A0(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DataTable");
		return ptr;
	}



};

// Class Engine.CompositeDataTable
// 0x0028 (FullSize[0x00F8] - InheritedSize[0x00D0])
class UCompositeDataTable : public UDataTable
{
public:
	TArray<class UDataTable*>                          ParentTables;                                              // 0x00D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDataTable*>                          OldParentTables;                                           // 0x00E0(0x0010) (ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_BD9Y[0x8];                                     // 0x00F0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CompositeDataTable");
		return ptr;
	}



};

// Class Engine.Console
// 0x0110 (FullSize[0x0140] - InheritedSize[0x0030])
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData_4GGW[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULocalPlayer*                                ConsoleTargetPlayer;                                       // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture_Black;                                      // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  DefaultTexture_White;                                      // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GVKE[0x18];                                    // 0x0058(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             HistoryBuffer;                                             // 0x0070(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_89RK[0xC0];                                    // 0x0080(0x00C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Console");
		return ptr;
	}



};

// Class Engine.ControlChannel
// 0x0018 (FullSize[0x0090] - InheritedSize[0x0078])
class UControlChannel : public Uchannel
{
public:
	unsigned char                                      UnknownData_BRBD[0x18];                                    // 0x0078(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}



};

// Class Engine.StreamingSettings
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                             // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                               // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_PM34[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TimeLimitExceededMultiplier;                               // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TimeLimitExceededMinTime;                                  // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MinBulkDataSizeForAsyncLoading;                            // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                           // 0x0058(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                          // 0x0058(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_JQNH[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AsyncLoadingTimeLimit;                                     // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PriorityAsyncLoadingExtraTime;                             // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LevelStreamingActorsUpdateTimeLimit;                       // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;               // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LevelStreamingComponentsRegistrationGranularity;           // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LevelStreamingUnregisterComponentsTimeLimit;               // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LevelStreamingComponentsUnregistrationGranularity;         // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      FlushStreamingOnExit : 1;                                  // 0x0078(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      EventDrivenLoaderEnabled : 1;                              // 0x0078(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_L9TN[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StreamingSettings");
		return ptr;
	}



};

// Class Engine.GarbageCollectionSettings
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                      // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      FlushStreamingOnGC : 1;                                    // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      AllowParallelGC : 1;                                       // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      IncrementalBeginDestroyEnabled : 1;                        // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      MultithreadedDestructionEnabled : 1;                       // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      CreateGCClusters : 1;                                      // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      AssetClusteringEnabled : 1;                                // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      ActorClusteringEnabled : 1;                                // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      BlueprintClusteringEnabled : 1;                            // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UseDisregardForGCOnDedicatedServers : 1;                   // 0x004D(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_44SY[0x2];                                     // 0x004E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MinGCClusterSize;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NumRetriesBeforeForcingGC;                                 // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxObjectsNotConsideredByGC;                               // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SizeOfPermanentObjectPool;                                 // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxObjectsInGame;                                          // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxObjectsInEditor;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GarbageCollectionSettings");
		return ptr;
	}



};

// Class Engine.CullDistanceVolume
// 0x0018 (FullSize[0x0280] - InheritedSize[0x0268])
class UCullDistanceVolume : public Uvolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                             // 0x0268(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x0278(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUnbound : 1;                                              // 0x0278(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MMWN[0x7];                                     // 0x0279(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}



};

// Class Engine.CurveBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData_W14R[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveBase");
		return ptr;
	}



	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
};

// Class Engine.CurveEdPresetCurve
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UCurveEdPresetCurve : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}



};

// Class Engine.CurveFloat
// 0x0088 (FullSize[0x00C0] - InheritedSize[0x0038])
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                                // 0x0038(0x0080) (NativeAccessSpecifierPublic)
	bool                                               bIsEventCurve;                                             // 0x00B8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SHXE[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveFloat");
		return ptr;
	}



	float GetFloatValue(float InTime);
};

// Class Engine.CurveLinearColor
// 0x0220 (FullSize[0x0258] - InheritedSize[0x0038])
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                          // 0x0038(0x0200) (NativeAccessSpecifierPublic)
	float                                              AdjustHue;                                                 // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustSaturation;                                          // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustBrightness;                                          // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustBrightnessCurve;                                     // 0x0244(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustVibrance;                                            // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustMinAlpha;                                            // 0x024C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustMaxAlpha;                                            // 0x0250(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UMJS[0x4];                                     // 0x0254(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveLinearColor");
		return ptr;
	}



	struct FLinearColor GetLinearColorValue(float InTime);
	struct FLinearColor GetClampedLinearColorValue(float InTime);
};

// Class Engine.Texture2D
// 0x0030 (FullSize[0x00F0] - InheritedSize[0x00C0])
class UTexture2D : public Utexture
{
public:
	int                                                LevelIndex;                                                // 0x00C0(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FirstResourceMemMip;                                       // 0x00C4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                          // 0x00C8(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x00C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x00CA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NMNZ[0x1];                                     // 0x00CB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FIntPoint                                   ImportedSize;                                              // 0x00CC(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HD29[0x1C];                                    // 0x00D4(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}



	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
};

// Class Engine.CurveLinearColorAtlas
// 0x0018 (FullSize[0x0108] - InheritedSize[0x00F0])
class UCurveLinearColorAtlas : public UTexture2D
{
public:
	uint32_t                                           TextureSize;                                               // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QDQG[0x4];                                     // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCurveLinearColor*>                   GradientCurves;                                            // 0x00F8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveLinearColorAtlas");
		return ptr;
	}



	bool GetCurvePosition(class UCurveLinearColor* InCurve, float* position);
};

// Class Engine.CurveSourceInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UCurveSourceInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveSourceInterface");
		return ptr;
	}



	float GetCurveValue(const struct FName& CurveName);
	void GetCurves(TArray<struct FNamedCurveValue>* OutValues);
	struct FName GetBindingName();
};

// Class Engine.CurveVector
// 0x0180 (FullSize[0x01B8] - InheritedSize[0x0038])
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                          // 0x0038(0x0180) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.CurveVector");
		return ptr;
	}



	struct Fvector GetVectorValue(float InTime);
};

// Class Engine.DamageType
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                                        // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScaleMomentumByMass : 1;                                  // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRadialDamageVelChange : 1;                                // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LFAX[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamageImpulse;                                             // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestructibleImpulse;                                       // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestructibleDamageSpreadScale;                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageFalloff;                                             // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RM7A[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}



};

// Class Engine.DataTableFunctionLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DataTableFunctionLibrary");
		return ptr;
	}



	void STATIC_GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames);
	bool STATIC_GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow);
	TArray<struct FString> STATIC_GetDataTableColumnAsString(class UDataTable* DataTable, const struct FName& propertyName);
	void STATIC_EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<Engine_EEvaluateCurveTableResult>* OutResult, float* OutXY, const struct FString& ContextString);
	bool STATIC_DoesDataTableRowExist(class UDataTable* Table, const struct FName& RowName);
};

// Class Engine.DebugCameraControllerSettings
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UDebugCameraControllerSettings : public UDeveloperSettings
{
public:
	TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                            // 0x0048(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DebugCameraControllerSettings");
		return ptr;
	}



};

// Class Engine.DebugCameraHUD
// 0x0000 (FullSize[0x0320] - InheritedSize[0x0320])
class UDebugCameraHUD : public UHud
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DebugCameraHUD");
		return ptr;
	}



};

// Class Engine.DebugDrawService
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DebugDrawService");
		return ptr;
	}



};

// Class Engine.DecalComponent
// 0x0040 (FullSize[0x0250] - InheritedSize[0x0210])
class UDecalComponent : public USceneComponent
{
public:
	class UmaterialInterface*                          decalMaterial;                                             // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SortOrder;                                                 // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeScreenSize;                                            // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeStartDelay;                                            // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeDuration;                                              // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeInDuration;                                            // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeInStartDelay;                                          // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDestroyOwnerAfterFade : 1;                                // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_97FT[0x3];                                     // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     decalSize;                                                 // 0x0234(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_95B2[0x10];                                    // 0x0240(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}



	void SetSortOrder(int Value);
	void SetFadeScreenSize(float NewFadeScreenSize);
	void SetFadeOut(float StartDelay, float duration, bool DestroyOwnerAfterFade);
	void SetFadeIn(float StartDelay, float Duaration);
	void SetDecalMaterial(class UmaterialInterface* NewDecalMaterial);
	float GetFadeStartDelay();
	float GetFadeInStartDelay();
	float GetFadeInDuration();
	float GetFadeDuration();
	class UmaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};

// Class Engine.PhysicsVolume
// 0x0010 (FullSize[0x0278] - InheritedSize[0x0268])
class UPhysicsVolume : public Uvolume
{
public:
	float                                              TerminalVelocity;                                          // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                priority;                                                  // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FluidFriction;                                             // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWaterVolume : 1;                                          // 0x0274(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPhysicsOnContact : 1;                                     // 0x0274(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QF3O[0x3];                                     // 0x0275(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}



};

// Class Engine.DefaultPhysicsVolume
// 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
class UDefaultPhysicsVolume : public UPhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}



};

// Class Engine.DemoNetConnection
// 0x0070 (FullSize[0x1AB8] - InheritedSize[0x1A48])
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData_LVAA[0x70];                                    // 0x1A48(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DemoNetConnection");
		return ptr;
	}



};

// Class Engine.DemoNetDriver
// 0x09D8 (FullSize[0x1138] - InheritedSize[0x0760])
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData_OM3D[0xF8];                                    // 0x0760(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                                  // 0x0858(0x0050) (Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NYXB[0x3C4];                                   // 0x08A8(0x03C4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CheckpointSaveMaxMSPerFrame;                               // 0x0C6C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_K7V8[0x30];                                    // 0x0C70(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FMulticastRecordOptions>             MulticastRecordOptions;                                    // 0x0CA0(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_B0TN[0x50];                                    // 0x0CB0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsLocalReplay;                                            // 0x0D00(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ARYW[0x7];                                     // 0x0D01(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UplayerController*>                   SpectatorControllers;                                      // 0x0D08(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_LEHS[0x420];                                   // 0x0D18(0x0420) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DemoNetDriver");
		return ptr;
	}



};

// Class Engine.PendingNetGame
// 0x0098 (FullSize[0x00C8] - InheritedSize[0x0030])
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData_4UXF[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetDriver*                                  NetDriver;                                                 // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDemoNetDriver*                              DemoNetDriver;                                             // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9KVW[0x80];                                    // 0x0048(0x0080) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PendingNetGame");
		return ptr;
	}



};

// Class Engine.DemoPendingNetGame
// 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
class UDemoPendingNetGame : public UPendingNetGame
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DemoPendingNetGame");
		return ptr;
	}



};

// Class Engine.DestructibleInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UDestructibleInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DestructibleInterface");
		return ptr;
	}



};

// Class Engine.TextureLODSettings
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                          // 0x0030(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextureLODSettings");
		return ptr;
	}



};

// Class Engine.DeviceProfile
// 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
class UDeviceProfile : public UTextureLODSettings
{
public:
	struct FString                                     DeviceType;                                                // 0x0040(0x0010) (Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     BaseProfileName;                                           // 0x0050(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     Parent;                                                    // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MOOK[0x18];                                    // 0x0068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             CVars;                                                     // 0x0080(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WL0U[0x10];                                    // 0x0090(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DeviceProfile");
		return ptr;
	}



};

// Class Engine.DeviceProfileManager
// 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                  // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q8TH[0x78];                                    // 0x0040(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DeviceProfileManager");
		return ptr;
	}



};

// Class Engine.DialogueSoundWaveProxy
// 0x0018 (FullSize[0x0180] - InheritedSize[0x0168])
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData_AMDV[0x18];                                    // 0x0168(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DialogueSoundWaveProxy");
		return ptr;
	}



};

// Class Engine.DialogueVoice
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<Engine_EGrammaticalGender>             Gender;                                                    // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EGrammaticalNumber>             Plurality;                                                 // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VLQ3[0x2];                                     // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       LocalizationGUID;                                          // 0x0034(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3LKZ[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DialogueVoice");
		return ptr;
	}



};

// Class Engine.DialogueWave
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                               // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverride_SubtitleOverride : 1;                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VVEH[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0038(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     SubtitleOverride;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                           // 0x0058(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       LocalizationGUID;                                          // 0x0068(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DialogueWave");
		return ptr;
	}



};

// Class Engine.light
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class Ulight : public Uactor
{
public:
	class ULightComponent*                             LightComponent;                                            // 0x0230(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x0238(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LMUZ[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.light");
		return ptr;
	}



	void ToggleEnabled();
	void SetLightFunctionScale(const struct Fvector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UmaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool isEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
};

// Class Engine.DirectionalLight
// 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
class UDirectionalLight : public Ulight
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}



};

// Class Engine.DirectionalLightComponent
// 0x0094 (FullSize[0x0420] - InheritedSize[0x038C])
class UDirectionalLightComponent : public ULightComponent
{
public:
	unsigned char                                      UnknownData_42EP[0x4];                                     // 0x038C(0x0004) Fix Super Size
	float                                              OcclusionMaskDarkness;                                     // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionDepthRange;                                       // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     LightShaftOverrideDirection;                               // 0x0398(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WholeSceneDynamicShadowRadius;                             // 0x03A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DynamicShadowDistanceMovableLight;                         // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DynamicShadowDistanceStationaryLight;                      // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DynamicShadowCascades;                                     // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CascadeDistributionExponent;                               // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CascadeTransitionFraction;                                 // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowDistanceFadeoutFraction;                             // 0x03BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                     // 0x03C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8H5N[0x3];                                     // 0x03C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                FarShadowCascadeCount;                                     // 0x03C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FarShadowDistance;                                         // 0x03C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldShadowDistance;                               // 0x03CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightSourceAngle;                                          // 0x03D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightSourceSoftAngle;                                      // 0x03D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TraceDistance;                                             // 0x03D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                         // 0x03DC(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bCastModulatedShadows : 1;                                 // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCachedDirectionalMovableLight : 1;                        // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_QNF3[0x3];                                     // 0x03ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     OriginOfCachedShadowMap;                                   // 0x03F0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WidthOfCachedShadowMap;                                    // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FractionOfOriginHeightToShiftBounds;                       // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      ModulatedShadowColor;                                      // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowAmount;                                              // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                             // 0x040C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QRFA[0x3];                                     // 0x040D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                AtmosphereSunLightIndex;                                   // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DZZB[0xC];                                     // 0x0414(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}



	void SetShadowDistanceFadeoutFraction(float newValue);
	void SetShadowAmount(float newValue);
	void SetOcclusionMaskDarkness(float newValue);
	void SetLightShaftOverrideDirection(const struct Fvector& newValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float newValue);
	void SetDynamicShadowDistanceMovableLight(float newValue);
	void SetDynamicShadowCascades(int newValue);
	void SetCascadeTransitionFraction(float newValue);
	void SetCascadeDistributionExponent(float newValue);
	void SetCachedDirectionalMovableLightBounds(const struct Fvector& NewOriginOfCachedShadowMap, float NewWidthOfCachedShadowMap);
};

// Class Engine.Distribution
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData_HTID[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Distribution");
		return ptr;
	}



};

// Class Engine.DistributionFloat
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N3CV : 1;                                      // 0x0038(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bBakedDataSuccesfully : 1;                                 // 0x0038(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_5VWG[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionFloat");
		return ptr;
	}



};

// Class Engine.DistributionFloatConstant
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YWJF[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}



};

// Class Engine.DistributionFloatConstantCurve
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                             // 0x0040(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}



};

// Class Engine.DistributionFloatParameterBase
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       parameterName;                                             // 0x0048(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinInput;                                                  // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxInput;                                                  // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinOutput;                                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOutput;                                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamMode;                                                 // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G1JX[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}



};

// Class Engine.DistributionFloatParticleParameter
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}



};

// Class Engine.DistributionFloatUniform
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              min;                                                       // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              max;                                                       // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}



};

// Class Engine.DistributionFloatUniformCurve
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                             // 0x0040(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}



};

// Class Engine.DistributionVector
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsDirty : 1;                                              // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBakedDataSuccesfully : 1;                                 // 0x0038(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_JROJ[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionVector");
		return ptr;
	}



};

// Class Engine.DistributionVectorConstant
// 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct Fvector                                     Constant;                                                  // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes : 1;                                             // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZVWA[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PIZE[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}



};

// Class Engine.DistributionVectorConstantCurve
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                             // 0x0040(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes : 1;                                             // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FKS5[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_09E3[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}



};

// Class Engine.DistributionVectorParameterBase
// 0x0040 (FullSize[0x0098] - InheritedSize[0x0058])
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       parameterName;                                             // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     MinInput;                                                  // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     MaxInput;                                                  // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     MinOutput;                                                 // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     MaxOutput;                                                 // 0x0088(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamModes[0x3];                                           // 0x0094(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IAB6[0x1];                                     // 0x0097(0x0001) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}



};

// Class Engine.DistributionVectorParticleParameter
// 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}



};

// Class Engine.DistributionVectorUniform
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct Fvector                                     max;                                                       // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     min;                                                       // 0x004C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes : 1;                                             // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7LLQ[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x005D(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseExtremes : 1;                                          // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2K6V[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}



};

// Class Engine.DistributionVectorUniformCurve
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                             // 0x0040(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes1 : 1;                                            // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockAxes2 : 1;                                            // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UOLN[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes[0x2];                                           // 0x005C(0x0002) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x005E(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GMQD[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseExtremes : 1;                                          // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AIZ0[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}



};

// Class Engine.DocumentationActor
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UDocumentationActor : public Uactor
{
public:
	unsigned char                                      UnknownData_SWIP[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DocumentationActor");
		return ptr;
	}



};

// Class Engine.DPICustomScalingRule
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UDPICustomScalingRule : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DPICustomScalingRule");
		return ptr;
	}



};

// Class Engine.DrawFrustumComponent
// 0x0028 (FullSize[0x0450] - InheritedSize[0x0428])
class UDrawFrustumComponent : public UprimitiveComponent
{
public:
	unsigned char                                      UnknownData_XJFH[0x4];                                     // 0x0428(0x0004) Fix Super Size
	float                                              FrustumAngle;                                              // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrustumAspectRatio;                                        // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrustumStartDist;                                          // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrustumEndDist;                                            // 0x0438(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QSLN[0x4];                                     // 0x043C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Utexture*                                    texture;                                                   // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KFIE[0x8];                                     // 0x0448(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}



};

// Class Engine.DrawSphereComponent
// 0x0000 (FullSize[0x0450] - InheritedSize[0x0450])
class UDrawSphereComponent : public USphereComponent
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}



};

// Class Engine.EdGraph
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEdGraphNode*>                        Nodes;                                                     // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEditable : 1;                                             // 0x0048(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowDeletion : 1;                                        // 0x0048(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowRenaming : 1;                                        // 0x0048(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DZ8D[0x1F];                                    // 0x0049(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EdGraph");
		return ptr;
	}



};

// Class Engine.GraphNodeContextMenuContext
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UGraphNodeContextMenuContext : public UObject
{
public:
	class UBlueprint*                                  Blueprint;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraph*                                    Graph;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphNode*                                Node;                                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BC25[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsDebugging;                                              // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AVOO[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GraphNodeContextMenuContext");
		return ptr;
	}



};

// Class Engine.EdGraphNode
// 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
class UEdGraphNode : public UObject
{
public:
	unsigned char                                      UnknownData_CRRC[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                            // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NodePosX;                                                  // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NodePosY;                                                  // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NodeWidth;                                                 // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NodeHeight;                                                // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ENodeAdvancedPins>              AdvancedPinDisplay;                                        // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ENodeEnabledState                           EnabledState;                                              // 0x0061(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_H3YV[0x1];                                     // 0x0062(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_YP9F : 1;                                      // 0x0063(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDisplayAsDisabled : 1;                                    // 0x0063(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bUserSetEnabledState : 1;                                  // 0x0063(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_EAKP : 1;                                      // 0x0063(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsNodeEnabled : 1;                                        // 0x0063(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_6LAW : 1;                                      // 0x0063(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHasCompilerMessage : 1;                                   // 0x0063(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FQ05[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NodeComment;                                               // 0x0068(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ErrorType;                                                 // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H9MQ[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ErrorMsg;                                                  // 0x0080(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       NodeGuid;                                                  // 0x0090(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EdGraphNode");
		return ptr;
	}



};

// Class Engine.EdGraphNode_Documentation
// 0x0020 (FullSize[0x00C0] - InheritedSize[0x00A0])
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                                      // 0x00A0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     Excerpt;                                                   // 0x00B0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EdGraphNode_Documentation");
		return ptr;
	}



};

// Class Engine.EdGraphPin_Deprecated
// 0x0108 (FullSize[0x0138] - InheritedSize[0x0030])
class UEdGraphPin_Deprecated : public UObject
{
public:
	struct FString                                     PinName;                                                   // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PinToolTip;                                                // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EEdGraphPinDirection>           direction;                                                 // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I78Z[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FEdGraphPinType                             PinType;                                                   // 0x0058(0x0070) (NoDestructor, NativeAccessSpecifierPublic)
	struct FString                                     DefaultValue;                                              // 0x00C8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     AutogeneratedDefaultValue;                                 // 0x00D8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     DefaultObject;                                             // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FText                                       DefaultTextValue;                                          // 0x00F0(0x0018) (NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                  // 0x0108(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                   // 0x0118(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                      ParentPin;                                                 // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                            // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EdGraphPin_Deprecated");
		return ptr;
	}



};

// Class Engine.EdGraphSchema
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UEdGraphSchema : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EdGraphSchema");
		return ptr;
	}



};

// Class Engine.Emitter
// 0x0050 (FullSize[0x0280] - InheritedSize[0x0230])
class UEmitter : public Uactor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                   // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bDestroyOnSystemFinish : 1;                                // 0x0238(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPostUpdateTickGroup : 1;                                  // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCurrentlyActive : 1;                                      // 0x0238(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NGZK[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x0270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}



	void ToggleActive();
	void SetVectorParameter(const struct FName& parameterName, const struct Fvector& param);
	void SetTemplate(class UparticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& parameterName, class UmaterialInterface* param);
	void SetFloatParameter(const struct FName& parameterName, float param);
	void SetColorParameter(const struct FName& parameterName, const struct FLinearColor& param);
	void SetActorParameter(const struct FName& parameterName, class Uactor* param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool isActive();
	void Deactivate();
	void activate();
};

// Class Engine.EmitterCameraLensEffectBase
// 0x0070 (FullSize[0x02F0] - InheritedSize[0x0280])
class UEmitterCameraLensEffectBase : public UEmitter
{
public:
	class UparticleSystem*                             PS_CameraEffect;                                           // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UparticleSystem*                             PS_CameraEffectNonExtremeContent;                          // 0x0288(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerCameraManager*                        BaseCamera;                                                // 0x0290(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_0W4H[0x8];                                     // 0x0298(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTransform                                  RelativeTransform;                                         // 0x02A0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              BaseFOV;                                                   // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowMultipleInstances : 1;                               // 0x02D4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bResetWhenRetriggered : 1;                                 // 0x02D4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QHN0[0x3];                                     // 0x02D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              EmittersToTreatAsSame;                                     // 0x02D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistFromCamera;                                            // 0x02E8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_QKJG[0x4];                                     // 0x02EC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		return ptr;
	}



};

// Class Engine.ViewModeUtils
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UViewModeUtils : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ViewModeUtils");
		return ptr;
	}



};

// Class Engine.EngineBaseTypes
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UEngineBaseTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EngineBaseTypes");
		return ptr;
	}



};

// Class Engine.EngineHandlerComponentFactory
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EngineHandlerComponentFactory");
		return ptr;
	}



};

// Class Engine.LocalMessage
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class ULocalMessage : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}



};

// Class Engine.EngineMessage
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                        // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     MaxedOutMessage;                                           // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     EnteredMessage;                                            // 0x0050(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LeftMessage;                                               // 0x0060(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     GlobalNameChange;                                          // 0x0070(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     SpecEnteredMessage;                                        // 0x0080(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     NewPlayerMessage;                                          // 0x0090(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     NewSpecMessage;                                            // 0x00A0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EngineMessage");
		return ptr;
	}



};

// Class Engine.EngineTypes
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UEngineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EngineTypes");
		return ptr;
	}



};

// Class Engine.ExponentialHeightFog
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class UExponentialHeightFog : public UInfo
{
public:
	class UExponentialHeightFogComponent*              component;                                                 // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bEnabled : 1;                                              // 0x0238(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V0U2[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ExponentialHeightFog");
		return ptr;
	}



	void OnRep_bEnabled();
};

// Class Engine.ExponentialHeightFogComponent
// 0x00C0 (FullSize[0x02D0] - InheritedSize[0x0210])
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                              FogDensity;                                                // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FogHeightFalloff;                                          // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData                   SecondFogData;                                             // 0x0218(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                                FogInscatteringColor;                                      // 0x0224(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8JED[0x4];                                     // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                InscatteringColorCubemap;                                  // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InscatteringColorCubemapAngle;                             // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                InscatteringTextureTint;                                   // 0x0244(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FullyDirectionalInscatteringColorDistance;                 // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NonDirectionalInscatteringColorDistance;                   // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DirectionalInscatteringExponent;                           // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DirectionalInscatteringStartDistance;                      // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                DirectionalInscatteringColor;                              // 0x0264(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FogMaxOpacity;                                             // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartDistance;                                             // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FogCutoffDistance;                                         // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableVolumetricFog;                                      // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZX51[0x3];                                     // 0x0281(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VolumetricFogScatteringDistribution;                       // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      VolumetricFogAlbedo;                                       // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                VolumetricFogEmissive;                                     // 0x028C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricFogExtinctionScale;                              // 0x029C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricFogDistance;                                     // 0x02A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumetricFogStaticLightingScatteringIntensity;            // 0x02A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverrideLightColorsWithFogInscatteringColors;             // 0x02A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LS43[0x7];                                     // 0x02A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FHeightFogGradientEntry>             FogGradient;                                               // 0x02B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceUntilFlatFog;                                      // 0x02C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceUntilNoFog;                                        // 0x02C4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_8YC2[0x8];                                     // 0x02C8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		return ptr;
	}



	void SetVolumetricFogScatteringDistribution(float newValue);
	void SetVolumetricFogExtinctionScale(float newValue);
	void SetVolumetricFogEmissive(const struct FLinearColor& newValue);
	void SetVolumetricFogDistance(float newValue);
	void SetVolumetricFogAlbedo(const struct Fcolor& newValue);
	void SetVolumetricFog(bool bNewValue);
	void SetStartDistance(float Value);
	void SetNonDirectionalInscatteringColorDistance(float Value);
	void SetInscatteringTextureTint(const struct FLinearColor& Value);
	void SetInscatteringColorCubemapAngle(float Value);
	void SetInscatteringColorCubemap(class UTextureCube* Value);
	void SetFullyDirectionalInscatteringColorDistance(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFogCutoffDistance(float Value);
	void SetDistanceUntilFlatFog(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
};

// Class Engine.Exporter
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                            // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     ExportRootScope;                                           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             FormatExtension;                                           // 0x0040(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             FormatDescription;                                         // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PreferredFormatIndex;                                      // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TextIndent;                                                // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bText : 1;                                                 // 0x0068(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelectedOnly : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceFileOperations : 1;                                  // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CM77[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAssetExportTask*                            ExportTask;                                                // 0x0070(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_00JQ[0x8];                                     // 0x0078(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Exporter");
		return ptr;
	}



	bool ScriptRunAssetExportTask(class UAssetExportTask* Task);
	bool STATIC_RunAssetExportTasks(TArray<class UAssetExportTask*> ExportTasks);
	bool STATIC_RunAssetExportTask(class UAssetExportTask* Task);
};

// Class Engine.FloatingPawnMovement
// 0x0018 (FullSize[0x0160] - InheritedSize[0x0148])
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                  // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Acceleration;                                              // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Deceleration;                                              // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TurningBoost;                                              // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPositionCorrected : 1;                                    // 0x0158(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_65XM[0x7];                                     // 0x0159(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.FloatingPawnMovement");
		return ptr;
	}



};

// Class Engine.Font
// 0x01B0 (FullSize[0x01E0] - InheritedSize[0x0030])
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData_QYBA[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EFontCacheType                              FontCacheType;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ADC5[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FFontCharacter>                      characters;                                                // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                          Textures;                                                  // 0x0050(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                IsRemapped;                                                // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmScale;                                                   // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Ascent;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Descent;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Leading;                                                   // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Kerning;                                                   // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontImportOptionsData                      ImportOptions;                                             // 0x0078(0x00B0) (Edit, NativeAccessSpecifierPublic)
	int                                                NumCharacters;                                             // 0x0128(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MVG8[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        MaxCharHeight;                                             // 0x0130(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScalingFactor;                                             // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LegacyFontSize;                                            // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       LegacyFontName;                                            // 0x0148(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LOW3[0x4];                                     // 0x0154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCompositeFont                              CompositeFont;                                             // 0x0158(0x0038) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7CQC[0x50];                                    // 0x0190(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Font");
		return ptr;
	}



};

// Class Engine.FontFace
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UFontFace : public UObject
{
public:
	unsigned char                                      UnknownData_C6XO[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SourceFilename;                                            // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	SlateCore_EFontHinting                             Hinting;                                                   // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	SlateCore_EFontLoadingPolicy                       LoadingPolicy;                                             // 0x0049(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	SlateCore_EFontLayoutMethod                        LayoutMethod;                                              // 0x004A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3GS4[0x15];                                    // 0x004B(0x0015) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.FontFace");
		return ptr;
	}



};

// Class Engine.FontImportOptions
// 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      data;                                                      // 0x0030(0x00B0) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}



};

// Class Engine.ForceFeedbackAttenuation
// 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings           Attenuation;                                               // 0x0030(0x00B0) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ForceFeedbackAttenuation");
		return ptr;
	}



};

// Class Engine.ForceFeedbackComponent
// 0x00E0 (FullSize[0x02F0] - InheritedSize[0x0210])
class UForceFeedbackComponent : public USceneComponent
{
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                       // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDestroy : 1;                                          // 0x0218(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                               // 0x0218(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0218(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KTN6[0x3];                                     // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IntensityMultiplier;                                       // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                       // 0x0220(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FForceFeedbackAttenuationSettings           AttenuationOverrides;                                      // 0x0228(0x00B0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnForceFeedbackFinished;                                   // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HUPH[0x8];                                     // 0x02E8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ForceFeedbackComponent");
		return ptr;
	}



	void stop();
	void SetIntensityMultiplier(float NewIntensityMultiplier);
	void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);
	void Play(float startTime);
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings);
	void AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings);
};

// Class Engine.ForceFeedbackEffect
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                            // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              duration;                                                  // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z6UU[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ForceFeedbackEffect");
		return ptr;
	}



};

// Class Engine.GameNetworkManager
// 0x00B0 (FullSize[0x02E0] - InheritedSize[0x0230])
class UGameNetworkManager : public UInfo
{
public:
	float                                              BadPacketLossThreshold;                                    // 0x0230(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SeverePacketLossThreshold;                                 // 0x0234(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BadPingThreshold;                                          // 0x0238(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SeverePingThreshold;                                       // 0x023C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AdjustedNetSpeed;                                          // 0x0240(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastNetSpeedUpdateTime;                                    // 0x0244(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TotalNetBandwidth;                                         // 0x0248(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinDynamicBandwidth;                                       // 0x024C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDynamicBandwidth;                                       // 0x0250(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                             // 0x0254(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                             // 0x0254(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9J9H[0x3];                                     // 0x0255(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StandbyRxCheatTime;                                        // 0x0258(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StandbyTxCheatTime;                                        // 0x025C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PercentMissingForRxStandby;                                // 0x0260(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PercentMissingForTxStandby;                                // 0x0264(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PercentForBadPing;                                         // 0x0268(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JoinInProgressStandbyWaitTime;                             // 0x026C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveRepSize;                                               // 0x0270(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MAXPOSITIONERRORSQUARED;                                   // 0x0274(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MAXNEARZEROVELOCITYSQUARED;                                // 0x0278(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CLIENTADJUSTUPDATECOST;                                    // 0x027C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MAXCLIENTUPDATEINTERVAL;                                   // 0x0280(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxClientForcedUpdateDuration;                             // 0x0284(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerForcedUpdateHitchThreshold;                          // 0x0288(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ServerForcedUpdateHitchCooldown;                           // 0x028C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxMoveDeltaTime;                                          // 0x0290(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxClientSmoothingDeltaTime;                               // 0x0294(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetSendMoveDeltaTime;                                // 0x0298(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetSendMoveDeltaTimeThrottled;                       // 0x029C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetSendMoveDeltaTimeStationary;                      // 0x02A0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ClientNetSendMoveThrottleAtNetSpeed;                       // 0x02A4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ClientNetSendMoveThrottleOverPlayerCount;                  // 0x02A8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ClientAuthorativePosition;                                 // 0x02AC(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W6YF[0x3];                                     // 0x02AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ClientErrorUpdateRateLimit;                                // 0x02B0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetCamUpdateDeltaTime;                               // 0x02B4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientNetCamUpdatePositionLimit;                           // 0x02B8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMovementTimeDiscrepancyDetection;                         // 0x02BC(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMovementTimeDiscrepancyResolution;                        // 0x02BD(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VI7O[0x2];                                     // 0x02BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                      // 0x02C0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                      // 0x02C4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTimeDiscrepancyResolutionRate;                     // 0x02C8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTimeDiscrepancyDriftAllowance;                     // 0x02CC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution;  // 0x02D0(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDistanceBasedRelevancy;                                // 0x02D1(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_33FO[0xE];                                     // 0x02D2(0x000E) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameNetworkManager");
		return ptr;
	}



};

// Class Engine.GameplayStatics
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GameplayStatics");
		return ptr;
	}



	void STATIC_UnloadStreamLevel(class UObject* worldContextObject, const struct FName& levelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	bool STATIC_SuggestProjectileVelocity_CustomArc(class UObject* worldContextObject, struct Fvector* OutLaunchVelocity, const struct Fvector& StartPos, const struct Fvector& EndPos, float OverrideGravityZ, float ArcParam);
	class UAudioComponent* STATIC_SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct Fvector& location, const struct FRotator& rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	class UAudioComponent* STATIC_SpawnSoundAtLocation(class UObject* worldContextObject, class USoundBase* Sound, const struct Fvector& location, const struct FRotator& rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	class UAudioComponent* STATIC_SpawnSound2D(class UObject* worldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	class UObject* STATIC_SpawnObject(class UClass* ObjectClass, class UObject* outer);
	class UForceFeedbackComponent* STATIC_SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct Fvector& location, const struct FRotator& rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float startTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UForceFeedbackComponent* STATIC_SpawnForceFeedbackAtLocation(class UObject* worldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct Fvector& location, const struct FRotator& rotation, bool bLooping, float IntensityMultiplier, float startTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UParticleSystemComponent* STATIC_SpawnEmitterAttached(class UparticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct Fvector& location, const struct FRotator& rotation, const struct Fvector& scale, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bAutoDestroy, Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivate);
	class UParticleSystemComponent* STATIC_SpawnEmitterAtLocation(class UObject* worldContextObject, class UparticleSystem* EmitterTemplate, const struct Fvector& location, const struct FRotator& rotation, const struct Fvector& scale, bool bAutoDestroy, Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem);
	class UAudioComponent* STATIC_SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct Fvector& location, const struct FRotator& rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UAudioComponent* STATIC_SpawnDialogueAtLocation(class UObject* worldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct Fvector& location, const struct FRotator& rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UAudioComponent* STATIC_SpawnDialogue2D(class UObject* worldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float startTime, bool bAutoDestroy);
	class UDecalComponent* STATIC_SpawnDecalAttached(class UmaterialInterface* decalMaterial, const struct Fvector& decalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct Fvector& location, const struct FRotator& rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, float lifeSpan);
	class UDecalComponent* STATIC_SpawnDecalAtLocation(class UObject* worldContextObject, class UmaterialInterface* decalMaterial, const struct Fvector& decalSize, const struct Fvector& location, const struct FRotator& rotation, float lifeSpan);
	void STATIC_SetWorldOriginLocation(class UObject* worldContextObject, const struct FIntVector& NewLocation);
	void STATIC_SetViewportMouseCaptureMode(class UObject* worldContextObject, Engine_EMouseCaptureMode MouseCaptureMode);
	void STATIC_SetSubtitlesEnabled(bool bEnabled);
	void STATIC_SetSoundMixClassOverride(class UObject* worldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float volume, float Pitch, float FadeInTime, bool bApplyToChildren);
	void STATIC_SetSoundClassDistanceScale(class UObject* worldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);
	void STATIC_SetPlayerControllerID(class UplayerController* player, int ControllerID);
	void STATIC_SetMaxAudioChannelsScaled(class UObject* worldContextObject, float MaxChannelCountScale);
	void STATIC_SetGlobalTimeDilation(class UObject* worldContextObject, float TimeDilation);
	void STATIC_SetGlobalPitchModulation(class UObject* worldContextObject, float PitchModulation, float TimeSec);
	void STATIC_SetGlobalListenerFocusParameters(class UObject* worldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
	bool STATIC_SetGamePaused(class UObject* worldContextObject, bool bPaused);
	void STATIC_SetForceDisableSplitscreen(class UObject* worldContextObject, bool bDisable);
	void STATIC_SetEnableWorldRendering(class UObject* worldContextObject, bool bEnable);
	void STATIC_SetBaseSoundMix(class UObject* worldContextObject, class USoundMix* InSoundMix);
	bool STATIC_SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	void STATIC_RemovePlayer(class UplayerController* player, bool bDestroyPawn);
	struct Fvector STATIC_RebaseZeroOriginOntoLocal(class UObject* worldContextObject, const struct Fvector& WorldLocation);
	struct Fvector STATIC_RebaseLocalOriginOntoZero(class UObject* worldContextObject, const struct Fvector& WorldLocation);
	void STATIC_PushSoundMixModifier(class UObject* worldContextObject, class USoundMix* InSoundMixModifier);
	bool STATIC_ProjectWorldToScreen(class UplayerController* player, const struct Fvector& WorldPosition, struct FVector2D* ScreenPosition, bool bPlayerViewportRelative);
	void STATIC_PrimeSound(class USoundBase* InSound);
	void STATIC_PopSoundMixModifier(class UObject* worldContextObject, class USoundMix* InSoundMixModifier);
	void STATIC_PlayWorldCameraShake(class UObject* worldContextObject, class UClass* Shake, const struct Fvector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	void STATIC_PlaySoundAtLocation(class UObject* worldContextObject, class USoundBase* Sound, const struct Fvector& location, const struct FRotator& rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class Uactor* OwningActor);
	void STATIC_PlaySound2D(class UObject* worldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundConcurrency* ConcurrencySettings, class Uactor* OwningActor);
	void STATIC_PlayDialogueAtLocation(class UObject* worldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct Fvector& location, const struct FRotator& rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundAttenuation* AttenuationSettings);
	void STATIC_PlayDialogue2D(class UObject* worldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float startTime);
	struct FString STATIC_ParseOption(const struct FString& Options, const struct FString& key);
	void STATIC_OpenLevel(class UObject* worldContextObject, const struct FName& levelName, bool bAbsolute, const struct FString& Options);
	struct FhitResult STATIC_MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float time, float distance, const struct Fvector& location, const struct Fvector& ImpactPoint, const struct Fvector& normal, const struct Fvector& impactNormal, class UphysicalMaterial* PhysMat, class Uactor* HitActor, class UprimitiveComponent* hitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct Fvector& TraceStart, const struct Fvector& TraceEnd);
	void STATIC_LoadStreamLevel(class UObject* worldContextObject, const struct FName& levelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	class USaveGame* STATIC_LoadGameFromSlot(const struct FString& SlotName, int UserIndex);
	bool STATIC_IsSplitscreenForceDisabled(class UObject* worldContextObject);
	bool STATIC_IsGamePaused(class UObject* worldContextObject);
	bool STATIC_HasOption(const struct FString& Options, const struct FString& InKey);
	bool STATIC_HasLaunchOption(const struct FString& OptionToCheck);
	int STATIC_GrassOverlappingSphereCount(class UObject* worldContextObject, class UStaticMesh* StaticMesh, const struct Fvector& CenterPosition, float radius);
	struct FIntVector STATIC_GetWorldOriginLocation(class UObject* worldContextObject);
	float STATIC_GetWorldDeltaSeconds(class UObject* worldContextObject);
	void STATIC_GetViewProjectionMatrix(const struct FMinimalViewInfo& DesiredView, struct FMatrix* ViewMatrix, struct FMatrix* ProjectionMatrix, struct FMatrix* ViewProjectionMatrix);
	Engine_EMouseCaptureMode STATIC_GetViewportMouseCaptureMode(class UObject* worldContextObject);
	float STATIC_GetUnpausedTimeSeconds(class UObject* worldContextObject);
	float STATIC_GetTimeSeconds(class UObject* worldContextObject);
	TEnumAsByte<Engine_EPhysicalSurface> STATIC_GetSurfaceType(const struct FhitResult& hit);
	class ULevelStreaming* STATIC_GetStreamingLevel(class UObject* worldContextObject, const struct FName& PackageName);
	float STATIC_GetRealTimeSeconds(class UObject* worldContextObject);
	class Upawn* STATIC_GetPlayerPawn(class UObject* worldContextObject, int playerIndex);
	int STATIC_GetPlayerControllerID(class UplayerController* player);
	class UplayerController* STATIC_GetPlayerControllerFromID(class UObject* worldContextObject, int ControllerID);
	class UplayerController* STATIC_GetPlayerController(class UObject* worldContextObject, int playerIndex);
	class Ucharacter* STATIC_GetPlayerCharacter(class UObject* worldContextObject, int playerIndex);
	class UPlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* worldContextObject, int playerIndex);
	struct FString STATIC_GetPlatformName();
	class UClass* STATIC_GetObjectClass(class UObject* Object);
	int STATIC_GetMaxAudioChannelCount(class UObject* worldContextObject);
	void STATIC_GetKeyValue(const struct FString& Pair, struct FString* key, struct FString* Value);
	int STATIC_GetIntOption(const struct FString& Options, const struct FString& key, int DefaultValue);
	float STATIC_GetGlobalTimeDilation(class UObject* worldContextObject);
	class UGameStateBase* STATIC_GetGameState(class UObject* worldContextObject);
	class UGameModeBase* STATIC_GetGameMode(class UObject* worldContextObject);
	class UgameInstance* STATIC_GetGameInstance(class UObject* worldContextObject);
	bool STATIC_GetEnableWorldRendering(class UObject* worldContextObject);
	class UReverbEffect* STATIC_GetCurrentReverbEffect(class UObject* worldContextObject);
	struct FString STATIC_GetCurrentLevelName(class UObject* worldContextObject, bool bRemovePrefixString);
	bool STATIC_GetClosestListenerLocation(class UObject* worldContextObject, const struct Fvector& location, float MaximumRange, bool bAllowAttenuationOverride, struct Fvector* ListenerPosition);
	float STATIC_GetAudioTimeSeconds(class UObject* worldContextObject);
	void STATIC_GetAllActorsWithTag(class UObject* worldContextObject, const struct FName& tag, TArray<class Uactor*>* OutActors);
	void STATIC_GetAllActorsWithInterface(class UObject* worldContextObject, class UClass* Interface, TArray<class Uactor*>* OutActors);
	void STATIC_GetAllActorsOfClassWithTag(class UObject* worldContextObject, class UClass* ActorClass, const struct FName& tag, TArray<class Uactor*>* OutActors);
	void STATIC_GetAllActorsOfClass(class UObject* worldContextObject, class UClass* ActorClass, TArray<class Uactor*>* OutActors);
	class Uactor* STATIC_GetActorOfClass(class UObject* worldContextObject, class UClass* ActorClass);
	void STATIC_GetActorArrayBounds(TArray<class Uactor*> actors, bool bOnlyCollidingComponents, struct Fvector* center, struct Fvector* BoxExtent);
	struct Fvector STATIC_GetActorArrayAverageLocation(TArray<class Uactor*> actors);
	void STATIC_GetAccurateRealTime(class UObject* worldContextObject, int* seconds, float* PartialSeconds);
	void STATIC_FlushLevelStreaming(class UObject* worldContextObject);
	class Uactor* STATIC_FinishSpawningActor(class Uactor* actor, const struct FTransform& SpawnTransform);
	bool STATIC_FindCollisionUV(const struct FhitResult& hit, int UVChannel, struct FVector2D* UV);
	void STATIC_EnableLiveStreaming(bool Enable);
	bool STATIC_DoesSaveGameExist(const struct FString& SlotName, int UserIndex);
	bool STATIC_DeprojectScreenToWorld(class UplayerController* player, const struct FVector2D& ScreenPosition, struct Fvector* WorldPosition, struct Fvector* WorldDirection);
	bool STATIC_DeleteGameInSlot(const struct FString& SlotName, int UserIndex);
	void STATIC_DeactivateReverbEffect(class UObject* worldContextObject, const struct FName& tagName);
	class UAudioComponent* STATIC_CreateSound2D(class UObject* worldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float startTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	class USaveGame* STATIC_CreateSaveGameObject(class UClass* SaveGameClass);
	class UplayerController* STATIC_CreatePlayer(class UObject* worldContextObject, int ControllerID, bool bSpawnPlayerController);
	void STATIC_ClearSoundMixModifiers(class UObject* worldContextObject);
	void STATIC_ClearSoundMixClassOverride(class UObject* worldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime);
	void STATIC_CancelAsyncLoading();
	void STATIC_BreakHitResult(const struct FhitResult& hit, bool* bBlockingHit, bool* bInitialOverlap, float* time, float* distance, struct Fvector* location, struct Fvector* ImpactPoint, struct Fvector* normal, struct Fvector* impactNormal, class UphysicalMaterial** PhysMat, class Uactor** HitActor, class UprimitiveComponent** hitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct Fvector* TraceStart, struct Fvector* TraceEnd);
	bool STATIC_BlueprintSuggestProjectileVelocity(class UObject* worldContextObject, struct Fvector* TossVelocity, const struct Fvector& StartLocation, const struct Fvector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<Engine_ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
	bool STATIC_Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* worldContextObject, struct FhitResult* outHit, TArray<struct Fvector>* OutPathPositions, struct Fvector* OutLastTraceDestination, const struct Fvector& StartPos, const struct Fvector& launchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	bool STATIC_Blueprint_PredictProjectilePath_ByObjectType(class UObject* worldContextObject, struct FhitResult* outHit, TArray<struct Fvector>* OutPathPositions, struct Fvector* OutLastTraceDestination, const struct Fvector& StartPos, const struct Fvector& launchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	bool STATIC_Blueprint_PredictProjectilePath_Advanced(class UObject* worldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult);
	class Uactor* STATIC_BeginSpawningActorFromClass(class UObject* worldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class Uactor* owner);
	class Uactor* STATIC_BeginSpawningActorFromBlueprint(class UObject* worldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);
	class Uactor* STATIC_BeginDeferredActorSpawnFromClass(class UObject* worldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, Engine_ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class Uactor* owner);
	bool STATIC_AreSubtitlesEnabled();
	bool STATIC_AreAnyListenersWithinRange(class UObject* worldContextObject, const struct Fvector& location, float MaximumRange);
	bool STATIC_ApplyRadialDamageWithFalloff(class UObject* worldContextObject, float BaseDamage, float MinimumDamage, const struct Fvector& origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class Uactor*> IgnoreActors, class Uactor* DamageCauser, class Ucontroller* InstigatedByController, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel);
	bool STATIC_ApplyRadialDamage(class UObject* worldContextObject, float BaseDamage, const struct Fvector& origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class Uactor*> IgnoreActors, class Uactor* DamageCauser, class Ucontroller* InstigatedByController, bool bDoFullDamage, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel);
	float STATIC_ApplyPointDamage(class Uactor* DamagedActor, float BaseDamage, const struct Fvector& HitFromDirection, const struct FhitResult& HitInfo, class Ucontroller* EventInstigator, class Uactor* DamageCauser, class UClass* DamageTypeClass);
	float STATIC_ApplyDamage(class Uactor* DamagedActor, float BaseDamage, class Ucontroller* EventInstigator, class Uactor* DamageCauser, class UClass* DamageTypeClass);
	void STATIC_ActivateReverbEffect(class UObject* worldContextObject, class UReverbEffect* ReverbEffect, const struct FName& tagName, float priority, float volume, float FadeTime);
};

// Class Engine.SpotLight
// 0x0008 (FullSize[0x0248] - InheritedSize[0x0240])
class USpotLight : public Ulight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                        // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (FullSize[0x0248] - InheritedSize[0x0248])
class UGeneratedMeshAreaLight : public USpotLight
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		return ptr;
	}



};

// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UHapticFeedbackEffect_Base : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HapticFeedbackEffect_Base");
		return ptr;
	}



};

// Class Engine.HapticFeedbackEffect_Buffer
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<unsigned char>                              Amplitudes;                                                // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SampleRate;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AFPT[0x2C];                                    // 0x0044(0x002C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HapticFeedbackEffect_Buffer");
		return ptr;
	}



};

// Class Engine.HapticFeedbackEffect_Curve
// 0x0110 (FullSize[0x0140] - InheritedSize[0x0030])
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve                HapticDetails;                                             // 0x0030(0x0110) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HapticFeedbackEffect_Curve");
		return ptr;
	}



};

// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                                  SoundWave;                                                 // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M1XT[0x30];                                    // 0x0038(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HapticFeedbackEffect_SoundWave");
		return ptr;
	}



};

// Class Engine.HealthSnapshotBlueprintLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HealthSnapshotBlueprintLibrary");
		return ptr;
	}



	void STATIC_StopPerformanceSnapshots();
	void STATIC_StartPerformanceSnapshots();
	void STATIC_LogPerformanceSnapshot(const struct FString& SnapshotTitle, bool bResetStats);
};

// Class Engine.HLODProxy
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UHLODProxy : public UObject
{
public:
	TArray<struct FHLODProxyMesh>                      ProxyMeshes;                                               // 0x0030(0x0010) (Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HLODProxy");
		return ptr;
	}



};

// Class Engine.ImportanceSamplingLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ImportanceSamplingLibrary");
		return ptr;
	}



	float STATIC_RandomSobolFloat(int index, int Dimension, float seed);
	struct Fvector STATIC_RandomSobolCell3D(int index, int NumCells, const struct Fvector& Cell, const struct Fvector& seed);
	struct FVector2D STATIC_RandomSobolCell2D(int index, int NumCells, const struct FVector2D& Cell, const struct FVector2D& seed);
	float STATIC_NextSobolFloat(int index, int Dimension, float PreviousValue);
	struct Fvector STATIC_NextSobolCell3D(int index, int NumCells, const struct Fvector& PreviousValue);
	struct FVector2D STATIC_NextSobolCell2D(int index, int NumCells, const struct FVector2D& PreviousValue);
	struct FImportanceTexture STATIC_MakeImportanceTexture(class UTexture2D* texture, TEnumAsByte<Engine_EImportanceWeight> WeightingFunc);
	void STATIC_ImportanceSample(const struct FImportanceTexture& texture, const struct FVector2D& Rand, int Samples, float intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize);
	void STATIC_BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D** texture, TEnumAsByte<Engine_EImportanceWeight>* WeightingFunc);
};

// Class Engine.ImportantToggleSettingInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UImportantToggleSettingInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ImportantToggleSettingInterface");
		return ptr;
	}



};

// Class Engine.InGameAdManager
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                               // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7NKI[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                    // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                         // 0x0058(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InGameAdManager");
		return ptr;
	}



};

// Class Engine.InheritableComponentHandler
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                                   // 0x0030(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UactorComponent*>                     UnnecessaryComponents;                                     // 0x0040(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InheritableComponentHandler");
		return ptr;
	}



};

// Class Engine.InputDelegateBinding
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputActionDelegateBinding
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                               // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputActionDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputAxisDelegateBinding
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                 // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputAxisDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                              // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputAxisKeyDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputComponent
// 0x0088 (FullSize[0x0140] - InheritedSize[0x00B8])
class UInputComponent : public UactorComponent
{
public:
	unsigned char                                      UnknownData_4ESF[0x70];                                    // 0x00B8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FCachedKeyToActionInfo>              CachedKeyToActionInfo;                                     // 0x0128(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HFEG[0x8];                                     // 0x0138(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputComponent");
		return ptr;
	}



	bool WasControllerKeyJustReleased(const struct Fkey& key);
	bool WasControllerKeyJustPressed(const struct Fkey& key);
	bool IsControllerKeyDown(const struct Fkey& key);
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct Fvector GetControllerVectorKeyState(const struct Fkey& key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct Fkey& key);
	void GetControllerAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct Fkey& key);
};

// Class Engine.InputKeyDelegateBinding
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                  // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputKeyDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputSettings
// 0x00D8 (FullSize[0x0108] - InheritedSize[0x0030])
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                                // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                            // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bF11TogglesFullscreen : 1;                                 // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMouseForTouch : 1;                                     // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMouseSmoothing : 1;                                 // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableFOVScaling : 1;                                     // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCaptureMouseOnLaunch : 1;                                 // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultViewportMouseLock : 1;                             // 0x0040(0x0001) BIT_FIELD (Config, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysShowTouchInterface : 1;                             // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowConsoleOnFourFingerTap : 1;                           // 0x0041(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableGestureRecognizer : 1;                              // 0x0041(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseAutocorrect;                                           // 0x0042(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1N11[0x5];                                     // 0x0043(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             ExcludedAutocorrectOS;                                     // 0x0048(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             ExcludedAutocorrectCultures;                               // 0x0058(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             ExcludedAutocorrectDeviceModels;                           // 0x0068(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMouseCaptureMode                           DefaultViewportMouseCaptureMode;                           // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMouseLockMode                              DefaultViewportMouseLockMode;                              // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9NNU[0x2];                                     // 0x007A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FOVScale;                                                  // 0x007C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DoubleClickTime;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LA2J[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                            // 0x0088(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                              // 0x0098(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FInputActionSpeechMapping>           SpeechMappings;                                            // 0x00A8(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                             DefaultTouchInterface;                                     // 0x00B8(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fkey                                        ConsoleKey;                                                // 0x00D8(0x0020) (Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Fkey>                                ConsoleKeys;                                               // 0x00F8(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputSettings");
		return ptr;
	}



	void SaveKeyMappings();
	void RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	class UInputSettings* STATIC_GetInputSettings();
	void GetAxisNames(TArray<struct FName>* AxisNames);
	void GetAxisMappingByName(const struct FName& InAxisName, TArray<struct FInputAxisKeyMapping>* OutMappings);
	void GetActionNames(TArray<struct FName>* ActionNames);
	void GetActionMappingByName(const struct FName& InActionName, TArray<struct FInputActionKeyMapping>* OutMappings);
	void ForceRebuildKeymaps();
	void AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
};

// Class Engine.InputTouchDelegateBinding
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                                // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputTouchDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InputVectorAxisDelegateBinding");
		return ptr;
	}



};

// Class Engine.Interface_AssetUserData
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterface_AssetUserData : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Interface_AssetUserData");
		return ptr;
	}



};

// Class Engine.Interface_CollisionDataProvider
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterface_CollisionDataProvider : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Interface_CollisionDataProvider");
		return ptr;
	}



};

// Class Engine.Interface_PostProcessVolume
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterface_PostProcessVolume : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Interface_PostProcessVolume");
		return ptr;
	}



};

// Class Engine.Interface_PreviewMeshProvider
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterface_PreviewMeshProvider : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Interface_PreviewMeshProvider");
		return ptr;
	}



};

// Class Engine.InterpCurveEdSetup
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                      // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ActiveTab;                                                 // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9UJW[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}



};

// Class Engine.InterpData
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                              // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PathBuildTime;                                             // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInterpGroup*>                        InterpGroups;                                              // 0x0038(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EdSectionStart;                                            // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EdSectionEnd;                                              // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBakeAndPrune : 1;                                   // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EUVV[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpGroupDirector*                        CachedDirectorGroup;                                       // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               AllEventNames;                                             // 0x0068(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}



};

// Class Engine.InterpFilter
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                   // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}



};

// Class Engine.InterpFilter_Classes
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UInterpFilter_Classes : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}



};

// Class Engine.InterpFilter_Custom
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UInterpFilter_Custom : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}



};

// Class Engine.InterpGroup
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData_ZTHV[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        InterpTracks;                                              // 0x0038(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       groupName;                                                 // 0x0048(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      GroupColor;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollapsed : 1;                                            // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVisible : 1;                                              // 0x0058(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsFolder : 1;                                             // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsParented : 1;                                           // 0x0058(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSelected : 1;                                           // 0x0058(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_X4KK[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}



};

// Class Engine.InterpGroupCamera
// 0x0010 (FullSize[0x0070] - InheritedSize[0x0060])
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                            // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CompressTolerance;                                         // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S5JJ[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpGroupCamera");
		return ptr;
	}



};

// Class Engine.InterpGroupDirector
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UInterpGroupDirector : public UInterpGroup
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}



};

// Class Engine.InterpGroupInst
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Uactor*                                      GroupActor;                                                // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                 // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}



};

// Class Engine.InterpGroupInstCamera
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpGroupInstCamera");
		return ptr;
	}



};

// Class Engine.InterpGroupInstDirector
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}



};

// Class Engine.InterpToMovementComponent
// 0x00A0 (FullSize[0x0198] - InheritedSize[0x00F8])
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              duration;                                                  // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPauseOnImpact : 1;                                        // 0x00FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WNKH[0x3];                                     // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bSweep;                                                    // 0x0100(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ETeleportType                               TeleportType;                                              // 0x0101(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EInterpToBehaviourType                      BehaviourType;                                             // 0x0102(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckIfStillInWorld;                                      // 0x0103(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceSubStepping : 1;                                     // 0x0104(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2FCP[0x3];                                     // 0x0105(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                         // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                            // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                       // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                         // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                           // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              MaxSimulationTimeStep;                                     // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSimulationIterations;                                   // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                             // 0x0160(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F17Q[0x28];                                    // 0x0170(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpToMovementComponent");
		return ptr;
	}



	void StopSimulating(const struct FhitResult& hitResult);
	void RestartMovement(float InitialDirection);
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FhitResult& impactResult, float time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FhitResult& impactResult, float time);
	void OnInterpToStopDelegate__DelegateSignature(const struct FhitResult& impactResult, float time);
	void OnInterpToReverseDelegate__DelegateSignature(const struct FhitResult& impactResult, float time);
	void OnInterpToResetDelegate__DelegateSignature(const struct FhitResult& impactResult, float time);
	void FinaliseControlPoints();
};

// Class Engine.InterpTrackAnimControl
// 0x0028 (FullSize[0x00C0] - InheritedSize[0x0098])
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                  // 0x0098(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HGDI[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                  // 0x00A8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipAnimNotifiers : 1;                                    // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KMTR[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}



};

// Class Engine.InterpTrackAudioMaster
// 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		return ptr;
	}



};

// Class Engine.InterpTrackBoolProp
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                 // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       propertyName;                                              // 0x0088(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_10AN[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackBoolProp");
		return ptr;
	}



};

// Class Engine.InterpTrackColorProp
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       propertyName;                                              // 0x0098(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G9X2[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackColorScale
// 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}



};

// Class Engine.InterpTrackDirector
// 0x0018 (FullSize[0x0090] - InheritedSize[0x0078])
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                  // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                          // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_PHN7[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}



};

// Class Engine.InterpTrackEvent
// 0x0018 (FullSize[0x0090] - InheritedSize[0x0078])
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                                // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseCustomEventName : 1;                                   // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6770[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}



};

// Class Engine.InterpTrackFade
// 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                          // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFadeAudio : 1;                                            // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_73SU[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                FadeColor;                                                 // 0x009C(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DPWD[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatAnimBPParam
// 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                        // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AnimClass;                                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParamName;                                                 // 0x00A8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FXCQ[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackFloatAnimBPParam");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatMaterialParam
// 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UmaterialInterface*>                  TargetMaterials;                                           // 0x0098(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParamName;                                                 // 0x00A8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JB6Q[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatParticleParam
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                 // 0x0098(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1UJ1[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatProp
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       propertyName;                                              // 0x0098(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3L7X[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstAnimControl
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EGEK[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}



};

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		return ptr;
	}



};

// Class Engine.InterpTrackInstProperty
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	unsigned char                                      InterpProperty[0x20];                                      // 0x0030(0x0020) UNKNOWN PROPERTY: FieldPathProperty
	class UObject*                                     PropertyOuterObjectInst;                                   // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}



};

// Class Engine.InterpTrackInstBoolProp
// 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_IMKR[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               ResetBool;                                                 // 0x0068(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_39OM[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstColorProp
// 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_E6HT[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fcolor                                      ResetColor;                                                // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6HSN[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstColorScale
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}



};

// Class Engine.InterpTrackInstDirector
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class Uactor*                                      OldViewTarget;                                             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}



};

// Class Engine.InterpTrackInstEvent
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L6LL[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFade
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UInterpTrackInstFade : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UanimInstance*                               AnimScriptInstance;                                        // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ResetFloat;                                                // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JS9N[0xC];                                     // 0x003C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstFloatAnimBPParam");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                      ResetFloats;                                               // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                                // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0OWW[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFloatProp
// 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_N04W[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResetFloat;                                                // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2ULH[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_52BZ[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                ResetColor;                                                // 0x0060(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstMove
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct Fvector                                     ResetLocation;                                             // 0x0030(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    ResetRotation;                                             // 0x003C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}



};

// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N77C[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		return ptr;
	}



};

// Class Engine.InterpTrackInstSlomo
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IX5F[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return ptr;
	}



};

// Class Engine.InterpTrackInstSound
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7HAE[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAudioComponent*                             PlayAudioComp;                                             // 0x0038(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}



};

// Class Engine.InterpTrackInstToggle
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_ETrackToggleAction>             Action;                                                    // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8WW6[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSavedActiveState : 1;                                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KZF8[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}



};

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Fvector>                             ResetVectors;                                              // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackInstVectorProp
// 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_5E97[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     ResetVector;                                               // 0x0060(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X1D0[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstVisibility
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_EVisibilityTrackAction>         Action;                                                    // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1TT3[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		return ptr;
	}



};

// Class Engine.InterpTrackLinearColorBase
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                          // 0x0078(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurveTension;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QTNS[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		return ptr;
	}



};

// Class Engine.InterpTrackLinearColorProp
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       propertyName;                                              // 0x0098(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PF7F[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackMove
// 0x0060 (FullSize[0x00D8] - InheritedSize[0x0078])
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                  // 0x0078(0x0018) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                          EulerTrack;                                                // 0x0090(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x00A8(0x0010) (NativeAccessSpecifierPublic)
	struct FName                                       LookAtGroupName;                                           // 0x00B8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LinCurveTension;                                           // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngCurveTension;                                           // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseQuatInterpolation : 1;                                 // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowArrowAtKeys : 1;                                      // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMovement : 1;                                      // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                             // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowRotationOnCurveEd : 1;                                // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHide3DTrack : 1;                                          // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7EGE[0x3];                                     // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EInterpTrackMoveRotMode>        RotMode;                                                   // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X8RG[0x7];                                     // 0x00D1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}



};

// Class Engine.InterpTrackMoveAxis
// 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<Engine_EInterpMoveAxis>                MoveAxis;                                                  // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EJNP[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x00A0(0x0010) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		return ptr;
	}



};

// Class Engine.InterpTrackParticleReplay
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                 // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		return ptr;
	}



};

// Class Engine.InterpTrackSlomo
// 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackSlomo");
		return ptr;
	}



};

// Class Engine.InterpTrackSound
// 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                    // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlayOnReverse : 1;                                        // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                            // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSuppressSubtitles : 1;                                    // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTreatAsDialogue : 1;                                      // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAttach : 1;                                               // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C2P0[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}



};

// Class Engine.InterpTrackToggle
// 0x0018 (FullSize[0x0090] - InheritedSize[0x0078])
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                               // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bActivateSystemEachUpdate : 1;                             // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                         // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MXSD[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}



};

// Class Engine.InterpTrackVectorMaterialParam
// 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UmaterialInterface*>                  TargetMaterials;                                           // 0x0098(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParamName;                                                 // 0x00A8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G4CF[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackVectorProp
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       propertyName;                                              // 0x0098(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q29I[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackVisibility
// 0x0018 (FullSize[0x0090] - InheritedSize[0x0078])
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                           // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CK5M[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.InterpTrackVisibility");
		return ptr;
	}



};

// Class Engine.IntSerialization
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                     // 0x0030(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MI4R[0x2];                                     // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UnsignedInt32Variable;                                     // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64_t                                           UnsignedInt64Variable;                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             SignedInt8Variable;                                        // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X1BQ[0x1];                                     // 0x0041(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int16_t                                            SignedInt16Variable;                                       // 0x0042(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NIDF[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int64_t                                            SignedInt64Variable;                                       // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnsignedInt8Variable;                                      // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9G39[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SignedInt32Variable;                                       // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.IntSerialization");
		return ptr;
	}



};

// Class Engine.KillZVolume
// 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
class UKillZVolume : public UPhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KillZVolume");
		return ptr;
	}



};

// Class Engine.KismetArrayLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetArrayLibrary");
		return ptr;
	}



	void STATIC_SetArrayPropertyByName(class UObject* Object, const struct FName& propertyName, TArray<int> Value);
	void STATIC_FilterArray(TArray<class Uactor*> TargetArray, class UClass* filterClass, TArray<class Uactor*>* FilteredArray);
	void STATIC_Array_Swap(TArray<int> TargetArray, int FirstIndex, int SecondIndex);
	void STATIC_Array_Shuffle(TArray<int> TargetArray);
	void STATIC_Array_Set(TArray<int> TargetArray, int index, int Item, bool bSizeToFit);
	void STATIC_Array_Resize(TArray<int> TargetArray, int Size);
	bool STATIC_Array_RemoveItem(TArray<int> TargetArray, int Item);
	void STATIC_Array_Remove(TArray<int> TargetArray, int IndexToRemove);
	int STATIC_Array_Length(TArray<int> TargetArray);
	int STATIC_Array_LastIndex(TArray<int> TargetArray);
	bool STATIC_Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest);
	void STATIC_Array_Insert(TArray<int> TargetArray, int NewItem, int index);
	bool STATIC_Array_Identical(TArray<int> ArrayA, TArray<int> ArrayB);
	void STATIC_Array_Get(TArray<int> TargetArray, int index, int* Item);
	int STATIC_Array_Find(TArray<int> TargetArray, int ItemToFind);
	bool STATIC_Array_Contains(TArray<int> TargetArray, int ItemToFind);
	void STATIC_Array_Clear(TArray<int> TargetArray);
	void STATIC_Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);
	int STATIC_Array_AddUnique(TArray<int> TargetArray, int NewItem);
	int STATIC_Array_Add(TArray<int> TargetArray, int NewItem);
};

// Class Engine.KismetGuidLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetGuidLibrary");
		return ptr;
	}



	void STATIC_Parse_StringToGuid(const struct FString& GuidString, struct Fguid* OutGuid, bool* Success);
	bool STATIC_NotEqual_GuidGuid(const struct Fguid& A, const struct Fguid& B);
	struct Fguid STATIC_NewGuid();
	bool STATIC_IsValid_Guid(const struct Fguid& InGuid);
	void STATIC_Invalidate_Guid(struct Fguid* InGuid);
	bool STATIC_EqualEqual_GuidGuid(const struct Fguid& A, const struct Fguid& B);
	struct FString STATIC_Conv_GuidToString(const struct Fguid& InGuid);
};

// Class Engine.KismetInputLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetInputLibrary");
		return ptr;
	}



	bool STATIC_PointerEvent_IsTouchEvent(const struct FPointerEvent& input);
	bool STATIC_PointerEvent_IsMouseButtonDown(const struct FPointerEvent& input, const struct Fkey& MouseButton);
	float STATIC_PointerEvent_GetWheelDelta(const struct FPointerEvent& input);
	int STATIC_PointerEvent_GetUserIndex(const struct FPointerEvent& input);
	int STATIC_PointerEvent_GetTouchpadIndex(const struct FPointerEvent& input);
	struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& input);
	int STATIC_PointerEvent_GetPointerIndex(const struct FPointerEvent& input);
	struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& input);
	Engine_ESlateGesture STATIC_PointerEvent_GetGestureType(const struct FPointerEvent& input);
	struct FVector2D STATIC_PointerEvent_GetGestureDelta(const struct FPointerEvent& input);
	struct Fkey STATIC_PointerEvent_GetEffectingButton(const struct FPointerEvent& input);
	struct FVector2D STATIC_PointerEvent_GetCursorDelta(const struct FPointerEvent& input);
	bool STATIC_Key_IsVectorAxis(const struct Fkey& key);
	bool STATIC_Key_IsValid(const struct Fkey& key);
	bool STATIC_Key_IsMouseButton(const struct Fkey& key);
	bool STATIC_Key_IsModifierKey(const struct Fkey& key);
	bool STATIC_Key_IsKeyboardKey(const struct Fkey& key);
	bool STATIC_Key_IsGamepadKey(const struct Fkey& key);
	bool STATIC_Key_IsFloatAxis(const struct Fkey& key);
	SlateCore_EUINavigation STATIC_Key_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent);
	SlateCore_EUINavigation STATIC_Key_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent);
	SlateCore_EUINavigationAction STATIC_Key_GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent);
	SlateCore_EUINavigationAction STATIC_Key_GetNavigationAction(const struct Fkey& InKey);
	struct FText STATIC_Key_GetDisplayName(const struct Fkey& key);
	bool STATIC_InputEvent_IsShiftDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsRightShiftDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsRightControlDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsRightCommandDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsRightAltDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsRepeat(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsLeftShiftDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsLeftControlDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsLeftCommandDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsLeftAltDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsControlDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsCommandDown(const struct FInputEvent& input);
	bool STATIC_InputEvent_IsAltDown(const struct FInputEvent& input);
	struct FText STATIC_InputChord_GetDisplayName(const struct FInputChord& key);
	int STATIC_GetUserIndex(const struct FKeyEvent& input);
	struct Fkey STATIC_GetKey(const struct FKeyEvent& input);
	float STATIC_GetAnalogValue(const struct FAnalogInputEvent& input);
	bool STATIC_EqualEqual_KeyKey(const struct Fkey& A, const struct Fkey& B);
	bool STATIC_EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B);
	void STATIC_CalibrateTilt();
};

// Class Engine.KismetInternationalizationLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetInternationalizationLibrary");
		return ptr;
	}



	bool STATIC_SetCurrentLocale(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentLanguageAndLocale(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentLanguage(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentCulture(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentAssetGroupCulture(const struct FName& AssetGroup, const struct FString& Culture, bool SaveToConfig);
	struct FString STATIC_GetSuitableCulture(TArray<struct FString> AvailableCultures, const struct FString& CultureToMatch, const struct FString& FallbackCulture);
	struct FString STATIC_GetNativeCulture(CoreUObject_ELocalizedTextSourceCategory TextCategory);
	TArray<struct FString> STATIC_GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional);
	struct FString STATIC_GetCurrentLocale();
	struct FString STATIC_GetCurrentLanguage();
	struct FString STATIC_GetCurrentCulture();
	struct FString STATIC_GetCurrentAssetGroupCulture(const struct FName& AssetGroup);
	struct FString STATIC_GetCultureDisplayName(const struct FString& Culture, bool Localized);
	void STATIC_ClearCurrentAssetGroupCulture(const struct FName& AssetGroup, bool SaveToConfig);
};

// Class Engine.KismetMaterialLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetMaterialLibrary");
		return ptr;
	}



	void STATIC_SetVectorParameterValue(class UObject* worldContextObject, class UMaterialParameterCollection* collection, const struct FName& parameterName, const struct FLinearColor& ParameterValue);
	void STATIC_SetScalarParameterValue(class UObject* worldContextObject, class UMaterialParameterCollection* collection, const struct FName& parameterName, float ParameterValue);
	struct FLinearColor STATIC_GetVectorParameterValue(class UObject* worldContextObject, class UMaterialParameterCollection* collection, const struct FName& parameterName);
	float STATIC_GetScalarParameterValue(class UObject* worldContextObject, class UMaterialParameterCollection* collection, const struct FName& parameterName);
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(class UObject* worldContextObject, class UmaterialInterface* Parent, const struct FName& OptionalName);
};

// Class Engine.KismetMathLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetMathLibrary");
		return ptr;
	}



	int STATIC_Xor_IntInt(int A, int B);
	int64_t STATIC_Xor_Int64Int64(int64_t A, int64_t B);
	struct Fvector STATIC_WeightedMovingAverage_FVector(const struct Fvector& CurrentSample, const struct Fvector& PreviousSample, float Weight);
	struct FRotator STATIC_WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight);
	float STATIC_WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);
	float STATIC_VSizeXYSquared(const struct Fvector& A);
	float STATIC_VSizeXY(const struct Fvector& A);
	float STATIC_VSizeSquared(const struct Fvector& A);
	float STATIC_VSize2DSquared(const struct FVector2D& A);
	float STATIC_VSize2D(const struct FVector2D& A);
	float STATIC_VSize(const struct Fvector& A);
	struct Fvector STATIC_VLerp(const struct Fvector& A, const struct Fvector& B, float Alpha);
	struct Fvector STATIC_VInterpTo_Constant(const struct Fvector& Current, const struct Fvector& target, float deltaTime, float InterpSpeed);
	struct Fvector STATIC_VInterpTo(const struct Fvector& Current, const struct Fvector& target, float deltaTime, float InterpSpeed);
	struct Fvector STATIC_VectorSpringInterp(const struct Fvector& Current, const struct Fvector& target, struct FVectorSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float deltaTime, float Mass);
	struct Fvector STATIC_Vector_Zero();
	struct Fvector STATIC_Vector_Up();
	void STATIC_Vector_UnwindEuler(struct Fvector* A);
	struct FVector2D STATIC_Vector_UnitCartesianToSpherical(const struct Fvector& A);
	struct Fvector STATIC_Vector_ToRadians(const struct Fvector& A);
	struct Fvector STATIC_Vector_ToDegrees(const struct Fvector& A);
	struct Fvector STATIC_Vector_SnappedToGrid(const struct Fvector& InVect, float InGridSize);
	void STATIC_Vector_Set(struct Fvector* A, float x, float y, float z);
	struct Fvector STATIC_Vector_Right();
	struct Fvector STATIC_Vector_Reciprocal(const struct Fvector& A);
	struct Fvector STATIC_Vector_ProjectOnToNormal(const struct Fvector& V, const struct Fvector& InNormal);
	struct Fvector STATIC_Vector_One();
	struct Fvector STATIC_Vector_NormalUnsafe(const struct Fvector& A);
	void STATIC_Vector_Normalize(struct Fvector* A, float tolerance);
	struct Fvector STATIC_Vector_Normal2D(const struct Fvector& A, float tolerance);
	struct Fvector STATIC_Vector_MirrorByPlane(const struct Fvector& A, const struct Fplane& InPlane);
	struct Fvector STATIC_Vector_Left();
	bool STATIC_Vector_IsZero(const struct Fvector& A);
	bool STATIC_Vector_IsUnit(const struct Fvector& A, float SquaredLenthTolerance);
	bool STATIC_Vector_IsUniform(const struct Fvector& A, float tolerance);
	bool STATIC_Vector_IsNormal(const struct Fvector& A);
	bool STATIC_Vector_IsNearlyZero(const struct Fvector& A, float tolerance);
	bool STATIC_Vector_IsNAN(const struct Fvector& A);
	float STATIC_Vector_HeadingAngle(const struct Fvector& A);
	struct Fvector STATIC_Vector_GetSignVector(const struct Fvector& A);
	struct Fvector STATIC_Vector_GetProjection(const struct Fvector& A);
	float STATIC_Vector_GetAbsMin(const struct Fvector& A);
	float STATIC_Vector_GetAbsMax(const struct Fvector& A);
	struct Fvector STATIC_Vector_GetAbs(const struct Fvector& A);
	struct Fvector STATIC_Vector_Forward();
	struct Fvector STATIC_Vector_Down();
	float STATIC_Vector_DistanceSquared(const struct Fvector& V1, const struct Fvector& V2);
	float STATIC_Vector_Distance2DSquared(const struct Fvector& V1, const struct Fvector& V2);
	float STATIC_Vector_Distance2D(const struct Fvector& V1, const struct Fvector& V2);
	float STATIC_Vector_Distance(const struct Fvector& V1, const struct Fvector& V2);
	float STATIC_Vector_CosineAngle2D(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Vector_ComponentMin(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Vector_ComponentMax(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Vector_ClampSizeMax2D(const struct Fvector& A, float max);
	struct Fvector STATIC_Vector_ClampSizeMax(const struct Fvector& A, float max);
	struct Fvector STATIC_Vector_ClampSize2D(const struct Fvector& A, float min, float max);
	struct Fvector STATIC_Vector_BoundedToCube(const struct Fvector& InVect, float InRadius);
	struct Fvector STATIC_Vector_BoundedToBox(const struct Fvector& InVect, const struct Fvector& InBoxMin, const struct Fvector& InBoxMax);
	struct Fvector STATIC_Vector_Backward();
	void STATIC_Vector_Assign(struct Fvector* A, const struct Fvector& InVector);
	void STATIC_Vector_AddBounded(struct Fvector* A, const struct Fvector& InAddVect, float InRadius);
	struct FVector4 STATIC_Vector4_Zero();
	float STATIC_Vector4_SizeSquared3(const struct FVector4& A);
	float STATIC_Vector4_SizeSquared(const struct FVector4& A);
	float STATIC_Vector4_Size3(const struct FVector4& A);
	float STATIC_Vector4_Size(const struct FVector4& A);
	void STATIC_Vector4_Set(struct FVector4* A, float x, float y, float z, float W);
	struct FVector4 STATIC_Vector4_NormalUnsafe3(const struct FVector4& A);
	void STATIC_Vector4_Normalize3(struct FVector4* A, float tolerance);
	struct FVector4 STATIC_Vector4_Normal3(const struct FVector4& A, float tolerance);
	struct FVector4 STATIC_Vector4_Negated(const struct FVector4& A);
	struct FVector4 STATIC_Vector4_MirrorByVector3(const struct FVector4& direction, const struct FVector4& SurfaceNormal);
	bool STATIC_Vector4_IsZero(const struct FVector4& A);
	bool STATIC_Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance);
	bool STATIC_Vector4_IsNormal3(const struct FVector4& A);
	bool STATIC_Vector4_IsNearlyZero3(const struct FVector4& A, float tolerance);
	bool STATIC_Vector4_IsNAN(const struct FVector4& A);
	float STATIC_Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B);
	float STATIC_Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B);
	struct FVector4 STATIC_Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B);
	void STATIC_Vector4_Assign(struct FVector4* A, const struct FVector4& InVector);
	struct FVector2D STATIC_Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& target, float deltaTime, float InterpSpeed);
	struct FVector2D STATIC_Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& target, float deltaTime, float InterpSpeed);
	struct FVector2D STATIC_Vector2D_Zero();
	struct FVector2D STATIC_Vector2D_Unit45Deg();
	struct FVector2D STATIC_Vector2D_One();
	struct Fvector STATIC_VEase(const struct Fvector& A, const struct Fvector& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FDateTime STATIC_UtcNow();
	struct FVector4 STATIC_TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4);
	struct FRotator STATIC_TransformRotation(const struct FTransform& T, const struct FRotator& rotation);
	struct Fvector STATIC_TransformLocation(const struct FTransform& T, const struct Fvector& location);
	struct Fvector STATIC_TransformDirection(const struct FTransform& T, const struct Fvector& direction);
	float STATIC_Transform_Determinant(const struct FTransform& Transform);
	struct FVector2D STATIC_ToSign2D(const struct FVector2D& A);
	struct FVector2D STATIC_ToRounded2D(const struct FVector2D& A);
	void STATIC_ToDirectionAndLength2D(const struct FVector2D& A, struct FVector2D* OutDir, float* OutLength);
	struct FDateTime STATIC_Today();
	struct FTransform STATIC_TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<Engine_ELerpInterpolationMode> InterpMode);
	struct FTransform STATIC_TInterpTo(const struct FTransform& Current, const struct FTransform& target, float deltaTime, float InterpSpeed);
	struct FTimespan STATIC_TimespanZeroValue();
	float STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan STATIC_TimespanMinValue();
	struct FTimespan STATIC_TimespanMaxValue();
	bool STATIC_TimespanFromString(const struct FString& TimespanString, struct FTimespan* result);
	struct FTransform STATIC_TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_Tan(float A);
	struct Fvector STATIC_Subtract_VectorVector(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Subtract_VectorInt(const struct Fvector& A, int B);
	struct Fvector STATIC_Subtract_VectorFloat(const struct Fvector& A, float B);
	struct FVector4 STATIC_Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	struct FQuat STATIC_Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FLinearColor STATIC_Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FIntPoint STATIC_Subtract_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint STATIC_Subtract_IntPointInt(const struct FIntPoint& A, int B);
	int STATIC_Subtract_IntInt(int A, int B);
	int64_t STATIC_Subtract_Int64Int64(int64_t A, int64_t B);
	float STATIC_Subtract_FloatFloat(float A, float B);
	struct FDateTime STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FTimespan STATIC_Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char STATIC_Subtract_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Square(float A);
	float STATIC_Sqrt(float A);
	struct Fvector STATIC_Spherical2DToUnitCartesian(const struct FVector2D& A);
	float STATIC_Sin(float A);
	int64_t STATIC_SignOfInteger64(int64_t A);
	int STATIC_SignOfInteger(int A);
	float STATIC_SignOfFloat(float A);
	void STATIC_SetRandomStreamSeed(struct FRandomStream* Stream, int NewSeed);
	void STATIC_Set2D(struct FVector2D* A, float x, float y);
	struct Fvector STATIC_SelectVector(const struct Fvector& A, const struct Fvector& B, bool bPickA);
	struct FTransform STATIC_SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);
	struct FString STATIC_SelectString(const struct FString& A, const struct FString& B, bool bPickA);
	struct FRotator STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int STATIC_SelectInt(int A, int B, bool bPickA);
	float STATIC_SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	class UClass* STATIC_SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	void STATIC_SeedRandomStream(struct FRandomStream* Stream);
	float STATIC_SafeDivide(float A, float B);
	int64_t STATIC_Round64(float A);
	int STATIC_Round(float A);
	struct FRotator STATIC_RotatorFromAxisAndAngle(const struct Fvector& Axis, float angle);
	struct Fvector STATIC_RotateAngleAxis(const struct Fvector& InVect, float AngleDeg, const struct Fvector& Axis);
	struct FRotator STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	struct FRotator STATIC_RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& target, float deltaTime, float InterpSpeed);
	struct FRotator STATIC_RInterpTo(const struct FRotator& Current, const struct FRotator& target, float deltaTime, float InterpSpeed);
	void STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	struct FLinearColor STATIC_RGBLinearToHSV(const struct FLinearColor& RGB);
	void STATIC_ResetVectorSpringState(struct FVectorSpringState* SpringState);
	void STATIC_ResetRandomStream(const struct FRandomStream& Stream);
	void STATIC_ResetFloatSpringState(struct FFloatSpringState* SpringState);
	struct FRotator STATIC_REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct Fvector STATIC_RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct Fvector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream);
	struct Fvector STATIC_RandomUnitVectorInEllipticalConeInRadians(const struct Fvector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
	struct Fvector STATIC_RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct Fvector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream);
	struct Fvector STATIC_RandomUnitVectorInEllipticalConeInDegrees(const struct Fvector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	struct Fvector STATIC_RandomUnitVectorInConeInRadiansFromStream(const struct Fvector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream);
	struct Fvector STATIC_RandomUnitVectorInConeInRadians(const struct Fvector& ConeDir, float ConeHalfAngleInRadians);
	struct Fvector STATIC_RandomUnitVectorInConeInDegreesFromStream(const struct Fvector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream);
	struct Fvector STATIC_RandomUnitVectorInConeInDegrees(const struct Fvector& ConeDir, float ConeHalfAngleInDegrees);
	struct Fvector STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	struct Fvector STATIC_RandomUnitVector();
	struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
	struct FRotator STATIC_RandomRotator(bool bRoll);
	struct Fvector STATIC_RandomPointInBoundingBox(const struct Fvector& origin, const struct Fvector& BoxExtent);
	int STATIC_RandomIntegerInRangeFromStream(int min, int max, const struct FRandomStream& Stream);
	int STATIC_RandomIntegerInRange(int min, int max);
	int STATIC_RandomIntegerFromStream(int max, const struct FRandomStream& Stream);
	int64_t STATIC_RandomInteger64InRange(int64_t min, int64_t max);
	int64_t STATIC_RandomInteger64(int64_t max);
	int STATIC_RandomInteger(int max);
	float STATIC_RandomFloatInRangeFromStream(float min, float max, const struct FRandomStream& Stream);
	float STATIC_RandomFloatInRange(float min, float max);
	float STATIC_RandomFloatFromStream(const struct FRandomStream& Stream);
	float STATIC_RandomFloat();
	bool STATIC_RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream);
	bool STATIC_RandomBoolWithWeight(float Weight);
	bool STATIC_RandomBoolFromStream(const struct FRandomStream& Stream);
	bool STATIC_RandomBool();
	float STATIC_RadiansToDegrees(float A);
	struct Fvector STATIC_Quat_VectorUp(const struct FQuat& Q);
	struct Fvector STATIC_Quat_VectorRight(const struct FQuat& Q);
	struct Fvector STATIC_Quat_VectorForward(const struct FQuat& Q);
	struct Fvector STATIC_Quat_UnrotateVector(const struct FQuat& Q, const struct Fvector& V);
	float STATIC_Quat_SizeSquared(const struct FQuat& Q);
	float STATIC_Quat_Size(const struct FQuat& Q);
	void STATIC_Quat_SetFromEuler(struct FQuat* Q, const struct Fvector& Euler);
	void STATIC_Quat_SetComponents(struct FQuat* Q, float x, float y, float z, float W);
	struct FRotator STATIC_Quat_Rotator(const struct FQuat& Q);
	struct Fvector STATIC_Quat_RotateVector(const struct FQuat& Q, const struct Fvector& V);
	struct FQuat STATIC_Quat_Normalized(const struct FQuat& Q, float tolerance);
	void STATIC_Quat_Normalize(struct FQuat* Q, float tolerance);
	struct FQuat STATIC_Quat_MakeFromEuler(const struct Fvector& Euler);
	struct FQuat STATIC_Quat_Log(const struct FQuat& Q);
	bool STATIC_Quat_IsNormalized(const struct FQuat& Q);
	bool STATIC_Quat_IsNonFinite(const struct FQuat& Q);
	bool STATIC_Quat_IsIdentity(const struct FQuat& Q, float tolerance);
	bool STATIC_Quat_IsFinite(const struct FQuat& Q);
	struct FQuat STATIC_Quat_Inversed(const struct FQuat& Q);
	struct FQuat STATIC_Quat_Identity();
	struct Fvector STATIC_Quat_GetRotationAxis(const struct FQuat& Q);
	struct Fvector STATIC_Quat_GetAxisZ(const struct FQuat& Q);
	struct Fvector STATIC_Quat_GetAxisY(const struct FQuat& Q);
	struct Fvector STATIC_Quat_GetAxisX(const struct FQuat& Q);
	float STATIC_Quat_GetAngle(const struct FQuat& Q);
	struct FQuat STATIC_Quat_Exp(const struct FQuat& Q);
	struct Fvector STATIC_Quat_Euler(const struct FQuat& Q);
	void STATIC_Quat_EnforceShortestArcWith(struct FQuat* A, const struct FQuat& B);
	float STATIC_Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B);
	struct Fvector STATIC_ProjectVectorOnToVector(const struct Fvector& V, const struct Fvector& target);
	struct Fvector STATIC_ProjectVectorOnToPlane(const struct Fvector& V, const struct Fvector& PlaneNormal);
	struct Fvector STATIC_ProjectPointOnToPlane(const struct Fvector& point, const struct Fvector& PlaneBase, const struct Fvector& PlaneNormal);
	bool STATIC_PointsAreCoplanar(TArray<struct Fvector> points, float tolerance);
	float STATIC_PerlinNoise1D(float Value);
	int STATIC_Percent_IntInt(int A, int B);
	float STATIC_Percent_FloatFloat(float A, float B);
	unsigned char STATIC_Percent_ByteByte(unsigned char A, unsigned char B);
	int STATIC_Or_IntInt(int A, int B);
	int64_t STATIC_Or_Int64Int64(int64_t A, int64_t B);
	struct FDateTime STATIC_Now();
	bool STATIC_NotEqualExactly_VectorVector(const struct Fvector& A, const struct Fvector& B);
	bool STATIC_NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	bool STATIC_NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	bool STATIC_NotEqual_VectorVector(const struct Fvector& A, const struct Fvector& B, float ErrorTolerance);
	bool STATIC_NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	bool STATIC_NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance);
	bool STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_NotEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float tolerance);
	bool STATIC_NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	bool STATIC_NotEqual_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	bool STATIC_NotEqual_IntInt(int A, int B);
	bool STATIC_NotEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_NotEqual_FloatFloat(float A, float B);
	bool STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_NotEqual_BoolBool(bool A, bool B);
	bool STATIC_Not_PreBool(bool A);
	int64_t STATIC_Not_Int64(int64_t A);
	int STATIC_Not_Int(int A);
	struct FVector2D STATIC_NormalSafe2D(const struct FVector2D& A, float tolerance);
	float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	float STATIC_NormalizeAxis(float angle);
	void STATIC_Normalize2D(struct FVector2D* A, float tolerance);
	struct FVector2D STATIC_Normal2D(const struct FVector2D& A);
	struct Fvector STATIC_normal(const struct Fvector& A, float tolerance);
	struct Fvector STATIC_NegateVector(const struct Fvector& A);
	struct FRotator STATIC_NegateRotator(const struct FRotator& A);
	struct FVector2D STATIC_Negated2D(const struct FVector2D& A);
	bool STATIC_NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp);
	float STATIC_MultiplyByPi(float Value);
	struct Fvector STATIC_Multiply_VectorVector(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Multiply_VectorInt(const struct Fvector& A, int B);
	struct Fvector STATIC_Multiply_VectorFloat(const struct Fvector& A, float B);
	struct FVector4 STATIC_Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator STATIC_Multiply_RotatorInt(const struct FRotator& A, int B);
	struct FRotator STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FQuat STATIC_Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FMatrix STATIC_Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	struct FMatrix STATIC_Multiply_MatrixFloat(const struct FMatrix& A, float B);
	struct FLinearColor STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	struct FIntPoint STATIC_Multiply_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint STATIC_Multiply_IntPointInt(const struct FIntPoint& A, int B);
	int STATIC_Multiply_IntInt(int A, int B);
	float STATIC_Multiply_IntFloat(int A, float B);
	int64_t STATIC_Multiply_Int64Int64(int64_t A, int64_t B);
	float STATIC_Multiply_FloatFloat(float A, float B);
	unsigned char STATIC_Multiply_ByteByte(unsigned char A, unsigned char B);
	struct Fvector STATIC_MirrorVectorByNormal(const struct Fvector& InVect, const struct Fvector& InNormal);
	void STATIC_MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	void STATIC_MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	void STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	int64_t STATIC_MinInt64(int64_t A, int64_t B);
	void STATIC_MinimumAreaRectangle(class UObject* worldContextObject, TArray<struct Fvector> InVerts, const struct Fvector& SampleSurfaceNormal, struct Fvector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
	int STATIC_min(int A, int B);
	void STATIC_MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	void STATIC_MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	void STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	int64_t STATIC_MaxInt64(int64_t A, int64_t B);
	int STATIC_max(int A, int B);
	struct FVector4 STATIC_Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V);
	struct FVector4 STATIC_Matrix_TransformVector(const struct FMatrix& M, const struct Fvector& V);
	struct FVector4 STATIC_Matrix_TransformPosition(const struct FMatrix& M, const struct Fvector& V);
	struct FQuat STATIC_Matrix_ToQuat(const struct FMatrix& M);
	void STATIC_Matrix_SetOrigin(struct FMatrix* M, const struct Fvector& NewOrigin);
	void STATIC_Matrix_SetColumn(struct FMatrix* M, TEnumAsByte<Engine_EMatrixColumns> Column, const struct Fvector& Value);
	void STATIC_Matrix_SetAxis(struct FMatrix* M, TEnumAsByte<CoreUObject_EAxis> Axis, const struct Fvector& AxisVector);
	struct FMatrix STATIC_Matrix_ScaleTranslation(const struct FMatrix& M, const struct Fvector& Scale3D);
	struct FMatrix STATIC_Matrix_RemoveTranslation(const struct FMatrix& M);
	void STATIC_Matrix_RemoveScaling(struct FMatrix* M, float tolerance);
	struct FMatrix STATIC_Matrix_Mirror(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> MirrorAxis, TEnumAsByte<CoreUObject_EAxis> FlipAxis);
	struct Fvector STATIC_Matrix_InverseTransformVector(const struct FMatrix& M, const struct Fvector& V);
	struct Fvector STATIC_Matrix_InverseTransformPosition(const struct FMatrix& M, const struct Fvector& V);
	struct FMatrix STATIC_Matrix_Identity();
	struct Fvector STATIC_Matrix_GetUnitAxis(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> Axis);
	void STATIC_Matrix_GetUnitAxes(const struct FMatrix& M, struct Fvector* x, struct Fvector* y, struct Fvector* z);
	struct FMatrix STATIC_Matrix_GetTransposed(const struct FMatrix& M);
	struct FMatrix STATIC_Matrix_GetTransposeAdjoint(const struct FMatrix& M);
	struct Fvector STATIC_Matrix_GetScaleVector(const struct FMatrix& M, float tolerance);
	struct Fvector STATIC_Matrix_GetScaledAxis(const struct FMatrix& M, TEnumAsByte<CoreUObject_EAxis> Axis);
	void STATIC_Matrix_GetScaledAxes(const struct FMatrix& M, struct Fvector* x, struct Fvector* y, struct Fvector* z);
	float STATIC_Matrix_GetRotDeterminant(const struct FMatrix& M);
	struct FRotator STATIC_Matrix_GetRotator(const struct FMatrix& M);
	struct Fvector STATIC_Matrix_GetOrigin(const struct FMatrix& InMatrix);
	float STATIC_Matrix_GetMaximumAxisScale(const struct FMatrix& M);
	struct FMatrix STATIC_Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float tolerance);
	struct FMatrix STATIC_Matrix_GetInverse(const struct FMatrix& M);
	bool STATIC_Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct Fplane* OutPlane);
	bool STATIC_Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct Fplane* OutPlane);
	bool STATIC_Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct Fplane* OutPlane);
	bool STATIC_Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct Fplane* OutPlane);
	bool STATIC_Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct Fplane* OutPlane);
	bool STATIC_Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct Fplane* OutPlane);
	float STATIC_Matrix_GetDeterminant(const struct FMatrix& M);
	struct Fvector STATIC_Matrix_GetColumn(const struct FMatrix& M, TEnumAsByte<Engine_EMatrixColumns> Column);
	bool STATIC_Matrix_ContainsNaN(const struct FMatrix& M);
	struct FMatrix STATIC_Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct Fvector& Translation);
	struct FMatrix STATIC_Matrix_ApplyScale(const struct FMatrix& M, float scale);
	float STATIC_MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	float STATIC_MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector4 STATIC_MakeVector4(float x, float y, float z, float W);
	struct FVector2D STATIC_MakeVector2D(float x, float y);
	struct Fvector STATIC_MakeVector(float x, float y, float z);
	struct FTransform STATIC_MakeTransform(const struct Fvector& location, const struct FRotator& rotation, const struct Fvector& scale);
	struct FTimespan STATIC_MakeTimespan2(int Days, int Hours, int Minutes, int seconds, int FractionNano);
	struct FTimespan STATIC_MakeTimespan(int Days, int Hours, int Minutes, int seconds, int Milliseconds);
	struct FRotator STATIC_MakeRotFromZY(const struct Fvector& z, const struct Fvector& y);
	struct FRotator STATIC_MakeRotFromZX(const struct Fvector& z, const struct Fvector& x);
	struct FRotator STATIC_MakeRotFromZ(const struct Fvector& z);
	struct FRotator STATIC_MakeRotFromYZ(const struct Fvector& y, const struct Fvector& z);
	struct FRotator STATIC_MakeRotFromYX(const struct Fvector& y, const struct Fvector& x);
	struct FRotator STATIC_MakeRotFromY(const struct Fvector& y);
	struct FRotator STATIC_MakeRotFromXZ(const struct Fvector& x, const struct Fvector& z);
	struct FRotator STATIC_MakeRotFromXY(const struct Fvector& x, const struct Fvector& y);
	struct FRotator STATIC_MakeRotFromX(const struct Fvector& x);
	struct FRotator STATIC_MakeRotator(float Roll, float Pitch, float Yaw);
	struct FRotator STATIC_MakeRotationFromAxes(const struct Fvector& Forward, const struct Fvector& Right, const struct Fvector& Up);
	struct FTransform STATIC_MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo);
	struct FRandomStream STATIC_MakeRandomStream(int InitialSeed);
	struct FQualifiedFrameTime STATIC_MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame);
	float STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	struct Fplane STATIC_MakePlaneFromPointAndNormal(const struct Fvector& point, const struct Fvector& normal);
	struct FFrameRate STATIC_MakeFrameRate(int Numerator, int Denominator);
	struct FDateTime STATIC_MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);
	struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A);
	struct FBox2D STATIC_MakeBox2D(const struct FVector2D& min, const struct FVector2D& max);
	struct Fbox STATIC_MakeBox(const struct Fvector& min, const struct Fvector& max);
	float STATIC_Loge(float A);
	float STATIC_log(float A, float Base);
	bool STATIC_LinePlaneIntersection_OriginNormal(const struct Fvector& LineStart, const struct Fvector& LineEnd, const struct Fvector& PlaneOrigin, const struct Fvector& PlaneNormal, float* T, struct Fvector* Intersection);
	bool STATIC_LinePlaneIntersection(const struct Fvector& LineStart, const struct Fvector& LineEnd, const struct Fplane& APlane, float* T, struct Fvector* Intersection);
	struct FLinearColor STATIC_LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor STATIC_LinearColor_Yellow();
	struct FLinearColor STATIC_LinearColor_White();
	struct FLinearColor STATIC_LinearColor_Transparent();
	struct Fcolor STATIC_LinearColor_ToRGBE(const struct FLinearColor& InLinearColor);
	struct FLinearColor STATIC_LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity);
	void STATIC_LinearColor_SetTemperature(struct FLinearColor* InOutColor, float InTemperature);
	void STATIC_LinearColor_SetRGBA(struct FLinearColor* InOutColor, float R, float G, float B, float A);
	void STATIC_LinearColor_SetRandomHue(struct FLinearColor* InOutColor);
	void STATIC_LinearColor_SetFromSRGB(struct FLinearColor* InOutColor, const struct Fcolor& InSRGB);
	void STATIC_LinearColor_SetFromPow22(struct FLinearColor* InOutColor, const struct Fcolor& InColor);
	void STATIC_LinearColor_SetFromHSV(struct FLinearColor* InOutColor, float H, float S, float V, float A);
	void STATIC_LinearColor_Set(struct FLinearColor* InOutColor, const struct FLinearColor& InColor);
	struct FLinearColor STATIC_LinearColor_Red();
	struct Fcolor STATIC_LinearColor_QuantizeRound(const struct FLinearColor& InColor);
	struct Fcolor STATIC_LinearColor_Quantize(const struct FLinearColor& InColor);
	bool STATIC_LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float tolerance);
	struct FLinearColor STATIC_LinearColor_Green();
	struct FLinearColor STATIC_LinearColor_Gray();
	float STATIC_LinearColor_GetMin(const struct FLinearColor& InColor);
	float STATIC_LinearColor_GetMax(const struct FLinearColor& InColor);
	float STATIC_LinearColor_GetLuminance(const struct FLinearColor& InColor);
	float STATIC_LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2);
	struct FLinearColor STATIC_LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation);
	struct FLinearColor STATIC_LinearColor_Blue();
	struct FLinearColor STATIC_LinearColor_Black();
	struct Fvector STATIC_LessLess_VectorRotator(const struct Fvector& A, const struct FRotator& B);
	bool STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_LessEqual_IntInt(int A, int B);
	bool STATIC_LessEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_LessEqual_FloatFloat(float A, float B);
	bool STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Less_IntInt(int A, int B);
	bool STATIC_Less_Int64Int64(int64_t A, int64_t B);
	bool STATIC_Less_FloatFloat(float A, float B);
	bool STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Less_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Lerp(float A, float B, float Alpha);
	bool STATIC_IsZero2D(const struct FVector2D& A);
	bool STATIC_IsPointInBoxWithTransform(const struct Fvector& point, const struct FTransform& BoxWorldTransform, const struct Fvector& BoxExtent);
	bool STATIC_IsPointInBox(const struct Fvector& point, const struct Fvector& BoxOrigin, const struct Fvector& BoxExtent);
	bool STATIC_IsNearlyZero2D(const struct FVector2D& A, float tolerance);
	bool STATIC_IsMorning(const struct FDateTime& A);
	bool STATIC_IsLeapYear(int Year);
	bool STATIC_IsAfternoon(const struct FDateTime& A);
	struct FTransform STATIC_InvertTransform(const struct FTransform& T);
	struct FRotator STATIC_InverseTransformRotation(const struct FTransform& T, const struct FRotator& rotation);
	struct Fvector STATIC_InverseTransformLocation(const struct FTransform& T, const struct Fvector& location);
	struct Fvector STATIC_InverseTransformDirection(const struct FTransform& T, const struct Fvector& direction);
	struct FIntPoint STATIC_IntPoint_Zero();
	struct FIntPoint STATIC_IntPoint_Up();
	struct FIntPoint STATIC_IntPoint_Right();
	struct FIntPoint STATIC_IntPoint_One();
	struct FIntPoint STATIC_IntPoint_Left();
	struct FIntPoint STATIC_IntPoint_Down();
	bool STATIC_InRange_IntInt(int Value, int min, int max, bool InclusiveMin, bool InclusiveMax);
	bool STATIC_InRange_Int64Int64(int64_t Value, int64_t min, int64_t max, bool InclusiveMin, bool InclusiveMax);
	bool STATIC_InRange_FloatFloat(float Value, float min, float max, bool InclusiveMin, bool InclusiveMax);
	float STATIC_Hypotenuse(float Width, float Height);
	struct FLinearColor STATIC_HSVToRGBLinear(const struct FLinearColor& HSV);
	void STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);
	float STATIC_GridSnap_Float(float location, float GridSize);
	struct Fvector STATIC_GreaterGreater_VectorRotator(const struct Fvector& A, const struct FRotator& B);
	bool STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_GreaterEqual_IntInt(int A, int B);
	bool STATIC_GreaterEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_GreaterEqual_FloatFloat(float A, float B);
	bool STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Greater_IntInt(int A, int B);
	bool STATIC_Greater_Int64Int64(int64_t A, int64_t B);
	bool STATIC_Greater_FloatFloat(float A, float B);
	bool STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Greater_ByteByte(unsigned char A, unsigned char B);
	int STATIC_GetYear(const struct FDateTime& A);
	void STATIC_GetYawPitchFromVector(const struct Fvector& InVec, float* Yaw, float* Pitch);
	struct Fvector STATIC_GetVectorArrayAverage(TArray<struct Fvector> Vectors);
	struct Fvector STATIC_GetUpVector(const struct FRotator& InRot);
	float STATIC_GetTotalSeconds(const struct FTimespan& A);
	float STATIC_GetTotalMinutes(const struct FTimespan& A);
	float STATIC_GetTotalMilliseconds(const struct FTimespan& A);
	float STATIC_GetTotalHours(const struct FTimespan& A);
	float STATIC_GetTotalDays(const struct FTimespan& A);
	struct FTimespan STATIC_GetTimeOfDay(const struct FDateTime& A);
	float STATIC_GetTAU();
	void STATIC_GetSlopeDegreeAngles(const struct Fvector& MyRightYAxis, const struct Fvector& FloorNormal, const struct Fvector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle);
	int STATIC_GetSeconds(const struct FTimespan& A);
	int STATIC_GetSecond(const struct FDateTime& A);
	struct FVector2D STATIC_GetRotated2D(const struct FVector2D& A, float AngleDeg);
	struct Fvector STATIC_GetRightVector(const struct FRotator& InRot);
	struct Fvector STATIC_GetReflectionVector(const struct Fvector& direction, const struct Fvector& SurfaceNormal);
	float STATIC_GetPointDistanceToSegment(const struct Fvector& point, const struct Fvector& SegmentStart, const struct Fvector& SegmentEnd);
	float STATIC_GetPointDistanceToLine(const struct Fvector& point, const struct Fvector& LineOrigin, const struct Fvector& LineDirection);
	float STATIC_GetPI();
	int STATIC_GetMonth(const struct FDateTime& A);
	int STATIC_GetMinutes(const struct FTimespan& A);
	int STATIC_GetMinute(const struct FDateTime& A);
	float STATIC_GetMinElement(const struct Fvector& A);
	float STATIC_GetMin2D(const struct FVector2D& A);
	int STATIC_GetMilliseconds(const struct FTimespan& A);
	int STATIC_GetMillisecond(const struct FDateTime& A);
	float STATIC_GetMaxElement(const struct Fvector& A);
	float STATIC_GetMax2D(const struct FVector2D& A);
	int STATIC_GetHours(const struct FTimespan& A);
	int STATIC_GetHour12(const struct FDateTime& A);
	int STATIC_GetHour(const struct FDateTime& A);
	struct Fvector STATIC_GetForwardVector(const struct FRotator& InRot);
	struct FTimespan STATIC_GetDuration(const struct FTimespan& A);
	struct Fvector STATIC_GetDirectionUnitVector(const struct Fvector& From, const struct Fvector& To);
	int STATIC_GetDays(const struct FTimespan& A);
	int STATIC_GetDayOfYear(const struct FDateTime& A);
	int STATIC_GetDay(const struct FDateTime& A);
	struct FDateTime STATIC_GetDate(const struct FDateTime& A);
	void STATIC_GetAzimuthAndElevation(const struct Fvector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation);
	void STATIC_GetAxes(const struct FRotator& A, struct Fvector* x, struct Fvector* y, struct Fvector* z);
	float STATIC_GetAbsMax2D(const struct FVector2D& A);
	struct FVector2D STATIC_GetAbs2D(const struct FVector2D& A);
	struct FIntVector STATIC_FTruncVector(const struct Fvector& InVector);
	int64_t STATIC_FTrunc64(float A);
	int STATIC_FTrunc(float A);
	struct FTimespan STATIC_FromSeconds(float seconds);
	struct FTimespan STATIC_FromMinutes(float Minutes);
	struct FTimespan STATIC_FromMilliseconds(float Milliseconds);
	struct FTimespan STATIC_FromHours(float Hours);
	struct FTimespan STATIC_FromDays(float Days);
	float STATIC_Fraction(float A);
	int STATIC_FMod(float Dividend, float Divisor, float* Remainder);
	float STATIC_FMin(float A, float B);
	float STATIC_FMax(float A, float B);
	float STATIC_FloatSpringInterp(float Current, float target, struct FFloatSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float deltaTime, float Mass);
	float STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	float STATIC_FInterpTo_Constant(float Current, float target, float deltaTime, float InterpSpeed);
	float STATIC_FInterpTo(float Current, float target, float deltaTime, float InterpSpeed);
	float STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	void STATIC_FindNearestPointsOnLineSegments(const struct Fvector& Segment1Start, const struct Fvector& Segment1End, const struct Fvector& Segment2Start, const struct Fvector& Segment2End, struct Fvector* Segment1Point, struct Fvector* Segment2Point);
	struct FRotator STATIC_FindLookAtRotation(const struct Fvector& start, const struct Fvector& target);
	struct Fvector STATIC_FindClosestPointOnSegment(const struct Fvector& point, const struct Fvector& SegmentStart, const struct Fvector& SegmentEnd);
	struct Fvector STATIC_FindClosestPointOnLine(const struct Fvector& point, const struct Fvector& LineOrigin, const struct Fvector& LineDirection);
	int64_t STATIC_FFloor64(float A);
	int STATIC_FFloor(float A);
	float STATIC_FClamp(float Value, float min, float max);
	int64_t STATIC_FCeil64(float A);
	int STATIC_FCeil(float A);
	float STATIC_Exp(float A);
	bool STATIC_EqualExactly_VectorVector(const struct Fvector& A, const struct Fvector& B);
	bool STATIC_EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	bool STATIC_EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	bool STATIC_EqualEqual_VectorVector(const struct Fvector& A, const struct Fvector& B, float ErrorTolerance);
	bool STATIC_EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	bool STATIC_EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool STATIC_EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);
	bool STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float tolerance);
	bool STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_EqualEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float tolerance);
	bool STATIC_EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	bool STATIC_EqualEqual_IntInt(int A, int B);
	bool STATIC_EqualEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_EqualEqual_FloatFloat(float A, float B);
	bool STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_EqualEqual_BoolBool(bool A, bool B);
	bool STATIC_Equal_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	float STATIC_Ease(float A, float B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct Fvector STATIC_DynamicWeightedMovingAverage_FVector(const struct Fvector& CurrentSample, const struct Fvector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	struct FRotator STATIC_DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	float STATIC_DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	float STATIC_DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	float STATIC_Dot_VectorVector(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Divide_VectorVector(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Divide_VectorInt(const struct Fvector& A, int B);
	struct Fvector STATIC_Divide_VectorFloat(const struct Fvector& A, float B);
	struct FVector4 STATIC_Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Divide_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Divide_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FLinearColor STATIC_Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FIntPoint STATIC_Divide_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint STATIC_Divide_IntPointInt(const struct FIntPoint& A, int B);
	int STATIC_Divide_IntInt(int A, int B);
	int64_t STATIC_Divide_Int64Int64(int64_t A, int64_t B);
	float STATIC_Divide_FloatFloat(float A, float B);
	unsigned char STATIC_Divide_ByteByte(unsigned char A, unsigned char B);
	float STATIC_DistanceSquared2D(const struct FVector2D& V1, const struct FVector2D& V2);
	float STATIC_Distance2D(const struct FVector2D& V1, const struct FVector2D& V2);
	float STATIC_DegTan(float A);
	float STATIC_DegSin(float A);
	float STATIC_DegreesToRadians(float A);
	float STATIC_DegCos(float A);
	float STATIC_DegAtan2(float y, float x);
	float STATIC_DegAtan(float A);
	float STATIC_DegAsin(float A);
	float STATIC_DegAcos(float A);
	int STATIC_DaysInYear(int Year);
	int STATIC_DaysInMonth(int Year, int Month);
	struct FDateTime STATIC_DateTimeMinValue();
	struct FDateTime STATIC_DateTimeMaxValue();
	bool STATIC_DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* result);
	bool STATIC_DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* result);
	float STATIC_CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	struct Fvector STATIC_Cross_VectorVector(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float length);
	float STATIC_Cos(float A);
	struct FTransform STATIC_ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform);
	struct FVector2D STATIC_Conv_VectorToVector2D(const struct Fvector& InVector);
	struct FTransform STATIC_Conv_VectorToTransform(const struct Fvector& InLocation);
	struct FRotator STATIC_Conv_VectorToRotator(const struct Fvector& InVec);
	struct FQuat STATIC_Conv_VectorToQuaterion(const struct Fvector& InVec);
	struct FLinearColor STATIC_Conv_VectorToLinearColor(const struct Fvector& InVec);
	struct Fvector STATIC_Conv_Vector4ToVector(const struct FVector4& InVector4);
	struct FRotator STATIC_Conv_Vector4ToRotator(const struct FVector4& InVec);
	struct FQuat STATIC_Conv_Vector4ToQuaterion(const struct FVector4& InVec);
	struct Fvector STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2d, float z);
	struct FIntPoint STATIC_Conv_Vector2DToIntPoint(const struct FVector2D& InVector2d);
	struct FMatrix STATIC_Conv_TransformToMatrix(const struct FTransform& Transform);
	struct Fvector STATIC_Conv_RotatorToVector(const struct FRotator& InRot);
	struct FTransform STATIC_Conv_RotatorToTransform(const struct FRotator& InRotator);
	struct FTransform STATIC_Conv_MatrixToTransform(const struct FMatrix& InMatrix);
	struct FRotator STATIC_Conv_MatrixToRotator(const struct FMatrix& InMatrix);
	struct Fvector STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct Fcolor STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB);
	struct Fvector STATIC_Conv_IntVectorToVector(const struct FIntVector& InIntVector);
	struct FIntVector STATIC_Conv_IntToIntVector(int InInt);
	int64_t STATIC_Conv_IntToInt64(int InInt);
	float STATIC_Conv_IntToFloat(int InInt);
	unsigned char STATIC_Conv_IntToByte(int InInt);
	bool STATIC_Conv_IntToBool(int InInt);
	struct FVector2D STATIC_Conv_IntPointToVector2D(const struct FIntPoint& InIntPoint);
	int STATIC_Conv_Int64ToInt(int64_t InInt);
	unsigned char STATIC_Conv_Int64ToByte(int64_t InInt);
	struct Fvector STATIC_Conv_FloatToVector(float InFloat);
	struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);
	struct FLinearColor STATIC_Conv_ColorToLinearColor(const struct Fcolor& InColor);
	int STATIC_Conv_ByteToInt(unsigned char InByte);
	float STATIC_Conv_ByteToFloat(unsigned char InByte);
	int STATIC_Conv_BoolToInt(bool InBool);
	float STATIC_Conv_BoolToFloat(bool InBool);
	unsigned char STATIC_Conv_BoolToByte(bool InBool);
	struct FTransform STATIC_ComposeTransforms(const struct FTransform& A, const struct FTransform& B);
	struct FRotator STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
	struct Fvector STATIC_ClampVectorSize(const struct Fvector& A, float min, float max);
	int64_t STATIC_ClampInt64(int64_t Value, int64_t min, int64_t max);
	float STATIC_ClampAxis(float angle);
	struct FVector2D STATIC_ClampAxes2D(const struct FVector2D& A, float MinAxisVal, float MaxAxisVal);
	float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int STATIC_Clamp(int Value, int min, int max);
	struct FLinearColor STATIC_CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& target, float deltaTime, float InterpSpeed);
	void STATIC_BreakVector4(const struct FVector4& InVec, float* x, float* y, float* z, float* W);
	void STATIC_BreakVector2D(const struct FVector2D& InVec, float* x, float* y);
	void STATIC_BreakVector(const struct Fvector& InVec, float* x, float* y, float* z);
	void STATIC_BreakTransform(const struct FTransform& InTransform, struct Fvector* location, struct FRotator* rotation, struct Fvector* scale);
	void STATIC_BreakTimespan2(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* seconds, int* FractionNano);
	void STATIC_BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* seconds, int* Milliseconds);
	void STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct Fvector* x, struct Fvector* y, struct Fvector* z);
	void STATIC_BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	void STATIC_BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed);
	void STATIC_BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame);
	void STATIC_BreakFrameRate(const struct FFrameRate& InFrameRate, int* Numerator, int* Denominator);
	void STATIC_BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);
	void STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	bool STATIC_BooleanXOR(bool A, bool B);
	bool STATIC_BooleanOR(bool A, bool B);
	bool STATIC_BooleanNOR(bool A, bool B);
	bool STATIC_BooleanNAND(bool A, bool B);
	bool STATIC_BooleanAND(bool A, bool B);
	unsigned char STATIC_BMin(unsigned char A, unsigned char B);
	unsigned char STATIC_BMax(unsigned char A, unsigned char B);
	float STATIC_Atan2(float y, float x);
	float STATIC_Atan(float A);
	float STATIC_Asin(float A);
	int STATIC_And_IntInt(int A, int B);
	int64_t STATIC_And_Int64Int64(int64_t A, int64_t B);
	struct Fvector STATIC_Add_VectorVector(const struct Fvector& A, const struct Fvector& B);
	struct Fvector STATIC_Add_VectorInt(const struct Fvector& A, int B);
	struct Fvector STATIC_Add_VectorFloat(const struct Fvector& A, float B);
	struct FVector4 STATIC_Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	struct FQuat STATIC_Add_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FMatrix STATIC_Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	struct FLinearColor STATIC_Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FIntPoint STATIC_Add_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	struct FIntPoint STATIC_Add_IntPointInt(const struct FIntPoint& A, int B);
	int STATIC_Add_IntInt(int A, int B);
	int64_t STATIC_Add_Int64Int64(int64_t A, int64_t B);
	float STATIC_Add_FloatFloat(float A, float B);
	struct FDateTime STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FDateTime STATIC_Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char STATIC_Add_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Acos(float A);
	int64_t STATIC_Abs_Int64(int64_t A);
	int STATIC_Abs_Int(int A);
	float STATIC_Abs(float A);
};

// Class Engine.KismetNodeHelperLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetNodeHelperLibrary");
		return ptr;
	}



	void STATIC_MarkBit(int* data, int index);
	bool STATIC_HasUnmarkedBit(int data, int NumBits);
	bool STATIC_HasMarkedBit(int data, int NumBits);
	unsigned char STATIC_GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue);
	int STATIC_GetUnmarkedBit(int data, int StartIdx, int NumBits, bool bRandom);
	int STATIC_GetRandomUnmarkedBit(int data, int StartIdx, int NumBits);
	int STATIC_GetFirstUnmarkedBit(int data, int StartIdx, int NumBits);
	unsigned char STATIC_GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
	struct FString STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue);
	struct FName STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue);
	void STATIC_ClearBit(int* data, int index);
	void STATIC_ClearAllBits(int* data);
	bool STATIC_BitIsMarked(int data, int index);
};

// Class Engine.KismetRenderingLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetRenderingLibrary");
		return ptr;
	}



	void STATIC_SetCastInsetShadowForAllAttachments(class UprimitiveComponent* primitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);
	class UTexture2D* STATIC_RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const struct FString& name, TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings, TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings);
	void STATIC_ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);
	struct Fcolor STATIC_ReadRenderTargetUV(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor STATIC_ReadRenderTargetRawUV(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor STATIC_ReadRenderTargetRawPixel(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int x, int y);
	struct Fcolor STATIC_ReadRenderTargetPixel(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int x, int y);
	struct FSkelMeshSkinWeightInfo STATIC_MakeSkinWeightInfo(int Bone0, unsigned char Weight0, int Bone1, unsigned char Weight1, int Bone2, unsigned char Weight2, int Bone3, unsigned char Weight3);
	class UTexture2D* STATIC_ImportFileAsTexture2D(class UObject* worldContextObject, const struct FString& FileName);
	class UTexture2D* STATIC_ImportBufferAsTexture2D(class UObject* worldContextObject, TArray<unsigned char> Buffer);
	void STATIC_ExportTexture2D(class UObject* worldContextObject, class UTexture2D* texture, const struct FString& FilePath, const struct FString& FileName);
	void STATIC_ExportRenderTarget(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& FileName);
	void STATIC_EndDrawCanvasToRenderTarget(class UObject* worldContextObject, const struct FDrawToRenderTargetContext& Context);
	void STATIC_DrawMaterialToRenderTarget(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UmaterialInterface* MATERIAL);
	class UTextureRenderTarget2D* STATIC_CreateRenderTarget2D(class UObject* worldContextObject, int Width, int Height, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);
	void STATIC_ConvertRenderTargetToTexture2DEditorOnly(class UObject* worldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* texture);
	void STATIC_ClearRenderTarget2D(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	void STATIC_BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int* Bone0, unsigned char* Weight0, int* Bone1, unsigned char* Weight1, int* Bone2, unsigned char* Weight2, int* Bone3, unsigned char* Weight3);
	void STATIC_BeginDrawCanvasToRenderTarget(class UObject* worldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);
};

// Class Engine.KismetStringLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetStringLibrary");
		return ptr;
	}



	struct FString STATIC_TrimTrailing(const struct FString& SourceString);
	struct FString STATIC_Trim(const struct FString& SourceString);
	struct FString STATIC_ToUpper(const struct FString& SourceString);
	struct FString STATIC_ToLower(const struct FString& SourceString);
	struct FString STATIC_TimeSecondsToString(float InSeconds);
	bool STATIC_StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	bool STATIC_Split(const struct FString& SourceString, const struct FString& InStr, struct FString* LeftS, struct FString* RightS, TEnumAsByte<CoreUObject_ESearchCase> SearchCase, TEnumAsByte<CoreUObject_ESearchDir> SearchDir);
	struct FString STATIC_RightPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_RightChop(const struct FString& SourceString, int Count);
	struct FString STATIC_Right(const struct FString& SourceString, int Count);
	struct FString STATIC_reverse(const struct FString& SourceString);
	int STATIC_ReplaceInline(struct FString* SourceString, const struct FString& searchText, const struct FString& ReplacementText, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	struct FString STATIC_Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	TArray<struct FString> STATIC_ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);
	bool STATIC_NotEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_NotEqual_StriStri(const struct FString& A, const struct FString& B);
	struct FString STATIC_Mid(const struct FString& SourceString, int start, int Count);
	bool STATIC_MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int STATIC_Len(const struct FString& S);
	struct FString STATIC_LeftPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_LeftChop(const struct FString& SourceString, int Count);
	struct FString STATIC_left(const struct FString& SourceString, int Count);
	struct FString STATIC_JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);
	bool STATIC_IsNumeric(const struct FString& SourceString);
	bool STATIC_IsEmpty(const struct FString& InString);
	struct FString STATIC_GetSubstring(const struct FString& SourceString, int StartIndex, int length);
	int STATIC_GetCharacterAsNumber(const struct FString& SourceString, int index);
	TArray<struct FString> STATIC_GetCharacterArrayFromString(const struct FString& SourceString);
	int STATIC_FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	bool STATIC_EqualEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_EqualEqual_StriStri(const struct FString& A, const struct FString& B);
	bool STATIC_EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int STATIC_CullArray(const struct FString& SourceString, TArray<struct FString>* InArray);
	struct FString STATIC_Conv_VectorToString(const struct Fvector& InVec);
	struct FString STATIC_Conv_Vector2dToString(const struct FVector2D& InVec);
	struct FString STATIC_Conv_TransformToString(const struct FTransform& InTrans);
	void STATIC_Conv_StringToVector2D(const struct FString& InString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid);
	void STATIC_Conv_StringToVector(const struct FString& InString, struct Fvector* OutConvertedVector, bool* OutIsValid);
	void STATIC_Conv_StringToRotator(const struct FString& InString, struct FRotator* OutConvertedRotator, bool* OutIsValid);
	struct FName STATIC_Conv_StringToName(const struct FString& InString);
	int STATIC_Conv_StringToInt(const struct FString& InString);
	float STATIC_Conv_StringToFloat(const struct FString& InString);
	void STATIC_Conv_StringToColor(const struct FString& InString, struct FLinearColor* OutConvertedColor, bool* OutIsValid);
	struct FString STATIC_Conv_RotatorToString(const struct FRotator& InRot);
	struct FString STATIC_Conv_ObjectToString(class UObject* InObj);
	struct FString STATIC_Conv_NameToString(const struct FName& InName);
	struct FString STATIC_Conv_MatrixToString(const struct FMatrix& InMatrix);
	struct FString STATIC_Conv_IntVectorToString(const struct FIntVector& InIntVec);
	struct FString STATIC_Conv_IntToString(int InInt);
	struct FString STATIC_Conv_IntPointToString(const struct FIntPoint& InIntPoint);
	struct FString STATIC_Conv_FloatToString(float InFloat);
	struct FString STATIC_Conv_ColorToString(const struct FLinearColor& InColor);
	struct FString STATIC_Conv_ByteToString(unsigned char InByte);
	struct FString STATIC_Conv_BoolToString(bool InBool);
	bool STATIC_Contains(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd);
	struct FString STATIC_Concat_StrStr(const struct FString& A, const struct FString& B);
	struct FString STATIC_BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2d, const struct FString& Suffix);
	struct FString STATIC_BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct Fvector& InVector, const struct FString& Suffix);
	struct FString STATIC_BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix);
	struct FString STATIC_BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix);
	struct FString STATIC_BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix);
	struct FString STATIC_BuildString_IntVector(const struct FString& AppendTo, const struct FString& Prefix, const struct FIntVector& InIntVector, const struct FString& Suffix);
	struct FString STATIC_BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int InInt, const struct FString& Suffix);
	struct FString STATIC_BuildString_Float(const struct FString& AppendTo, const struct FString& Prefix, float InFloat, const struct FString& Suffix);
	struct FString STATIC_BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix);
	struct FString STATIC_BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix);
};

// Class Engine.KismetStringTableLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetStringTableLibrary");
		return ptr;
	}



	bool STATIC_IsRegisteredTableId(const struct FName& TableId);
	bool STATIC_IsRegisteredTableEntry(const struct FName& TableId, const struct FString& key);
	struct FString STATIC_GetTableNamespace(const struct FName& TableId);
	struct FString STATIC_GetTableEntrySourceString(const struct FName& TableId, const struct FString& key);
	struct FString STATIC_GetTableEntryMetaData(const struct FName& TableId, const struct FString& key, const struct FName& MetaDataId);
	TArray<struct FName> STATIC_GetRegisteredStringTables();
	TArray<struct FName> STATIC_GetMetaDataIdsFromStringTableEntry(const struct FName& TableId, const struct FString& key);
	TArray<struct FString> STATIC_GetKeysFromStringTable(const struct FName& TableId);
};

// Class Engine.KismetSystemLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetSystemLibrary");
		return ptr;
	}



	void STATIC_UnregisterForRemoteNotifications();
	void STATIC_UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList);
	void STATIC_UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId);
	void STATIC_TransactObject(class UObject* Object);
	void STATIC_StackTrace();
	bool STATIC_SphereTraceSingleForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_SphereTraceSingleByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_SphereTraceSingle(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_SphereTraceMultiForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_SphereTraceMultiByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_SphereTraceMulti(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_SphereOverlapComponents(class UObject* worldContextObject, const struct Fvector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class UprimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapActors(class UObject* worldContextObject, const struct Fvector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class Uactor*>* OutActors);
	void STATIC_SnapshotObject(class UObject* Object);
	void STATIC_ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);
	void STATIC_ShowPlatformSpecificAchievementsScreen(class UplayerController* SpecificPlayer);
	void STATIC_ShowInterstitialAd();
	void STATIC_ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);
	void STATIC_SetWindowTitle(const struct FText& title);
	void STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled);
	void STATIC_SetVectorPropertyByName(class UObject* Object, const struct FName& propertyName, const struct Fvector& Value);
	void STATIC_SetUserActivity(const struct FUserActivity& UserActivity);
	void STATIC_SetTransformPropertyByName(class UObject* Object, const struct FName& propertyName, const struct FTransform& Value);
	void STATIC_SetTextPropertyByName(class UObject* Object, const struct FName& propertyName, const struct FText& Value);
	void STATIC_SetSuppressViewportTransitionMessage(class UObject* worldContextObject, bool bState);
	void STATIC_SetStructurePropertyByName(class UObject* Object, const struct FName& propertyName, const struct FGenericStruct& Value);
	void STATIC_SetStringPropertyByName(class UObject* Object, const struct FName& propertyName, const struct FString& Value);
	void STATIC_SetSoftObjectPropertyByName(class UObject* Object, const struct FName& propertyName);
	void STATIC_SetSoftClassPropertyByName(class UObject* Object, const struct FName& propertyName);
	void STATIC_SetRotatorPropertyByName(class UObject* Object, const struct FName& propertyName, const struct FRotator& Value);
	void STATIC_SetObjectPropertyByName(class UObject* Object, const struct FName& propertyName, class UObject* Value);
	void STATIC_SetNamePropertyByName(class UObject* Object, const struct FName& propertyName, const struct FName& Value);
	void STATIC_SetLinearColorPropertyByName(class UObject* Object, const struct FName& propertyName, const struct FLinearColor& Value);
	void STATIC_SetIntPropertyByName(class UObject* Object, const struct FName& propertyName, int Value);
	void STATIC_SetInterfacePropertyByName(class UObject* Object, const struct FName& propertyName, const TScriptInterface<class UInterface>& Value);
	void STATIC_SetInt64PropertyByName(class UObject* Object, const struct FName& propertyName, int64_t Value);
	void STATIC_SetGamepadsBlockDeviceFeedback(bool bBlock);
	void STATIC_SetFloatPropertyByName(class UObject* Object, const struct FName& propertyName, float Value);
	void STATIC_SetFieldPathPropertyByName(class UObject* Object, const struct FName& propertyName);
	void STATIC_SetCollisionProfileNameProperty(class UObject* Object, const struct FName& propertyName, const struct FCollisionProfileName& Value);
	void STATIC_SetClassPropertyByName(class UObject* Object, const struct FName& propertyName, class UClass* Value);
	void STATIC_SetBytePropertyByName(class UObject* Object, const struct FName& propertyName, unsigned char Value);
	void STATIC_SetBoolPropertyByName(class UObject* Object, const struct FName& propertyName, bool Value);
	void STATIC_RetriggerableDelay(class UObject* worldContextObject, float duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_ResetGamepadAssignmentToController(int ControllerID);
	void STATIC_ResetGamepadAssignments();
	void STATIC_RegisterForRemoteNotifications();
	void STATIC_QuitGame(class UObject* worldContextObject, class UplayerController* SpecificPlayer, TEnumAsByte<Engine_EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions);
	void STATIC_PrintWarning(const struct FString& InString);
	void STATIC_PrintText(class UObject* worldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float duration, int key);
	void STATIC_PrintString(class UObject* worldContextObject, const struct FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float duration, int key);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);
	bool STATIC_NotEqual_SoftObjectReference();
	bool STATIC_NotEqual_SoftClassReference();
	bool STATIC_NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	bool STATIC_NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	struct FString STATIC_NormalizeFilename(const struct FString& InFilename);
	void STATIC_MoveComponentTo(class USceneComponent* component, const struct Fvector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<Engine_EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo);
	struct FSoftObjectPath STATIC_MakeSoftObjectPath(const struct FString& PathString);
	struct FSoftClassPath STATIC_MakeSoftClassPath(const struct FString& PathString);
	struct FText STATIC_MakeLiteralText(const struct FText& Value);
	struct FString STATIC_MakeLiteralString(const struct FString& Value);
	struct FName STATIC_MakeLiteralName(const struct FName& Value);
	int STATIC_MakeLiteralInt(int Value);
	float STATIC_MakeLiteralFloat(float Value);
	unsigned char STATIC_MakeLiteralByte(unsigned char Value);
	bool STATIC_MakeLiteralBool(bool Value);
	void STATIC_LoadInterstitialAd(int AdIdIndex);
	class UClass* STATIC_LoadClassAsset_Blocking();
	void STATIC_LoadAssetClass(class UObject* worldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	class UObject* STATIC_LoadAsset_Blocking();
	void STATIC_LoadAsset(class UObject* worldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_LineTraceSingleForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_LineTraceSingleByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_LineTraceSingle(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_LineTraceMultiForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_LineTraceMultiByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_LineTraceMulti(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	void STATIC_LaunchURL(const struct FString& Url);
	void STATIC_K2_UnPauseTimerHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_TimerExistsHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_TimerExists(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle STATIC_K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	struct FTimerHandle STATIC_K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	void STATIC_K2_PauseTimerHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsValidTimerHandle(const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsTimerActiveHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle STATIC_K2_InvalidateTimerHandle(struct FTimerHandle* Handle);
	float STATIC_K2_GetTimerRemainingTimeHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	float STATIC_K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);
	float STATIC_K2_GetTimerElapsedTimeHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	float STATIC_K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearTimerHandle(class UObject* worldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearAndInvalidateTimerHandle(class UObject* worldContextObject, struct FTimerHandle* Handle);
	bool STATIC_IsValidSoftObjectReference();
	bool STATIC_IsValidSoftClassReference();
	bool STATIC_IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType);
	bool STATIC_IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	bool STATIC_IsValidClass(class UClass* Class);
	bool STATIC_isValid(class UObject* Object);
	bool STATIC_IsUnattended();
	bool STATIC_IsStandalone(class UObject* worldContextObject);
	bool STATIC_IsSplitScreen(class UObject* worldContextObject);
	bool STATIC_IsServer(class UObject* worldContextObject);
	bool STATIC_IsScreensaverEnabled();
	bool STATIC_IsPackagedForDistribution();
	bool STATIC_IsLoggedIn(class UplayerController* SpecificPlayer);
	bool STATIC_IsInterstitialAdRequested();
	bool STATIC_IsInterstitialAdAvailable();
	bool STATIC_IsDedicatedServer(class UObject* worldContextObject);
	bool STATIC_IsControllerAssignedToGamepad(int ControllerID);
	void STATIC_HideAdBanner();
	bool STATIC_GetVolumeButtonsHandledBySystem();
	struct FString STATIC_GetUniqueDeviceId();
	bool STATIC_GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	void STATIC_GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	void STATIC_GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	int STATIC_GetRenderingMaterialQualityLevel();
	int STATIC_GetRenderingDetailMode();
	struct FString STATIC_GetProjectSavedDirectory();
	struct FString STATIC_GetProjectDirectory();
	struct FString STATIC_GetProjectContentDirectory();
	void STATIC_GetPrimaryAssetsWithBundleState(TArray<struct FName> RequiredBundles, TArray<struct FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	void STATIC_GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftObjectReference();
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftClassReference();
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromObject(class UObject* Object);
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromClass(class UClass* Class);
	TArray<struct FString> STATIC_GetPreferredLanguages();
	struct FString STATIC_GetPlatformUserName();
	struct FString STATIC_GetPlatformUserDir();
	struct FString STATIC_GetPathName(class UObject* Object);
	class UObject* STATIC_GetOuterObject(class UObject* Object);
	struct FString STATIC_GetObjectName(class UObject* Object);
	class UObject* STATIC_GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	int STATIC_GetMinYResolutionForUI();
	int STATIC_GetMinYResolutionFor3DView();
	struct FString STATIC_GetLocalCurrencySymbol();
	struct FString STATIC_GetLocalCurrencyCode();
	float STATIC_GetGameTimeInSeconds(class UObject* worldContextObject);
	struct FString STATIC_GetGamepadControllerName(int ControllerID);
	struct FString STATIC_GetGameName();
	struct FString STATIC_GetGameBundleId();
	int64_t STATIC_GetFrameCount();
	struct FString STATIC_GetEngineVersion();
	struct FString STATIC_GetDisplayName(class UObject* Object);
	struct FString STATIC_GetDeviceId();
	struct FString STATIC_GetDefaultLocale();
	struct FString STATIC_GetDefaultLanguage();
	bool STATIC_GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<struct FName>* OutBundles);
	bool STATIC_GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions);
	int STATIC_GetConsoleVariableIntValue(const struct FString& VariableName);
	float STATIC_GetConsoleVariableFloatValue(const struct FString& VariableName);
	bool STATIC_GetConsoleVariableBoolValue(const struct FString& VariableName);
	void STATIC_GetComponentBounds(class USceneComponent* component, struct Fvector* origin, struct Fvector* BoxExtent, float* SphereRadius);
	struct FString STATIC_GetCommandLine();
	class UClass* STATIC_GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	struct FString STATIC_GetClassDisplayName(class UClass* Class);
	int STATIC_GetAdIDCount();
	void STATIC_GetActorListFromComponentList(TArray<class UprimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class Uactor*>* OutActorList);
	void STATIC_GetActorBounds(class Uactor* actor, struct Fvector* origin, struct Fvector* BoxExtent);
	void STATIC_ForceCloseAdBanner();
	void STATIC_FlushPersistentDebugLines(class UObject* worldContextObject);
	void STATIC_FlushDebugStrings(class UObject* worldContextObject);
	void STATIC_ExecuteConsoleCommand(class UObject* worldContextObject, const struct FString& Command, class UplayerController* SpecificPlayer);
	bool STATIC_EqualEqual_SoftObjectReference();
	bool STATIC_EqualEqual_SoftClassReference();
	bool STATIC_EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	bool STATIC_EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	int STATIC_EndTransaction();
	void STATIC_DrawDebugString(class UObject* worldContextObject, const struct Fvector& TextLocation, const struct FString& text, class Uactor* TestBaseActor, const struct FLinearColor& TextColor, float duration);
	void STATIC_DrawDebugSphere(class UObject* worldContextObject, const struct Fvector& center, float radius, int Segments, const struct FLinearColor& LineColor, float duration, float Thickness);
	void STATIC_DrawDebugPoint(class UObject* worldContextObject, const struct Fvector& position, float Size, const struct FLinearColor& PointColor, float duration);
	void STATIC_DrawDebugPlane(class UObject* worldContextObject, const struct Fplane& PlaneCoordinates, const struct Fvector& location, float Size, const struct FLinearColor& PlaneColor, float duration);
	void STATIC_DrawDebugLine(class UObject* worldContextObject, const struct Fvector& LineStart, const struct Fvector& LineEnd, const struct FLinearColor& LineColor, float duration, float Thickness);
	void STATIC_DrawDebugFrustum(class UObject* worldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float duration, float Thickness);
	void STATIC_DrawDebugFloatHistoryTransform(class UObject* worldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float duration);
	void STATIC_DrawDebugFloatHistoryLocation(class UObject* worldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct Fvector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float duration);
	void STATIC_DrawDebugCylinder(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, int Segments, const struct FLinearColor& LineColor, float duration, float Thickness);
	void STATIC_DrawDebugCoordinateSystem(class UObject* worldContextObject, const struct Fvector& AxisLoc, const struct FRotator& AxisRot, float scale, float duration, float Thickness);
	void STATIC_DrawDebugConeInDegrees(class UObject* worldContextObject, const struct Fvector& origin, const struct Fvector& direction, float length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float duration, float Thickness);
	void STATIC_DrawDebugCone(class UObject* worldContextObject, const struct Fvector& origin, const struct Fvector& direction, float length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float duration, float Thickness);
	void STATIC_DrawDebugCircle(class UObject* worldContextObject, const struct Fvector& center, float radius, int NumSegments, const struct FLinearColor& LineColor, float duration, float Thickness, const struct Fvector& YAxis, const struct Fvector& ZAxis, bool bDrawAxis);
	void STATIC_DrawDebugCapsule(class UObject* worldContextObject, const struct Fvector& center, float HalfHeight, float radius, const struct FRotator& rotation, const struct FLinearColor& LineColor, float duration, float Thickness);
	void STATIC_DrawDebugCamera(class UCameraActor* CameraActor, const struct FLinearColor& CameraColor, float duration);
	void STATIC_DrawDebugBox(class UObject* worldContextObject, const struct Fvector& center, const struct Fvector& Extent, const struct FLinearColor& LineColor, const struct FRotator& rotation, float duration, float Thickness);
	void STATIC_DrawDebugArrow(class UObject* worldContextObject, const struct Fvector& LineStart, const struct Fvector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float duration, float Thickness);
	bool STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
	void STATIC_delay(class UObject* worldContextObject, float duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	struct FString STATIC_ConvertToRelativePath(const struct FString& FileName);
	struct FString STATIC_ConvertToAbsolutePath(const struct FString& FileName);
	void STATIC_Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath);
	struct FString STATIC_Conv_SoftObjectReferenceToString();
	class UObject* STATIC_Conv_SoftObjectReferenceToObject();
	struct FString STATIC_Conv_SoftClassReferenceToString();
	class UClass* STATIC_Conv_SoftClassReferenceToClass();
	void STATIC_Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath);
	struct FString STATIC_Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType);
	struct FString STATIC_Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId);
	void STATIC_Conv_ObjectToSoftObjectReference(class UObject* Object);
	class UObject* STATIC_Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface);
	void STATIC_Conv_ClassToSoftClassReference(class UClass* Class);
	void STATIC_ControlScreensaver(bool bAllowScreenSaver);
	bool STATIC_ComponentOverlapComponents(class UprimitiveComponent* component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class UprimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapActors(class UprimitiveComponent* component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class Uactor*>* OutActors);
	void STATIC_CollectGarbage();
	bool STATIC_CapsuleTraceSingleForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_CapsuleTraceSingleByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_CapsuleTraceSingle(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_CapsuleTraceMultiForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_CapsuleTraceMultiByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_CapsuleTraceMulti(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, float radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_CapsuleOverlapComponents(class UObject* worldContextObject, const struct Fvector& CapsulePos, float radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class UprimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapActors(class UObject* worldContextObject, const struct Fvector& CapsulePos, float radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class Uactor*>* OutActors);
	bool STATIC_CanLaunchURL(const struct FString& Url);
	void STATIC_CancelTransaction(int index);
	void STATIC_BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, struct FString* PathString);
	void STATIC_BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, struct FString* PathString);
	bool STATIC_BoxTraceSingleForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct Fvector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_BoxTraceSingleByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct Fvector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_BoxTraceSingle(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct Fvector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FhitResult* outHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_BoxTraceMultiForObjects(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct Fvector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_BoxTraceMultiByProfile(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct Fvector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_BoxTraceMulti(class UObject* worldContextObject, const struct Fvector& start, const struct Fvector& end, const struct Fvector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class Uactor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FhitResult>* outHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool STATIC_BoxOverlapComponents(class UObject* worldContextObject, const struct Fvector& BoxPos, const struct Fvector& Extent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class UprimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapActors(class UObject* worldContextObject, const struct Fvector& BoxPos, const struct Fvector& BoxExtent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class Uactor*> ActorsToIgnore, TArray<class Uactor*>* OutActors);
	int STATIC_BeginTransaction(const struct FString& Context, const struct FText& description, class UObject* PrimaryObject);
	struct FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
};

// Class Engine.KismetTextLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.KismetTextLibrary");
		return ptr;
	}



	struct FText STATIC_TextTrimTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPrecedingAndTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPreceding(const struct FText& InText);
	struct FText STATIC_TextToUpper(const struct FText& InText);
	struct FText STATIC_TextToLower(const struct FText& InText);
	bool STATIC_TextIsTransient(const struct FText& InText);
	bool STATIC_TextIsFromStringTable(const struct FText& text);
	bool STATIC_TextIsEmpty(const struct FText& InText);
	bool STATIC_TextIsCultureInvariant(const struct FText& InText);
	struct FText STATIC_TextFromStringTable(const struct FName& TableId, const struct FString& key);
	bool STATIC_StringTableIdAndKeyFromText(const struct FText& text, struct FName* OutTableId, struct FString* OutKey);
	struct FText STATIC_PolyglotDataToText(const struct FPolyglotTextData& PolyglotData);
	bool STATIC_NotEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	void STATIC_IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* isValid, struct FText* ErrorMessage);
	struct FText STATIC_GetEmptyText();
	struct FText STATIC_Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs);
	bool STATIC_FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& key, struct FText* OutText);
	bool STATIC_EqualEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText STATIC_Conv_VectorToText(const struct Fvector& InVec);
	struct FText STATIC_Conv_Vector2dToText(const struct FVector2D& InVec);
	struct FText STATIC_Conv_TransformToText(const struct FTransform& InTrans);
	struct FString STATIC_Conv_TextToString(const struct FText& InText);
	struct FText STATIC_Conv_StringToText(const struct FString& InString);
	struct FText STATIC_Conv_RotatorToText(const struct FRotator& InRot);
	struct FText STATIC_Conv_ObjectToText(class UObject* InObj);
	struct FText STATIC_Conv_NameToText(const struct FName& InName);
	struct FText STATIC_Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText STATIC_Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText STATIC_Conv_FloatToText(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_Conv_ColorToText(const struct FLinearColor& InColor);
	struct FText STATIC_Conv_ByteToText(unsigned char Value);
	struct FText STATIC_Conv_BoolToText(bool InBool);
	struct FText STATIC_AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan);
	struct FText STATIC_AsTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsPercent_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_AsDateTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsDate_DateTime(const struct FDateTime& InDateTime);
	struct FText STATIC_AsCurrencyBase(int BaseValue, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Integer(int Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
};

// Class Engine.Layer
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                 // 0x0030(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsVisible : 1;                                            // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AWLG[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLayerActorStats>                    ActorStats;                                                // 0x0040(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Layer");
		return ptr;
	}



};

// Class Engine.LevelPartitionInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class ULevelPartitionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelPartitionInterface");
		return ptr;
	}



};

// Class Engine.level
// 0x0258 (FullSize[0x0288] - InheritedSize[0x0030])
class Ulevel : public UObject
{
public:
	unsigned char                                      UnknownData_XY4R[0x90];                                    // 0x0030(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Uworld*                                      OwningWorld;                                               // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModel*                                      Model;                                                     // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UModelComponent*>                     ModelComponents;                                           // 0x00D0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelActorContainer*                        ActorCluster;                                              // 0x00E0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumTextureStreamingUnbuiltComponents;                      // 0x00E8(0x0004) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumTextureStreamingDirtyResources;                         // 0x00EC(0x0004) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelScriptActor*                           LevelScriptActor;                                          // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationObjectBase*                       NavListStart;                                              // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationObjectBase*                       NavListEnd;                                                // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                             // 0x0108(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightmapTotalSize;                                         // 0x0118(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShadowmapTotalSize;                                        // 0x011C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Fvector>                             StaticNavigableGeometry;                                   // 0x0120(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Fguid>                               StreamingTextureGuids;                                     // 0x0130(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_COAA[0x98];                                    // 0x0140(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       LevelBuildDataId;                                          // 0x01D8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapBuildDataRegistry*                       MapBuildData;                                              // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                                  LightBuildLevelOffset;                                     // 0x01F0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsLightingScenario : 1;                                   // 0x01FC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_50MC : 2;                                      // 0x01FC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bTextureStreamingRotationChanged : 1;                      // 0x01FC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStaticComponentsRegisteredInStreamingManager : 1;         // 0x01FC(0x0001) BIT_FIELD (Transient, DuplicateTransient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsVisible : 1;                                            // 0x01FC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YL8I[0x4B];                                    // 0x01FD(0x004B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorldSettings*                              WorldSettings;                                             // 0x0248(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_LWWX[0x8];                                     // 0x0250(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0258(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_0Z4Z[0x10];                                    // 0x0268(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;                           // 0x0278(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.level");
		return ptr;
	}



};

// Class Engine.LevelActorContainer
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class ULevelActorContainer : public UObject
{
public:
	TArray<class Uactor*>                              actors;                                                    // 0x0030(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelActorContainer");
		return ptr;
	}



};

// Class Engine.LevelBounds
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class ULevelBounds : public Uactor
{
public:
	class UBoxComponent*                               BoxComponent;                                              // 0x0230(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoUpdateBounds;                                         // 0x0238(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N3MF[0x7];                                     // 0x0239(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelBounds");
		return ptr;
	}



};

// Class Engine.LevelScriptBlueprint
// 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
class ULevelScriptBlueprint : public UBlueprint
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelScriptBlueprint");
		return ptr;
	}



};

// Class Engine.LevelStreaming
// 0x0130 (FullSize[0x0160] - InheritedSize[0x0030])
class ULevelStreaming : public UObject
{
public:
	unsigned char                                      WorldAsset[0x30];                                          // 0x0030(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
	struct FName                                       PackageNameToLoad;                                         // 0x0060(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_33MA[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               LODPackageNames;                                           // 0x0070(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F0F2[0x10];                                    // 0x0080(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTransform                                  LevelTransform;                                            // 0x0090(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                LevelLODIndex;                                             // 0x00C0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                StreamingPriority;                                         // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_DY73[0x2];                                     // 0x00C8(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_QFUY : 3;                                      // 0x00CA(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bShouldBeVisible : 1;                                      // 0x00CA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bShouldBeLoaded : 1;                                       // 0x00CA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bLocked : 1;                                               // 0x00CA(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsStatic : 1;                                             // 0x00CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientManaged : 1;                                        // 0x00CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBlockOnLoad : 1;                                    // 0x00CB(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldBlockOnUnload : 1;                                  // 0x00CB(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableDistanceStreaming : 1;                             // 0x00CB(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                 // 0x00CB(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LevelColor;                                                // 0x00CC(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L9TV[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULevelStreamingVolume*>               EditorStreamingVolumes;                                    // 0x00E0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeBetweenVolumeUnloadRequests;                        // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FUTO[0x4];                                     // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                             // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                           // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLevelShown;                                              // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                             // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class Ulevel*                                      LoadedLevel;                                               // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class Ulevel*                                      PendingUnloadLevel;                                        // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_9XP7[0x18];                                    // 0x0148(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}



	bool ShouldBeLoaded();
	void SetShouldBeVisible(bool bInShouldBeVisible);
	void SetShouldBeLoaded(bool bInShouldBeLoaded);
	void SetPriority(int NewPriority);
	void SetLevelLODIndex(int LodIndex);
	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	struct FName GetWorldAssetPackageFName();
	class Ulevel* GetLoadedLevel();
	class ULevelScriptActor* GetLevelScriptActor();
	class ULevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);
};

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (FullSize[0x0160] - InheritedSize[0x0160])
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		return ptr;
	}



};

// Class Engine.LevelStreamingDynamic
// 0x0010 (FullSize[0x0170] - InheritedSize[0x0160])
class ULevelStreamingDynamic : public ULevelStreaming
{
public:
	unsigned char                                      bInitiallyLoaded : 1;                                      // 0x0160(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInitiallyVisible : 1;                                     // 0x0160(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3FDI[0xF];                                     // 0x0161(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelStreamingDynamic");
		return ptr;
	}



	class ULevelStreamingDynamic* STATIC_LoadLevelInstanceBySoftObjectPtr(class UObject* worldContextObject, const struct Fvector& location, const struct FRotator& rotation, bool* bOutSuccess);
	class ULevelStreamingDynamic* STATIC_LoadLevelInstance(class UObject* worldContextObject, const struct FString& levelName, const struct Fvector& location, const struct FRotator& rotation, bool* bOutSuccess);
};

// Class Engine.LevelStreamingPersistent
// 0x0000 (FullSize[0x0160] - InheritedSize[0x0160])
class ULevelStreamingPersistent : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}



};

// Class Engine.LevelStreamingVolume
// 0x0018 (FullSize[0x0280] - InheritedSize[0x0268])
class ULevelStreamingVolume : public Uvolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                       // 0x0268(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEditorPreVisOnly : 1;                                     // 0x0278(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisabled : 1;                                             // 0x0278(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C5GB[0x3];                                     // 0x0279(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EStreamingVolumeUsage>          StreamingUsage;                                            // 0x027C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NL67[0x3];                                     // 0x027D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}



};

// Class Engine.LightmappedSurfaceCollection
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        Surfaces;                                                  // 0x0038(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		return ptr;
	}



};

// Class Engine.LightMapTexture2D
// 0x0008 (FullSize[0x00F8] - InheritedSize[0x00F0])
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData_FGFX[0x8];                                     // 0x00F0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}



};

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class ULightmassCharacterIndirectDetailVolume : public Uvolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		return ptr;
	}



};

// Class Engine.LightmassImportanceVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class ULightmassImportanceVolume : public Uvolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightmassImportanceVolume");
		return ptr;
	}



};

// Class Engine.LightmassPortal
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class ULightmassPortal : public Uactor
{
public:
	class ULightmassPortalComponent*                   PortalComponent;                                           // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightmassPortal");
		return ptr;
	}



};

// Class Engine.LightmassPortalComponent
// 0x0010 (FullSize[0x0220] - InheritedSize[0x0210])
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                                // 0x0210(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z3HV[0x8];                                     // 0x0218(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightmassPortalComponent");
		return ptr;
	}



};

// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x0030(0x0018) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		return ptr;
	}



};

// Class Engine.LineBatchComponent
// 0x0048 (FullSize[0x0470] - InheritedSize[0x0428])
class ULineBatchComponent : public UprimitiveComponent
{
public:
	unsigned char                                      UnknownData_72MQ[0x8];                                     // 0x0428(0x0008) Fix Super Size
	unsigned char                                      UnknownData_FGNN[0x40];                                    // 0x0430(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}



};

// Class Engine.LODActor
// 0x0090 (FullSize[0x02C0] - InheritedSize[0x0230])
class ULODActor : public Uactor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x0230(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UmaterialInterface*, class UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents;                             // 0x0238(0x0050) (Edit, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UHLODProxy*                                  Proxy;                                                     // 0x0288(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       key;                                                       // 0x0290(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LODDrawDistance;                                           // 0x029C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                LODLevel;                                                  // 0x02A0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J19I[0x4];                                     // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class Uactor*>                              SubActors;                                                 // 0x02A8(0x0010) (Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CachedNumHLODLevels;                                       // 0x02B8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K8AS[0x7];                                     // 0x02B9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LODActor");
		return ptr;
	}



};

// Class Engine.MapBuildDataRegistry
// 0x0210 (FullSize[0x0240] - InheritedSize[0x0030])
class UMapBuildDataRegistry : public UObject
{
public:
	TEnumAsByte<Engine_ELightingBuildQuality>          LevelLightingQuality;                                      // 0x0030(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LI88[0x20F];                                   // 0x0031(0x020F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MapBuildDataRegistry");
		return ptr;
	}



};

// Class Engine.MATERIAL
// 0x04F0 (FullSize[0x0580] - InheritedSize[0x0090])
class UMATERIAL : public UmaterialInterface
{
public:
	class UphysicalMaterial*                           PhysMaterial;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                          // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UphysicalMaterial*                           PhysicalMaterialMap[0x8];                                  // 0x00A0(0x0040) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                        Metallic;                                                  // 0x00E0(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UY1U[0xC];                                     // 0x00F0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        Specular;                                                  // 0x00FC(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8SKA[0xC];                                     // 0x010C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        Anisotropy;                                                // 0x0118(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DVP9[0xC];                                     // 0x0128(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVectorMaterialInput                        normal;                                                    // 0x0134(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P6YG[0xC];                                     // 0x0144(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVectorMaterialInput                        Tangent;                                                   // 0x0150(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P41X[0xC];                                     // 0x0160(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColorMaterialInput                         EmissiveColor;                                             // 0x016C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2Z8L[0xC];                                     // 0x017C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColorMaterialInput                         CustomColourNoDepth;                                       // 0x0188(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_571P[0xC];                                     // 0x0198(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialDomain>                MaterialDomain;                                            // 0x01A4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBlendMode>                     BlendMode;                                                 // 0x01A5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDecalBlendMode>                DecalBlendMode;                                            // 0x01A6(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialDecalResponse>         MaterialDecalResponse;                                     // 0x01A7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialShadingModel>          ShadingModel;                                              // 0x01A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bCastDynamicShadowAsMasked : 1;                            // 0x01A9(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KOW7[0x2];                                     // 0x01AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      CastMaskedMaterialShadow : 1;                              // 0x01AC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HGCA[0x3];                                     // 0x01AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialShadingModelField                  ShadingModels;                                             // 0x01B0(0x0002) (NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_CWWX[0x2];                                     // 0x01B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OpacityMaskClipValue;                                      // 0x01B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                        WorldPositionOffset;                                       // 0x01B8(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5NKY[0xC];                                     // 0x01C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        Refraction;                                                // 0x01D4(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L93N[0xC];                                     // 0x01E4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x01F0(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J4CQ[0xC];                                     // 0x0204(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        PixelDepthOffset;                                          // 0x0210(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QKF5[0xC];                                     // 0x0220(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FShadingModelMaterialInput                  ShadingModelFromMaterialExpression;                        // 0x022C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZPYA[0xC];                                     // 0x023C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableSeparateTranslucency : 1;                           // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableResponsiveAA : 1;                                   // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScreenSpaceReflections : 1;                               // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bContactShadows : 1;                                       // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      TwoSided : 1;                                              // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DitheredLODTransition : 1;                                 // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DitherOpacityMask : 1;                                     // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowNegativeEmissiveColor : 1;                           // 0x0248(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETranslucencyLightingMode>      TranslucencyLightingMode;                                  // 0x0249(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMobileSeparateTranslucency : 1;                     // 0x024A(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_15ZY[0x1];                                     // 0x024B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumCustomizedUVs;                                          // 0x024C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucencyDirectionalLightingIntensity;                  // 0x0250(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentShadowDensityScale;                             // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentSelfShadowDensityScale;                         // 0x0258(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentSelfShadowSecondDensityScale;                   // 0x025C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentSelfShadowSecondOpacity;                        // 0x0260(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentBackscatteringExponent;                         // 0x0264(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                   // 0x0268(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TranslucentShadowStartOffset;                              // 0x0278(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableDepthTest : 1;                                     // 0x027C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8R2J[0x3];                                     // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenderFragmentOnce : 1;                                   // 0x0280(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4YE2[0x3];                                     // 0x0281(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bWriteOnlyAlpha : 1;                                       // 0x0284(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                     // 0x0284(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTangentSpaceNormal : 1;                                   // 0x0284(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                    // 0x0284(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBlockGI : 1;                                              // 0x0284(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                          // 0x0284(0x0001) BIT_FIELD (DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                 // 0x0284(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithEditorCompositing : 1;                            // 0x0284(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithParticleSprites : 1;                              // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithBeamTrails : 1;                                   // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithMeshParticles : 1;                                // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithNiagaraSprites : 1;                               // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithNiagaraRibbons : 1;                               // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithNiagaraMeshParticles : 1;                         // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithGeometryCache : 1;                                // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithStaticLighting : 1;                               // 0x0285(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithMorphTargets : 1;                                 // 0x0286(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                 // 0x0286(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                        // 0x0286(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithGeometryCollections : 1;                          // 0x0286(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsesDistortion : 1;                                       // 0x0286(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithClothing : 1;                                     // 0x0286(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HE2P[0x1];                                     // 0x0287(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUsedWithWater : 1;                                        // 0x0288(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithHairStrands : 1;                                  // 0x0288(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsedWithLidarPointCloud : 1;                              // 0x0288(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PK96[0x3];                                     // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUsedWithUI : 1;                                           // 0x028C(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                        // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFullyRough : 1;                                           // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFullPrecision : 1;                                     // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseLightmapDirectionality : 1;                            // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ENFQ[0x3];                                     // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForwardRenderUsePreintegratedGFForSimpleIBL : 1;          // 0x0290(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LGR6[0x3];                                     // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseHQForwardReflections : 1;                              // 0x0294(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePlanarForwardReflections : 1;                          // 0x0294(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNormalCurvatureToRoughness : 1;                           // 0x0294(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialTessellationMode>      D3D11TessellationMode;                                     // 0x0295(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                          // 0x0296(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                           // 0x0296(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AllowTranslucentCustomDepthWrites : 1;                     // 0x0296(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Wireframe : 1;                                             // 0x0296(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialShadingRate>           ShadingRate;                                               // 0x0297(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                             // 0x0298(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsMasked : 1;                                             // 0x0298(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsPreviewMaterial : 1;                                    // 0x0298(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsFunctionPreviewMaterial : 1;                            // 0x0298(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMaterialAttributes : 1;                                // 0x0298(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCastRayTracedShadows : 1;                                 // 0x0298(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                             // 0x0298(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSky : 1;                                                // 0x0298(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AHLW[0x3];                                     // 0x0299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseTranslucencyVolumetricFog : 1;                         // 0x029C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7V5A[0x3];                                     // 0x029D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bComputeFogPerPixel : 1;                                   // 0x02A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOutputTranslucentVelocity : 1;                            // 0x02A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                        // 0x02A0(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                        // 0x02A0(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBlendableLocation>             BlendableLocation;                                         // 0x02A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      BlendableOutputAlpha : 1;                                  // 0x02A2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableStencilTest : 1;                                    // 0x02A2(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialStencilCompare>        StencilCompare;                                            // 0x02A3(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      StencilRefValue;                                           // 0x02A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERefractionMode>                RefractionMode;                                            // 0x02A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XVZ3[0x2];                                     // 0x02A6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlendablePriority;                                         // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsBlendable : 1;                                          // 0x02AC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HTTU[0x3];                                     // 0x02AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UsageFlagWarnings;                                         // 0x02B0(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RefractionDepthBias;                                       // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       StateId;                                                   // 0x02B8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDisplacement;                                           // 0x02C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0KIL[0x8C];                                    // 0x02CC(0x008C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialCachedExpressionData               CachedExpressionData;                                      // 0x0358(0x0228) (NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MATERIAL");
		return ptr;
	}



};

// Class Engine.MaterialBillboardComponent
// 0x0018 (FullSize[0x0440] - InheritedSize[0x0428])
class UMaterialBillboardComponent : public UprimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>              Elements;                                                  // 0x0428(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S0PO[0x8];                                     // 0x0438(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialBillboardComponent");
		return ptr;
	}



	void SetElements(TArray<struct FMaterialSpriteElement> NewElements);
	void AddElement(class UmaterialInterface* MATERIAL, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
};

// Class Engine.MaterialExpressionAbs
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q26O[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}



};

// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionActorPositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAdd
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZIN2[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A5IX[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (FullSize[0x0138] - InheritedSize[0x0130])
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              threshold;                                                 // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureColorChannel>           channel;                                                   // 0x0134(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NS4V[0x3];                                     // 0x0135(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAppendVector
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J213[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VGYU[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArccosine
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4U0B[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArccosine");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArccosineFast
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7GOK[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArccosineFast");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArcsine
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_16FE[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArcsine");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArcsineFast
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZRKP[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArcsineFast");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArctangent
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I73M[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArctangent");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArctangent2
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            y;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L6HI[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            x;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PWC0[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArctangent2");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArctangent2Fast
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                            y;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9W3J[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            x;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ELTE[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArctangent2Fast");
		return ptr;
	}



};

// Class Engine.MaterialExpressionArctangentFast
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SM43[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionArctangentFast");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                             // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R85R[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionAtmosphericFogColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightVector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MZ61[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionBentNormalCustomOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBlackBody
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                      // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RMVY[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionBlackBody");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    A;                                                         // 0x0048(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MMJ8[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialAttributesInput                    B;                                                         // 0x0068(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NSVK[0xC];                                     // 0x007C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Alpha;                                                     // 0x0088(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EXKF[0xC];                                     // 0x0098(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialAttributeBlend>        PixelAttributeBlendType;                                   // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialAttributeBlend>        VertexAttributeBlendType;                                  // 0x00A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C5AO[0x2];                                     // 0x00A6(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionBlendMaterialAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x0048(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7G65[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionBreakMaterialAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBumpOffset
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C94N[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Height;                                                    // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A05Z[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            HeightRatioInput;                                          // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0KIX[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HeightRatio;                                               // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReferencePlane;                                            // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ConstCoordinate;                                           // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCameraPositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCameraVectorWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCeil
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AF72[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParameter
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       parameterName;                                             // 0x0048(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       ExpressionGUID;                                            // 0x0054(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CV1A[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVectorParameter
// 0x0018 (FullSize[0x0080] - InheritedSize[0x0068])
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                              // 0x0068(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCustomPrimitiveData;                                   // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      PrimitiveDataIndex;                                        // 0x0079(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0UZ3[0x6];                                     // 0x007A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionChannelMaskParameter
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{
public:
	TEnumAsByte<Engine_EChannelMaskParameterColor>     MaskChannel;                                               // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X0OQ[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            input;                                                     // 0x0084(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZS4L[0xC];                                     // 0x0094(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionChannelMaskParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionClamp
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PZVM[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            min;                                                       // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R57W[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            max;                                                       // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W6U3[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EClampMode>                     ClampMode;                                                 // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PXE7[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDefault;                                                // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDefault;                                                // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}



};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8ILL[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionClearCoatNormalCustomOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCollectionParameter
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                collection;                                                // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       parameterName;                                             // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       ParameterId;                                               // 0x005C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O5FS[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCollectionParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionComment
// 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                sizeX;                                                     // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                sizeY;                                                     // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     text;                                                      // 0x0050(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                CommentColor;                                              // 0x0060(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FontSize;                                                  // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KBZJ[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}



};

// Class Engine.MaterialExpressionComponentMask
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MPAI[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      R : 1;                                                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      G : 1;                                                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      B : 1;                                                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      A : 1;                                                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q7HL[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TUKG[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              G;                                                         // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YEO4[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Bias;                                                      // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              scale;                                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_96OA[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCosine
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WQRR[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCrossProduct
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GS6U[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UDCP[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}



};

// Class Engine.MaterialExpressionScalarParameter
// 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCustomPrimitiveData;                                   // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      PrimitiveDataIndex;                                        // 0x006D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FYKG[0x2];                                     // 0x006E(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{
public:
	class UCurveLinearColor*                           curve;                                                     // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColorAtlas*                      Atlas;                                                     // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            InputTime;                                                 // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6LNR[0x10];                                    // 0x0090(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCurveAtlasRowParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCustom
// 0x0058 (FullSize[0x00A0] - InheritedSize[0x0048])
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                      // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECustomMaterialOutputType>      OutputType;                                                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P2ON[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     description;                                               // 0x0060(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomInput>                        Inputs;                                                    // 0x0070(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomDefine>                       AdditionalDefines;                                         // 0x0080(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             IncludeFilePaths;                                          // 0x0090(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionCustom");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDDX
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7EXK[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDDX");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDDY
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RLSO[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDDY");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDecalDerivative
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDecalDerivative");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDecalLifetimeOpacity");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                               // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XZW5[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstWidth;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstHeight;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7TC7[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDecalMipmapLevel");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDeltaTime
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionDeltaTime : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDeltaTime");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDepthFade
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                 // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BX1Q[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            FadeDistance;                                              // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S4B9[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OpacityDefault;                                            // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeDistanceDefault;                                       // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDepthFade");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EDepthOfFieldFunctionValue>     FunctionValue;                                             // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3H7Y[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Depth;                                                     // 0x004C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T6U4[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                      // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CETB[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDesaturation
// 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4VCI[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Fraction;                                                  // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UY2Q[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                LuminanceFactors;                                          // 0x0080(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistance
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BPJN[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JPQ2[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDistance");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDistanceCullFade");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B75C[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDistanceFieldGradient");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DXRJ[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDistanceToNearestSurface");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDivide
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N450[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F223[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDotProduct
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9ACP[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_US53[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDynamicParameter
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                                // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                DefaultValue;                                              // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ParameterIndex;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CV7N[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionEyeAdaptation");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0090 (FullSize[0x00D8] - InheritedSize[0x0048])
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8UOD[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Inputs[0x4];                                               // 0x0064(0x0040) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q12E[0x34];                                    // 0x00A4(0x0034) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFeatureLevelSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFloor
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IQ7H[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFmod
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E350[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3BKJ[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFmod");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFontSample
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                      // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FontTexturePage;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XPNI[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0028 (FullSize[0x0080] - InheritedSize[0x0058])
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       parameterName;                                             // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       ExpressionGUID;                                            // 0x0064(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       Group;                                                     // 0x0074(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFrac
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MAIS[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFresnel
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                                // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CCAS[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Exponent;                                                  // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            BaseReflectFractionIn;                                     // 0x0068(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZDL2[0xC];                                     // 0x0078(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseReflectFraction;                                       // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            normal;                                                    // 0x0088(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q1KN[0x10];                                    // 0x0098(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFunctionInput
// 0x0098 (FullSize[0x00E0] - InheritedSize[0x0048])
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9XVT[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       InputName;                                                 // 0x0064(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     description;                                               // 0x0070(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       Id;                                                        // 0x0080(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EFunctionInputType>             InputType;                                                 // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C5K1[0xF];                                     // 0x0091(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector4                                    PreviewValue;                                              // 0x00A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                             // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WF9A[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SortPriority;                                              // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCompilingFunctionPreview : 1;                             // 0x00B8(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KY0S[0x27];                                    // 0x00B9(0x0027) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFunctionOutput
// 0x0058 (FullSize[0x00A0] - InheritedSize[0x0048])
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FName                                       OutputName;                                                // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HF1P[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     description;                                               // 0x0058(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SortPriority;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            A;                                                         // 0x006C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TKCF[0xC];                                     // 0x007C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bLastPreviewed : 1;                                        // 0x0088(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PPRB[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       Id;                                                        // 0x008C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SDKC[0x4];                                     // 0x009C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x0048(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_17J9[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct Fguid>                               AttributeGetTypes;                                         // 0x0068(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionGetMaterialAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionGIReplace
// 0x0058 (FullSize[0x00A0] - InheritedSize[0x0048])
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_44GQ[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            StaticIndirect;                                            // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0Q56[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            DynamicIndirect;                                           // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C9HB[0x10];                                    // 0x0090(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionGIReplace");
		return ptr;
	}



};

// Class Engine.MaterialExpressionHairAttributes
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionHairAttributes : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionHairAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionIf
// 0x0098 (FullSize[0x00E0] - InheritedSize[0x0048])
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M2VK[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_943Z[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AGreaterThanB;                                             // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VPDW[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AEqualsB;                                                  // 0x009C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OJJT[0xC];                                     // 0x00AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ALessThanB;                                                // 0x00B8(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_57JM[0xC];                                     // 0x00C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EqualsThreshold;                                           // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstAEqualsB;                                             // 0x00DC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLightmassReplace
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                  // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O1XM[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Lightmass;                                                 // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9LZC[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLightVector
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OFDQ[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IQYZ[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Alpha;                                                     // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R9C6[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstAlpha;                                                // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLogarithm10
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{
public:
	struct FExpressionInput                            x;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DUOP[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionLogarithm10");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLogarithm2
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            x;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1TCR[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionLogarithm2");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0330 (FullSize[0x0378] - InheritedSize[0x0048])
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                 // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HMBE[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Metallic;                                                  // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_04WV[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Specular;                                                  // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FILY[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Roughness;                                                 // 0x009C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F0LP[0xC];                                     // 0x00AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Anisotropy;                                                // 0x00B8(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LXO7[0xC];                                     // 0x00C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            EmissiveColor;                                             // 0x00D4(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UTB5[0xC];                                     // 0x00E4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            opacity;                                                   // 0x00F0(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4MI4[0xC];                                     // 0x0100(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            OpacityMask;                                               // 0x010C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NIVP[0xC];                                     // 0x011C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            normal;                                                    // 0x0128(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JI4B[0xC];                                     // 0x0138(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Tangent;                                                   // 0x0144(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E8ZN[0xC];                                     // 0x0154(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldPositionOffset;                                       // 0x0160(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4CUJ[0xC];                                     // 0x0170(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldDisplacement;                                         // 0x017C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YO1N[0xC];                                     // 0x018C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            TessellationMultiplier;                                    // 0x0198(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J8DD[0xC];                                     // 0x01A8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            SubsurfaceColor;                                           // 0x01B4(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EE6Y[0xC];                                     // 0x01C4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ClearCoat;                                                 // 0x01D0(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KFKN[0xC];                                     // 0x01E0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ClearCoatRoughness;                                        // 0x01EC(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V1I6[0xC];                                     // 0x01FC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AmbientOcclusion;                                          // 0x0208(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W5P6[0xC];                                     // 0x0218(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Refraction;                                                // 0x0224(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5JLM[0xC];                                     // 0x0234(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            CustomizedUVs[0x8];                                        // 0x0240(0x0080) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7BDR[0x60];                                    // 0x02C0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PixelDepthOffset;                                          // 0x0320(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_92HP[0xC];                                     // 0x0330(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ShadingModel;                                              // 0x033C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V5UO[0xC];                                     // 0x034C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            CustomColourNoDepth;                                       // 0x0358(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ERLE[0x10];                                    // 0x0368(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMakeMaterialAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LG18[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMapARPassthroughCameraUV");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// 0x00B8 (FullSize[0x0100] - InheritedSize[0x0048])
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{
public:
	struct FName                                       parameterName;                                             // 0x0048(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       ExpressionGUID;                                            // 0x0054(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialAttributesInput                    input;                                                     // 0x0064(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YM1C[0x10];                                    // 0x0078(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialLayersFunctions                    DefaultLayers;                                             // 0x0088(0x0040) (Edit, NativeAccessSpecifierPublic)
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                              // 0x00C8(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumActiveLayerCallers;                                     // 0x00D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4XW2[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                              // 0x00E0(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumActiveBlendCallers;                                     // 0x00F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLayerGraphBuilt;                                        // 0x00F4(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_94RA[0xB];                                     // 0x00F5(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMaterialAttributeLayers");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                      FunctionParameterInfo;                                     // 0x0050(0x0014) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W0GD[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMaterialLayerOutput
// 0x0000 (FullSize[0x00A0] - InheritedSize[0x00A0])
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMaterialLayerOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                  // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AOYS[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MaterialProxy;                                             // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8420[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMaterialProxyReplace");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMax
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H32E[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UKVY[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMax");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMin
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SMYV[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KBWM[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMin");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMultiply
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FOQ0[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OU1N[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}



};

// Class Engine.MaterialExpressionNoise
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LHD6[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            FilterWidth;                                               // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RIA4[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              scale;                                                     // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Quality;                                                   // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ENoiseFunction>                 NoiseFunction;                                             // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TA5B[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bTurbulence : 1;                                           // 0x008C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4RIZ[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Levels;                                                    // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutputMin;                                                 // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutputMax;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LevelScale;                                                // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTiling : 1;                                               // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J2SK[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           RepeatSize;                                                // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionNoise");
		return ptr;
	}



};

// Class Engine.MaterialExpressionNormalize
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                               // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CV39[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionObjectBounds");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionObjectPositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		return ptr;
	}



};

// Class Engine.MaterialExpressionOneMinus
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1MMT[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPanner
// 0x0068 (FullSize[0x00B0] - InheritedSize[0x0048])
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OCMW[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            time;                                                      // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BP3M[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            speed;                                                     // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GYHJ[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpeedX;                                                    // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedY;                                                    // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ConstCoordinate;                                           // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFractionalPart;                                           // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M3BJ[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleColor
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleDirection");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleMotionBlurFade");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticlePositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleRadius");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleRandom
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleRandom");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleRelativeTime");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleSize
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleSize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleSpeed");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x0108(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FVRY[0x7];                                     // 0x0109(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleSubUVProperties
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionParticleSubUVProperties");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPerInstanceCustomData
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{
public:
	struct FExpressionInput                            DefaultValue;                                              // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G0RV[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstDefaultValue;                                         // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           DataIndex;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CRK0[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPerInstanceCustomData");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPerInstanceFadeAmount");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPixelNormalWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPower
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                      // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ODFF[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Exponent;                                                  // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6RQR[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstExponent;                                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YIAP[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPrecomputedAOMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedLocalBounds");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedNormal");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedPosition");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            CurrentFrame;                                              // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X5SV[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PreviousFrame;                                             // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VJ7J[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionPreviousFrameSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionQualitySwitch
// 0x0070 (FullSize[0x00B8] - InheritedSize[0x0048])
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TT3G[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Inputs[0x3];                                               // 0x0064(0x0030) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5YMX[0x24];                                    // 0x0094(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            normal;                                                    // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U0UT[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            RayTraced;                                                 // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ED7D[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRayTracingQualitySwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TBM4[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                           // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NTU7[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionReflectionVectorWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionReroute
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionReroute : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VCAK[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionReroute");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0078 (FullSize[0x00C0] - InheritedSize[0x0048])
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                    // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I6A2[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            RotationAngle;                                             // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TBG4[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PivotPoint;                                                // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J8JI[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            position;                                                  // 0x009C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E268[0xC];                                     // 0x00AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XQKU[0x4];                                     // 0x00BC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRotator
// 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7PBT[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            time;                                                      // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6C69[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CenterX;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CenterY;                                                   // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              speed;                                                     // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ConstCoordinate;                                           // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRound
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_96V3[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRound");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// 0x00C8 (FullSize[0x0110] - InheritedSize[0x0048])
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            BaseColor;                                                 // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XBPY[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Specular;                                                  // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_019D[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Roughness;                                                 // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6D3U[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            normal;                                                    // 0x009C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1E0U[0xC];                                     // 0x00AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldHeight;                                               // 0x00B8(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XWJE[0xC];                                     // 0x00C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            opacity;                                                   // 0x00D4(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1PM2[0xC];                                     // 0x00E4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Mask;                                                      // 0x00F0(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4Q6Q[0x10];                                    // 0x0100(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FG5N[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            VirtualTextureOutput;                                      // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NQUC[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureReplace");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// 0x0068 (FullSize[0x00B0] - InheritedSize[0x0048])
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NHH6[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WorldPosition;                                             // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QGX4[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            MipValue;                                                  // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WQ11[0x10];                                    // 0x0090(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class URuntimeVirtualTexture*                      VirtualTexture;                                            // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ERuntimeVirtualTextureMaterialType          MaterialType;                                              // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSinglePhysicalSpace;                                      // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERuntimeVirtualTextureMipValueMode> MipValueMode;                                              // 0x00AA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MLMN[0x5];                                     // 0x00AB(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureSample");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{
public:
	struct FName                                       parameterName;                                             // 0x00B0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       ExpressionGUID;                                            // 0x00BC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       Group;                                                     // 0x00CC(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSaturate
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WQBI[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSaturate");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneColor
// 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YX4J[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            input;                                                     // 0x004C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5S80[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            OffsetFraction;                                            // 0x0068(0x0010) (Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HPHL[0xC];                                     // 0x0078(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   ConstInput;                                                // 0x0084(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UXGP[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSceneColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneDepth
// 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ONYU[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            input;                                                     // 0x004C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1SGN[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Coordinates;                                               // 0x0068(0x0010) (Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YEE3[0xC];                                     // 0x0078(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   ConstInput;                                                // 0x0084(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4S07[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSceneTexelSize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneTexture
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PMN0[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESceneTextureId>                SceneTextureId;                                            // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFiltered;                                                 // 0x0065(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N7A8[0x2];                                     // 0x0066(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}



};

// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>                    Inputs;                                                    // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Fguid>                               AttributeSetTypes;                                         // 0x0058(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSetMaterialAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionShaderStageSwitch
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            PixelShader;                                               // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I7XG[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            VertexShader;                                              // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JQHZ[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionShaderStageSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionShadingModel
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionShadingModel : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialShadingModel>          ShadingModel;                                              // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E69J[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionShadingModel");
		return ptr;
	}



};

// Class Engine.MaterialExpressionShadingPathSwitch
// 0x0070 (FullSize[0x00B8] - InheritedSize[0x0048])
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1QQG[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Inputs[0x3];                                               // 0x0064(0x0030) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QRV0[0x24];                                    // 0x0094(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionShadingPathSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionShadowReplace
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionShadowReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OF5Z[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Shadow;                                                    // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZJ5I[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionShadowReplace");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSign
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSign : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JQCQ[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSign");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSine
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M0M4[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// 0x0058 (FullSize[0x00A0] - InheritedSize[0x0048])
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            ScatteringCoefficients;                                    // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_49DH[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            AbsorptionCoefficients;                                    // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6PY7[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            PhaseG;                                                    // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SRF8[0x10];                                    // 0x0090(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{
public:
	int                                                LightIndex;                                                // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5GJ6[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightDirection");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                                // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                            WorldPosition;                                             // 0x004C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MJTD[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                                // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C7QA[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                             // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U9PY[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereViewLuminance");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSobol
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UMaterialExpressionSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            Cell;                                                      // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4S6B[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            index;                                                     // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EWLR[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            seed;                                                      // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NN49[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ConstIndex;                                                // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ConstSeed;                                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSobol");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSpeedTree
// 0x0080 (FullSize[0x00C8] - InheritedSize[0x0048])
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	struct FExpressionInput                            GeometryInput;                                             // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q8GI[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            WindInput;                                                 // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E7MC[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            LODInput;                                                  // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HGDD[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            ExtraBendWS;                                               // 0x009C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GI27[0xC];                                     // 0x00AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESpeedTreeGeometryType>         GeometryType;                                              // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESpeedTreeWindType>             WindType;                                                  // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESpeedTreeLODType>              LODType;                                                   // 0x00BA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SDW6[0x1];                                     // 0x00BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BillboardThreshold;                                        // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAccurateWindVelocities;                                   // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9ADA[0x7];                                     // 0x00C1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSpeedTree");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSphereMask
// 0x0078 (FullSize[0x00C0] - InheritedSize[0x0048])
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UD3J[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_52S9[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            radius;                                                    // 0x0080(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PUXD[0xC];                                     // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Hardness;                                                  // 0x009C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0I6X[0xC];                                     // 0x00AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AttenuationRadius;                                         // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HardnessPercent;                                           // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                   // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XMQY[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstantDensity;                                           // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSphericalParticleOpacity");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSquareRoot
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O356[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticBool
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                 // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4O8J[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_079Q[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            input;                                                     // 0x0068(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5GYA[0xC];                                     // 0x0078(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      DefaultR : 1;                                              // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DefaultG : 1;                                              // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DefaultB : 1;                                              // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DefaultA : 1;                                              // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DCHO[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticSwitch
// 0x0058 (FullSize[0x00A0] - InheritedSize[0x0048])
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XEXW[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            A;                                                         // 0x004C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VYGK[0xC];                                     // 0x005C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0068(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H9JX[0xC];                                     // 0x0078(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Value;                                                     // 0x0084(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TOV1[0xC];                                     // 0x0094(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I7PQ[0xC];                                     // 0x0080(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x008C(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3IIS[0xC];                                     // 0x009C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSubtract
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UGIU[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            B;                                                         // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U5TV[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstA;                                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConstB;                                                    // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTangent
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ECAK[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTangent");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTangentOutput
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FIKG[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTangentOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTemporalSobol
// 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            index;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HYC1[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            seed;                                                      // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YM6Q[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ConstIndex;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ConstSeed;                                                 // 0x0084(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U61F[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTemporalSobol");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                           // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UTiling;                                                   // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VTiling;                                                   // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnMirrorU : 1;                                             // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnMirrorV : 1;                                             // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W1VO[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureObject
// 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (FullSize[0x0130] - InheritedSize[0x0130])
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureProperty
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureObject;                                             // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5FCO[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialExposedTextureProperty> Property;                                                  // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PVZL[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureProperty");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// 0x0000 (FullSize[0x0130] - InheritedSize[0x0130])
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2DArray");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (FullSize[0x0130] - InheritedSize[0x0130])
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (FullSize[0x0138] - InheritedSize[0x0130])
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x0130(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PYSR[0x7];                                     // 0x0131(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// 0x0000 (FullSize[0x0130] - InheritedSize[0x0130])
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterVolume");
		return ptr;
	}



};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            TransmittanceColor;                                        // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OLVA[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionThinTranslucentMaterialOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTime
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                          // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverride_Period : 1;                                      // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XJIF[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTransform
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GR4H[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialVectorCoordTransformSource> TransformSourceType;                                       // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialVectorCoordTransform>  TransformType;                                             // 0x0065(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K29X[0x2];                                     // 0x0066(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTransformPosition
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EO8N[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformSourceType;                                       // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformType;                                             // 0x0065(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QWOA[0x2];                                     // 0x0066(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTruncate
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G50V[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTruncate");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVectorNoise
// 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            position;                                                  // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_80LA[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EVectorNoiseFunction>           NoiseFunction;                                             // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4PCJ[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Quality;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTiling : 1;                                               // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L0SN[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           TileSize;                                                  // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SPHO[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionVectorNoise");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVertexInterpolator
// 0x0028 (FullSize[0x0070] - InheritedSize[0x0048])
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            input;                                                     // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L4EW[0x18];                                    // 0x0058(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionVertexInterpolator");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionVertexNormalWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVertexTangentWS
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionVertexTangentWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionViewProperty
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialExposedViewProperty>   Property;                                                  // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VCGB[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionViewProperty");
		return ptr;
	}



};

// Class Engine.MaterialExpressionViewSize
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionViewSize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            No;                                                        // 0x0048(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZEA1[0xC];                                     // 0x0058(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Yes;                                                       // 0x0064(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7U41[0xC];                                     // 0x0074(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionVirtualTextureFeatureSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EWorldPositionIncludedOffsets>  WorldPositionShaderOffset;                                 // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SWHQ[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}



};

// Class Engine.MaterialFunctionInterface
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UMaterialFunctionInterface : public UObject
{
public:
	struct Fguid                                       StateId;                                                   // 0x0030(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EMaterialFunctionUsage                      MaterialFunctionUsage;                                     // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_F4N4[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialFunctionInterface");
		return ptr;
	}



};

// Class Engine.MaterialFunction
// 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
class UMaterialFunction : public UMaterialFunctionInterface
{
public:
	struct FString                                     description;                                               // 0x0048(0x0010) (Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExposeToLibrary : 1;                                      // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPrefixParameterNames : 1;                                 // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReentrantFlag : 1;                                        // 0x0058(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_00LO[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialFunction");
		return ptr;
	}



};

// Class Engine.MaterialFunctionInstance
// 0x0080 (FullSize[0x00C8] - InheritedSize[0x0048])
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{
public:
	class UMaterialFunctionInterface*                  Parent;                                                    // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunctionInterface*                  Base;                                                      // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                     // 0x0058(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                     // 0x0068(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                    // 0x0078(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                       // 0x0088(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticSwitchParameter>              StaticSwitchParameterValues;                               // 0x0098(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticComponentMaskParameter>       StaticComponentMaskParameterValues;                        // 0x00A8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                      // 0x00B8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialFunctionInstance");
		return ptr;
	}



};

// Class Engine.MaterialFunctionMaterialLayer
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialFunctionMaterialLayer");
		return ptr;
	}



};

// Class Engine.MaterialFunctionMaterialLayerInstance
// 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerInstance");
		return ptr;
	}



};

// Class Engine.MaterialFunctionMaterialLayerBlend
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerBlend");
		return ptr;
	}



};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerBlendInstance");
		return ptr;
	}



};

// Class Engine.MaterialInstanceActor
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class UMaterialInstanceActor : public Uactor
{
public:
	TArray<class Uactor*>                              TargetActors;                                              // 0x0230(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}



};

// Class Engine.MaterialInstanceDynamic
// 0x0050 (FullSize[0x0460] - InheritedSize[0x0410])
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	unsigned char                                      UnknownData_5V5B[0x50];                                    // 0x0410(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialInstanceDynamic");
		return ptr;
	}



	void SetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& Value);
	void SetVectorParameterValue(const struct FName& parameterName, const struct FLinearColor& Value);
	void SetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class Utexture* Value);
	void SetTextureParameterValue(const struct FName& parameterName, class Utexture* Value);
	void SetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float Value);
	void SetScalarParameterValue(const struct FName& parameterName, float Value);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha);
	struct FLinearColor K2_GetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& parameterName);
	class Utexture* K2_GetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	class Utexture* K2_GetTextureParameterValue(const struct FName& parameterName);
	float K2_GetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	float K2_GetScalarParameterValue(const struct FName& parameterName);
	void K2_CopyMaterialInstanceParameters(class UmaterialInterface* source, bool bQuickParametersOnly);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	void CopyInterpParameters(class UMaterialInstance* source);
};

// Class Engine.MaterialParameterCollection
// 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
class UMaterialParameterCollection : public UObject
{
public:
	struct Fguid                                       StateId;                                                   // 0x0030(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                          // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                          // 0x0050(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O9YL[0x20];                                    // 0x0060(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialParameterCollection");
		return ptr;
	}



};

// Class Engine.MaterialParameterCollectionInstance
// 0x00C8 (FullSize[0x00F8] - InheritedSize[0x0030])
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData_1E95[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialParameterCollection*                collection;                                                // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_TKKZ[0xB8];                                    // 0x0040(0x00B8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MaterialParameterCollectionInstance");
		return ptr;
	}



};

// Class Engine.MatineeActor
// 0x00B0 (FullSize[0x02E0] - InheritedSize[0x0230])
class UMatineeActor : public Uactor
{
public:
	class UInterpData*                                 MatineeData;                                               // 0x0230(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       MatineeControllerName;                                     // 0x0238(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              playRate;                                                  // 0x0244(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlayOnLevelLoad : 1;                                      // 0x0248(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceStartPos : 1;                                        // 0x0248(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OKL0[0x3];                                     // 0x0249(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStartPosition;                                        // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRewindOnPlay : 1;                                         // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoResetOnRewind : 1;                                      // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                               // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableRadioFilter : 1;                                   // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClientSideOnly : 1;                                       // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                               // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSkippable : 1;                                          // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6145[0x3];                                     // 0x0251(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PreferredSplitScreenNum;                                   // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableMovementInput : 1;                                 // 0x0258(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableLookAtInput : 1;                                   // 0x0258(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHidePlayer : 1;                                           // 0x0258(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHideHud : 1;                                              // 0x0258(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I1IR[0x7];                                     // 0x0259(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                           // 0x0260(0x0010) (Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldShowGore : 1;                                       // 0x0270(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QJ65[0x7];                                     // 0x0271(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpGroupInst*>                    GroupInst;                                                 // 0x0278(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                                // 0x0288(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsPlaying : 1;                                            // 0x0298(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReversePlayback : 1;                                      // 0x0298(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPaused : 1;                                               // 0x0298(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPendingStop : 1;                                          // 0x0298(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_02GE[0x3];                                     // 0x0299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpPosition;                                            // 0x029C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J9N7[0x4];                                     // 0x02A0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ReplicationForceIsPlaying;                                 // 0x02A4(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_5S9O[0x3];                                     // 0x02A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnPlay;                                                    // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStop;                                                    // 0x02B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPause;                                                   // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WL65[0x8];                                     // 0x02D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}



	void stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void reverse();
	void Play();
	void Pause();
	void EnableGroupByName(const struct FString& groupName, bool bEnable);
	void ChangePlaybackDirection();
};

// Class Engine.MatineeActorCameraAnim
// 0x0008 (FullSize[0x02E8] - InheritedSize[0x02E0])
class UMatineeActorCameraAnim : public UMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                                // 0x02E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MatineeActorCameraAnim");
		return ptr;
	}



};

// Class Engine.MatineeAnimInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UMatineeAnimInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MatineeAnimInterface");
		return ptr;
	}



};

// Class Engine.MatineeInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UMatineeInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MatineeInterface");
		return ptr;
	}



};

// Class Engine.MeshMergeCullingVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class UMeshMergeCullingVolume : public Uvolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MeshMergeCullingVolume");
		return ptr;
	}



};

// Class Engine.MeshSimplificationSettings
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       MeshReductionModuleName;                                   // 0x0048(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TYQP[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MeshSimplificationSettings");
		return ptr;
	}



};

// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MeshVertexPainterKismetLibrary");
		return ptr;
	}



	void STATIC_RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);
	void STATIC_PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB);
	void STATIC_PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, Engine_EVertexPaintAxis Axis, bool bConvertToSRGB);
};

// Class Engine.MicroTransactionBase
// 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                         // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LastError;                                                 // 0x0050(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LastErrorSolution;                                         // 0x0060(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MicroTransactionBase");
		return ptr;
	}



};

// Class Engine.ModelComponent
// 0x0048 (FullSize[0x0470] - InheritedSize[0x0428])
class UModelComponent : public UprimitiveComponent
{
public:
	unsigned char                                      UnknownData_KZ4O[0x8];                                     // 0x0428(0x0008) Fix Super Size
	unsigned char                                      UnknownData_OVSD[0x10];                                    // 0x0430(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  ModelBodySetup;                                            // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_093W[0x28];                                    // 0x0448(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}



};

// Class Engine.MorphTarget
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1H5S[0x10];                                    // 0x0038(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}



};

// Class Engine.NavAgentInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNavAgentInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavAgentInterface");
		return ptr;
	}



};

// Class Engine.NavCollisionBase
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UNavCollisionBase : public UObject
{
public:
	unsigned char                                      bIsDynamicObstacle : 1;                                    // 0x0030(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_HEF1[0x47];                                    // 0x0031(0x0047) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavCollisionBase");
		return ptr;
	}



};

// Class Engine.NavEdgeProviderInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNavEdgeProviderInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavEdgeProviderInterface");
		return ptr;
	}



};

// Class Engine.NavigationDataChunk
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                        // 0x0030(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EFPP[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavigationDataChunk");
		return ptr;
	}



};

// Class Engine.NavigationDataInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNavigationDataInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavigationDataInterface");
		return ptr;
	}



};

// Class Engine.NavigationSystemBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNavigationSystemBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavigationSystemBase");
		return ptr;
	}



};

// Class Engine.NavigationSystemConfig
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UNavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                              NavigationSystemClass;                                     // 0x0030(0x0020) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                           SupportedAgentsMask;                                       // 0x0050(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                       DefaultAgentName;                                          // 0x0054(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsOverriden : 1;                                          // 0x0060(0x0001) BIT_FIELD (Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_7O4O[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavigationSystemConfig");
		return ptr;
	}



};

// Class Engine.NullNavSysConfig
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class UNullNavSysConfig : public UNavigationSystemConfig
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NullNavSysConfig");
		return ptr;
	}



};

// Class Engine.NavLinkDefinition
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                     // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                              // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1PI6[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavLinkDefinition");
		return ptr;
	}



};

// Class Engine.NavPathObserverInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNavPathObserverInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavPathObserverInterface");
		return ptr;
	}



};

// Class Engine.NavRelevantInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNavRelevantInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NavRelevantInterface");
		return ptr;
	}



};

// Class Engine.SimulatedClientNetConnection
// 0x0000 (FullSize[0x1A48] - InheritedSize[0x1A48])
class USimulatedClientNetConnection : public UNetConnection
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SimulatedClientNetConnection");
		return ptr;
	}



};

// Class Engine.NetPushModelHelpers
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NetPushModelHelpers");
		return ptr;
	}



	void STATIC_MarkPropertyDirtyFromRepIndex(class UObject* Object, int RepIndex, const struct FName& propertyName);
	void STATIC_MarkPropertyDirty(class UObject* Object, const struct FName& propertyName);
};

// Class Engine.NetworkPredictionInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNetworkPredictionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NetworkPredictionInterface");
		return ptr;
	}



};

// Class Engine.NetworkSettings
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                           // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMultiplayerWorldOriginRebasing : 1;                 // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5N72[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxRepArraySize;                                           // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxRepArrayMemory;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3QQF[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;                                  // 0x0058(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NetworkSettings");
		return ptr;
	}



};

// Class Engine.NodeMappingContainer
// 0x0150 (FullSize[0x0180] - InheritedSize[0x0030])
class UNodeMappingContainer : public UObject
{
public:
	TMap<struct FName, struct FNodeItem>               SourceItems;                                               // 0x0030(0x0050) (Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<struct FName, struct FNodeItem>               TargetItems;                                               // 0x0080(0x0050) (Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<struct FName, struct FName>                   SourceToTarget;                                            // 0x00D0(0x0050) (Edit, NativeAccessSpecifierPrivate)
	unsigned char                                      SourceAsset[0x30];                                         // 0x0120(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
	unsigned char                                      TargetAsset[0x30];                                         // 0x0150(0x0030) UNKNOWN PROPERTY: SoftObjectProperty


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NodeMappingContainer");
		return ptr;
	}



};

// Class Engine.NodeMappingProviderInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UNodeMappingProviderInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.NodeMappingProviderInterface");
		return ptr;
	}



};

// Class Engine.Note
// 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
class UNote : public Uactor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Note");
		return ptr;
	}



};

// Class Engine.ObjectLibrary
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                           // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasBlueprintClasses;                                      // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KCNJ[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             Objects;                                                   // 0x0040(0x0010) (Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                               // 0x0050(0x0010) (ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseWeakReferences;                                        // 0x0060(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsFullyLoaded;                                            // 0x0061(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_G0GY[0x4E];                                    // 0x0062(0x004E) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ObjectLibrary");
		return ptr;
	}



};

// Class Engine.ObjectReferencer
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                         // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}



};

// Class Engine.ObjectTraceWorldSubsystem
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData_XRHR[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ObjectTraceWorldSubsystem");
		return ptr;
	}



};

// Class Engine.PackageMapClient
// 0x0318 (FullSize[0x0400] - InheritedSize[0x00E8])
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData_GE0N[0x318];                                   // 0x00E8(0x0318) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PackageMapClient");
		return ptr;
	}



};

// Class Engine.PainCausingVolume
// 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
class UPainCausingVolume : public UPhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                          // 0x0278(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IASA[0x3];                                     // 0x0279(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamagePerSec;                                              // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DamageType;                                                // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PainInterval;                                              // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEntryPain : 1;                                            // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      BACKUP_bPainCausing : 1;                                   // 0x028C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0ELK[0x3];                                     // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Ucontroller*                                 DamageInstigator;                                          // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_061N[0x8];                                     // 0x0298(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PainCausingVolume");
		return ptr;
	}



};

// Class Engine.ParticleEmitter
// 0x01A0 (FullSize[0x01D0] - InheritedSize[0x0030])
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                               // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubUVDataOffset;                                           // 0x003C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EEmitterRenderMode>             EmitterRenderMode;                                         // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleSignificanceLevel                  SignificanceLevel;                                         // 0x0041(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KCY0[0x1];                                     // 0x0042(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseLegacySpawningBehavior : 1;                            // 0x0043(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y9RB : 3;                                      // 0x0043(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      ConvertedModules : 1;                                      // 0x0043(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsSoloing : 1;                                            // 0x0043(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCookedOut : 1;                                            // 0x0043(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                         // 0x0043(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableWhenInsignficant : 1;                              // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1FJG[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                 // 0x0048(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PeakActiveParticles;                                       // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InitialAllocationCount;                                    // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              QualityLevelSpawnRateScale;                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           DetailModeBitmask;                                         // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BHVRDetailModeBitMask;                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IG1K[0x164];                                   // 0x006C(0x0164) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}



};

// Class Engine.ParticleEventManager
// 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
class UParticleEventManager : public Uactor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleEventManager");
		return ptr;
	}



};

// Class Engine.ParticleLODLevel
// 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
class UParticleLODLevel : public UObject
{
public:
	int                                                level;                                                     // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x0034(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I0Z0[0x3];                                     // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleModuleRequired*                     RequiredModule;                                            // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                     Modules;                                                   // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                            // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleSpawn*                        SpawnModule;                                               // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleEventGenerator*               EventGenerator;                                            // 0x0060(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                           // 0x0068(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                     SpawnModules;                                              // 0x0078(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                     UpdateModules;                                             // 0x0088(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                              // 0x0098(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                      // 0x00A8(0x0010) (ZeroConstructor, Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ConvertedModules : 1;                                      // 0x00B8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WTU2[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PeakActiveParticles;                                       // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}



};

// Class Engine.ParticleModule
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                          // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateModule : 1;                                         // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFinalUpdateModule : 1;                                    // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                  // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCurvesAsColor : 1;                                        // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      b3DDrawMode : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupported3DDrawMode : 1;                                  // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEditable : 1;                                             // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LODDuplicate : 1;                                          // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportsRandomSeed : 1;                                   // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRequiresLoopingNotification : 1;                          // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LODValidity;                                               // 0x0032(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8PPG[0x5];                                     // 0x0033(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                   // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0CTJ[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleAcceleration
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                              // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_83OU[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct Fvector                                     Acceleration;                                              // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2Q3H[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAccelerationConstant");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationDrag
// 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                           // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       DragCoefficientRaw;                                        // 0x0048(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAccelerationDrag");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                 // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       DragScaleRaw;                                              // 0x0048(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAccelerationDragScaleOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                             // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleAttractorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorLine
// 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct Fvector                                     EndPoint0;                                                 // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     EndPoint1;                                                 // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       range;                                                     // 0x0050(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Strength;                                                  // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorParticle
// 0x0088 (FullSize[0x00C0] - InheritedSize[0x0038])
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0038(0x000C) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XYWC[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       range;                                                     // 0x0048(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bStrengthByDistance : 1;                                   // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1M2T[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       Strength;                                                  // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MBCA[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAttractorParticleSelectionMethod> SelectionMethod;                                           // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GB00[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenewSource : 1;                                          // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritSourceVel : 1;                                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S62I[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LastSelIndex;                                              // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorPoint
// 0x00B0 (FullSize[0x00E8] - InheritedSize[0x0038])
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      position;                                                  // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       range;                                                     // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00B0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      StrengthByDistance : 1;                                    // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideVelocity : 1;                                     // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseWorldSpacePosition : 1;                                // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_X : 1;                                            // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Y : 1;                                            // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Z : 1;                                            // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_X : 1;                                            // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Y : 1;                                            // 0x00E1(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Z : 1;                                            // 0x00E1(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UKKY[0x6];                                     // 0x00E2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorPointGravity
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct Fvector                                     position;                                                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              radius;                                                    // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloat*                          Strength;                                                  // 0x0048(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StrengthRaw;                                               // 0x0050(0x0030) (Edit, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleAttractorPointGravity");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleBeamBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamModifier
// 0x00D8 (FullSize[0x0110] - InheritedSize[0x0038])
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeamModifierType>              ModifierType;                                              // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_W9HP[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        PositionOptions;                                           // 0x003C(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      position;                                                  // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBeamModifierOptions                        TangentOptions;                                            // 0x0088(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2GR1[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Tangent;                                                   // 0x0090(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAbsoluteTangent : 1;                                      // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7SC8[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        StrengthOptions;                                           // 0x00DC(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00E0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamNoise
// 0x0160 (FullSize[0x0198] - InheritedSize[0x0038])
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                      // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7RBW[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                frequency;                                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Frequency_LowRange;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X53Z[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseRange;                                                // 0x0048(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       NoiseRangeScale;                                           // 0x0090(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bNRScaleEmitterTime : 1;                                   // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ATC7[0x7];                                     // 0x00C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseSpeed;                                                // 0x00C8(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bSmooth : 1;                                               // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CXB6[0x3];                                     // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockRadius;                                           // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoiseLock : 1;                                            // 0x0118(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOscillate : 1;                                            // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YUXM[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockTime;                                             // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseTension;                                              // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseNoiseTangents : 1;                                     // 0x0124(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O7P1[0x3];                                     // 0x0125(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                      // 0x0128(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                NoiseTessellation;                                         // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTargetNoise : 1;                                          // 0x015C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EN1G[0x3];                                     // 0x015D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FrequencyDistance;                                         // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyNoiseScale : 1;                                      // 0x0164(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TKCY[0x3];                                     // 0x0165(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseScale;                                                // 0x0168(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamSource
// 0x00F0 (FullSize[0x0128] - InheritedSize[0x0038])
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       SourceMethod;                                              // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_923B[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSourceAbsolute : 1;                                       // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5GUY[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      source;                                                    // 0x0050(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSource : 1;                                           // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RVYD[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> SourceTangentMethod;                                       // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7KMF[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      SourceTangent;                                             // 0x00A0(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSourceTangent : 1;                                    // 0x00E8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FVDM[0x7];                                     // 0x00E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x00F0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x0120(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5ZTA[0x7];                                     // 0x0121(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamTarget
// 0x00F0 (FullSize[0x0128] - InheritedSize[0x0038])
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       TargetMethod;                                              // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BJRK[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       TargetName;                                                // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      target;                                                    // 0x0048(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bTargetAbsolute : 1;                                       // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLockTarget : 1;                                           // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EXGZ[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> TargetTangentMethod;                                       // 0x0094(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QO7K[0x3];                                     // 0x0095(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      TargetTangent;                                             // 0x0098(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockTargetTangent : 1;                                    // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_49BS[0x7];                                     // 0x00E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TargetStrength;                                            // 0x00E8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockTargetStength : 1;                                    // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A852[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LockRadius;                                                // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IM33[0x8];                                     // 0x0120(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}



};

// Class Engine.ParticleModuleCameraBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleCameraBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleCameraOffset
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                              // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bSpawnTimeOnly : 1;                                        // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AVA7[0x3];                                     // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleCameraOffsetUpdateMethod> UpdateMethod;                                              // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H02J[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		return ptr;
	}



};

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleCollisionBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleCollision
// 0x0160 (FullSize[0x0198] - InheritedSize[0x0038])
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                             // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      DampingFactorRotation;                                     // 0x0080(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       MaxCollisions;                                             // 0x00C8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleCollisionComplete>     CollisionCompletionOption;                                 // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I29V[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       CollisionTypes;                                            // 0x0100(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YKT4[0x8];                                     // 0x0110(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bApplyPhysics : 1;                                         // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreTriggerVolumes : 1;                                 // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O8XS[0x7];                                     // 0x0119(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       ParticleMass;                                              // 0x0120(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              DirScalar;                                                 // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                             // 0x0154(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                    // 0x0154(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MCKF[0x3];                                     // 0x0155(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VerticalFudgeFactor;                                       // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UVM7[0x4];                                     // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       DelayAmount;                                               // 0x0160(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bDropDetail : 1;                                           // 0x0190(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                 // 0x0190(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreSourceActor : 1;                                    // 0x0190(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_401Z[0x3];                                     // 0x0191(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxCollisionDistance;                                      // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}



};

// Class Engine.ParticleModuleCollisionGPU
// 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                                // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                   // 0x0068(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              Friction;                                                  // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomSpread;                                              // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomDistribution;                                        // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RadiusScale;                                               // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RadiusBias;                                                // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleCollisionResponse>     Response;                                                  // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleCollisionMode>         CollisionMode;                                             // 0x00AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PXJS[0x2];                                     // 0x00AE(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleCollisionGPU");
		return ptr;
	}



};

// Class Engine.ParticleModuleColorBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleColorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleColor
// 0x0080 (FullSize[0x00B8] - InheritedSize[0x0038])
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                                // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StartAlpha;                                                // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bClampAlpha : 1;                                           // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WIS0[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}



};

// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00B8(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleColorOverLife
// 0x0080 (FullSize[0x00B8] - InheritedSize[0x0038])
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                             // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       AlphaOverLife;                                             // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bClampAlpha : 1;                                           // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WXBB[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleColorScaleOverLife
// 0x0080 (FullSize[0x00B8] - InheritedSize[0x0038])
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                        // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bEmitterTime : 1;                                          // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AP3Z[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleEventBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventGenerator
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                    // 0x0038(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<Engine_EParticleEventType>             EventGeneratorType;                                        // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PAOK[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       EventName;                                                 // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                         // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZLR8[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0098 (FullSize[0x00E0] - InheritedSize[0x0048])
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                                // 0x0048(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bUseParticleTime : 1;                                      // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePSysLocation : 1;                                      // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritVelocity : 1;                                      // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L5NW[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      InheritVelocityScale;                                      // 0x0080(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UphysicalMaterial*>                   PhysicalMaterials;                                         // 0x00C8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bBanPhysicalMaterials : 1;                                 // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N5PR[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleEventSendToGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		return ptr;
	}



};

// Class Engine.ParticleModuleKillBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleKillBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleKillBox
// 0x0098 (FullSize[0x00D0] - InheritedSize[0x0038])
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                           // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      UpperRightCorner;                                          // 0x0080(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAbsolute : 1;                                             // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bKillInside : 1;                                           // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                              // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BKFA[0x7];                                     // 0x00C9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}



};

// Class Engine.ParticleModuleKillHeight
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                    // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bAbsolute : 1;                                             // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFloor : 1;                                                // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyPSysScale : 1;                                       // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AAIG[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}



};

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleLifetimeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleLifetime
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       lifeTime;                                                  // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}



};

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLightBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleLightBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLightBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleLight
// 0x00F0 (FullSize[0x0128] - InheritedSize[0x0038])
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                 // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAffectsTranslucency;                                      // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPreviewLightRadius;                                       // 0x003A(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_P66Y[0x1];                                     // 0x003B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpawnFraction;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       BrightnessOverLife;                                        // 0x0088(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       RadiusScale;                                               // 0x00B8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       LightExponent;                                             // 0x00E8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FlightingChannels                           lightingChannels;                                          // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AJFE[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VolumetricScatteringIntensity;                             // 0x011C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHighQualityLights;                                        // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShadowCastingLights;                                      // 0x0121(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1WR3[0x6];                                     // 0x0122(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLight");
		return ptr;
	}



};

// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (FullSize[0x0148] - InheritedSize[0x0128])
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0128(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLight_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleLocationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocation
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                             // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              DistributeOverNPoints;                                     // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistributeThreshold;                                       // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0088(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationBoneSocketSource>      SourceType;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MQAE[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     UniversalOffset;                                           // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                           // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ELocationBoneSocketSelectionMethod> SelectionMethod;                                           // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GLH1[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x005C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_46M0[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritVelocityScale;                                      // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SkelMeshActorParamName;                                    // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumPreSelectedIndices;                                     // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IU9Z[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationDirect
// 0x0120 (FullSize[0x0158] - InheritedSize[0x0038])
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      location;                                                  // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      LocationOffset;                                            // 0x0080(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      scaleFactor;                                               // 0x00C8(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      direction;                                                 // 0x0110(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0038(0x000C) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ELocationEmitterSelectionMethod> SelectionMethod;                                           // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K3ZO[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      InheritSourceVelocity : 1;                                 // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2H42[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceVelocityScale;                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritSourceRotation : 1;                                // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O28B[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceRotationScale;                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0038(0x000C) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZI41[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0080 (FullSize[0x00B8] - InheritedSize[0x0038])
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                            // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Y : 1;                                            // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Positive_Z : 1;                                            // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_X : 1;                                            // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Y : 1;                                            // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Negative_Z : 1;                                            // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      SurfaceOnly : 1;                                           // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      Velocity : 1;                                              // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NWEU[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       VelocityScale;                                             // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                      StartLocation;                                             // 0x0070(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0070 (FullSize[0x0128] - InheritedSize[0x00B8])
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                        // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KA3Z[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00C0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StartHeight;                                               // 0x00F0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECylinderHeightAxis>            HeightAxis;                                                // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3QLS[0x7];                                     // 0x0121(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (FullSize[0x0148] - InheritedSize[0x0128])
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0128(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00B8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (FullSize[0x0108] - InheritedSize[0x00E8])
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00E8(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00D8 (FullSize[0x0110] - InheritedSize[0x0038])
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                               // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Height;                                                    // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       angle;                                                     // 0x00B0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Thickness;                                                 // 0x00E0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveTriangle");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0068 (FullSize[0x00A0] - InheritedSize[0x0038])
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationSkelVertSurfaceSource> SourceType;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UGQQ[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     UniversalOffset;                                           // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JQ48[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritVelocityScale;                                      // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SkelMeshActorParamName;                                    // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7DAF[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               ValidAssociatedBones;                                      // 0x0060(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnforceNormalCheck : 1;                                   // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WH0O[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     NormalToCompare;                                           // 0x0074(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalCheckToleranceDegrees;                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalCheckTolerance;                                      // 0x0084(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        ValidMaterialIndices;                                      // 0x0088(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritVertexColor : 1;                                   // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritUV : 1;                                            // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MGBW[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           InheritUVChannel;                                          // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationStaticVertSurface
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleLocationStaticVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationStaticVertSurfaceSource> SourceType;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BVNW[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     UniversalOffset;                                           // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_PPOK[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       StaticMeshActorParamName;                                  // 0x004C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnforceNormalCheck : 1;                                   // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9AUL[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     NormalToCompare;                                           // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalCheckToleranceDegrees;                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalCheckTolerance;                                      // 0x006C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        ValidMaterialIndices;                                      // 0x0070(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritVertexColor : 1;                                   // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritUV : 1;                                            // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5MHH[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           InheritUVChannel;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationStaticVertSurface");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0088(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleMaterialBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UmaterialInterface*>                  MeshMaterials;                                             // 0x0038(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleRotationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotation
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                             // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bInheritParent : 1;                                        // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LS2J[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0088(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleRotationRateBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRate
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                         // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0080(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                   // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bScaleRotRate : 1;                                         // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O63J[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrbitBase
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V98C[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrbit
// 0x00F8 (FullSize[0x0138] - InheritedSize[0x0040])
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<Engine_EOrbitChainMode>                ChainMode;                                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JPMX[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      OffsetAmount;                                              // 0x0048(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                               OffsetOptions;                                             // 0x0090(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OZQ8[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationAmount;                                            // 0x0098(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                               RotationOptions;                                           // 0x00E0(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_34A4[0x4];                                     // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationRateAmount;                                        // 0x00E8(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                               RotationRateOptions;                                       // 0x0130(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BT86[0x4];                                     // 0x0134(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleOrientationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<Engine_EParticleAxisLock>              LockAxisFlags;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SYJJ[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}



};

// Class Engine.ParticleModuleParameterBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleParameterBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                             // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                UpdateFlags;                                               // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsesVelocity : 1;                                         // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9TD4[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return ptr;
	}



};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (FullSize[0x0070] - InheritedSize[0x0050])
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0050(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModulePivotOffset
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                               // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModulePivotOffset");
		return ptr;
	}



};

// Class Engine.ParticleModuleRequired
// 0x0110 (FullSize[0x0148] - InheritedSize[0x0038])
class UParticleModuleRequired : public UParticleModule
{
public:
	class UmaterialInterface*                          MATERIAL;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinFacingCameraBlendDistance;                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxFacingCameraBlendDistance;                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     EmitterOrigin;                                             // 0x0048(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    EmitterRotation;                                           // 0x0054(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleScreenAlignment>       ScreenAlignment;                                           // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseLocalSpace : 1;                                        // 0x0061(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bKillOnDeactivate : 1;                                     // 0x0061(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bKillOnCompleted : 1;                                      // 0x0061(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSortMode>              SortMode;                                                  // 0x0062(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseLegacyEmitterTime : 1;                                 // 0x0063(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRemoveHMDRoll : 1;                                        // 0x0063(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEmitterDurationUseRange : 1;                              // 0x0063(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmitterDuration;                                           // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       SpawnRate;                                                 // 0x0068(0x0030) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x0098(0x0010) (ExportObject, ZeroConstructor, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmitterDelay;                                              // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmitterDelayLow;                                           // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                   // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSubUVInterpMethod>     InterpolationMethod;                                       // 0x00B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScaleUV : 1;                                              // 0x00B2(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEmitterDelayUseRange : 1;                                 // 0x00B2(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x00B3(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideSystemMacroUV : 1;                                // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseMaxDrawCount : 1;                                      // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EOpacitySourceMode>             OpacitySourceMode;                                         // 0x00B5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EEmitterNormalsMode>            EmitterNormalsMode;                                        // 0x00B6(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                  // 0x00B7(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Horizontal;                                      // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Vertical;                                        // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomImageTime;                                           // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RandomImageChanges;                                        // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     MacroUVPosition;                                           // 0x00C8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MacroUVRadius;                                             // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleUVFlipMode                         UVFlippingMode;                                            // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESubUVBoundingVertexCount>      BoundingMode;                                              // 0x00D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDurationRecalcEachLoop : 1;                               // 0x00DA(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O2HF[0x1];                                     // 0x00DB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     NormalsSphereCenter;                                       // 0x00DC(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AlphaThreshold;                                            // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EmitterLoops;                                              // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  CutoutTexture;                                             // 0x00F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDrawCount;                                              // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmitterDurationLow;                                        // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     NormalsCylinderDirection;                                  // 0x0100(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1DAQ[0x4];                                     // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               NamedMaterialOverrides;                                    // 0x0110(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QMAU[0x28];                                    // 0x0120(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotation
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                             // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                          // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      scale : 1;                                                 // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y77F[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRate
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                         // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                            // 0x0038(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleSizeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleSize
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                 // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}



};

// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0080(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      MultiplyX : 1;                                             // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MultiplyY : 1;                                             // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MultiplyZ : 1;                                             // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5JOQ[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeScale
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                 // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      EnableX : 1;                                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      EnableY : 1;                                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      EnableZ : 1;                                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R7I4[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                                // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   MaxScale;                                                  // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSizeScaleBySpeed");
		return ptr;
	}



};

// Class Engine.ParticleModuleSourceMovement
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                       // 0x0038(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		return ptr;
	}



};

// Class Engine.ParticleModuleSpawnBase
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bProcessBurstList : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7706[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleSpawn
// 0x00B0 (FullSize[0x00F0] - InheritedSize[0x0040])
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       rate;                                                      // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       RateScale;                                                 // 0x0070(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZYC0[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x00A8(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       BurstScale;                                                // 0x00B8(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                            // 0x00E8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LRJW[0x7];                                     // 0x00E9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}



};

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTolerance;                                         // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       SpawnPerUnit;                                              // 0x0048(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              MaxFrameDistance;                                          // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                            // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                 // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                 // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                 // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SLGZ[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}



};

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleSubUVBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleSubUV
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                             animation;                                                 // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       SubImageIndex;                                             // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRealTime : 1;                                          // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3UNY[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}



};

// Class Engine.ParticleModuleSubUVMovie
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TOIU[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       FrameRate;                                                 // 0x0080(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                StartingFrame;                                             // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1EO0[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		return ptr;
	}



};

// Class Engine.ParticleModuleTrailBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleTrailBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleTrailSource
// 0x0060 (FullSize[0x0098] - InheritedSize[0x0038])
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<Engine_ETrail2SourceMethod>            SourceMethod;                                              // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EWMQ[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x0048(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TMH4[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SourceOffsetCount;                                         // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Fvector>                             SourceOffsetDefaults;                                      // 0x0080(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSourceSelectionMethod> SelectionMethod;                                           // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ME12[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bInheritRotation : 1;                                      // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JKIH[0x3];                                     // 0x0095(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleTypeDataBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YKXT[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceTessellationStepSize;                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TangentTessellationStepSize;                               // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WidthTessellationStepSize;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CYX7[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataBeam2
// 0x0120 (FullSize[0x0158] - InheritedSize[0x0038])
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<Engine_EBeam2Method>                   BeamMethod;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UTLT[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TextureTile;                                               // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TextureTileDistance;                                       // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Sheets;                                                    // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxBeamCount;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              speed;                                                     // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                InterpolationPoints;                                       // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysOn : 1;                                             // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YFEU[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                UpVectorStepSize;                                          // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       BranchParentName;                                          // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       distance;                                                  // 0x0068(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EBeamTaperMethod>               TaperMethod;                                               // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JLVZ[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TaperFactor;                                               // 0x00A0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       TaperScale;                                                // 0x00D0(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      RenderGeometry : 1;                                        // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RenderDirectLine : 1;                                      // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RenderLines : 1;                                           // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RenderTessellation : 1;                                    // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E2CF[0x57];                                    // 0x0101(0x0057) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataGpu
// 0x03F8 (FullSize[0x0430] - InheritedSize[0x0038])
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      UnknownData_EMMZ[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                               // 0x0040(0x0280) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGPUSpriteResourceData                      ResourceData;                                              // 0x02C0(0x0160) (NativeAccessSpecifierPublic)
	float                                              CameraMotionBlurAmount;                                    // 0x0420(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                         // 0x0424(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2VOJ[0xB];                                     // 0x0425(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTypeDataGpu");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataMesh
// 0x0068 (FullSize[0x00A0] - InheritedSize[0x0038])
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 mesh;                                                      // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GB6R[0x8];                                     // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LODSizeScale;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseStaticMeshLODs : 1;                                    // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CastShadows : 1;                                           // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DoCollisions : 1;                                          // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMeshScreenAlignment>           MeshAlignment;                                             // 0x004D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideMaterial : 1;                                     // 0x004E(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideDefaultMotionBlurSettings : 1;                    // 0x004E(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableMotionBlur : 1;                                     // 0x004E(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R5XP[0x1];                                     // 0x004F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RollPitchYawRange;                                         // 0x0050(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleAxisLock>              AxisLockOption;                                            // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCameraFacing : 1;                                         // 0x0099(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMeshCameraFacingUpAxis>        CameraFacingUpAxisOption;                                  // 0x009A(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMeshCameraFacingOptions>       CameraFacingOption;                                        // 0x009B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                          // 0x009C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;                // 0x009C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                       // 0x009C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9P5A[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SheetsPerTrail;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTrailCount;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxParticleInTrailCount;                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                               // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClipSourceSegement : 1;                                   // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSpawnInitialParticle : 1;                                 // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BYFG[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETrailsRenderAxisOption>        RenderAxis;                                                // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9GS8[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentSpawningScalar;                                     // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderGeometry : 1;                                       // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderSpawnPoints : 1;                                    // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderTangents : 1;                                       // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRenderTessellation : 1;                                   // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YTC5[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceTessellationStepSize;                              // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                         // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HRO0[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentTessellationScalar;                                 // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVectorFieldBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                   // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L7E9[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalVectorFieldScale;                                    // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalVectorFieldTightness;                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FBNX[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVectorFieldGlobal");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                               // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     RelativeTranslation;                                       // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RelativeRotation;                                          // 0x004C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct Fvector                                     RelativeScale3D;                                           // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              intensity;                                                 // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Tightness;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreComponentTransform : 1;                             // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTileX : 1;                                                // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTileY : 1;                                                // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTileZ : 1;                                                // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFixDT : 1;                                             // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JXDN[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVectorFieldLocal");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct Fvector                                     MinInitialRotation;                                        // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     MaxInitialRotation;                                        // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotation");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct Fvector                                     RotationRate;                                              // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XGZZ[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotationRate");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldScale
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                          // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       VectorFieldScaleRaw;                                       // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVectorFieldScale");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                  // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       VectorFieldScaleOverLifeRaw;                               // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVectorFieldScaleOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityBase
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                         // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7CEQ[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocity
// 0x0078 (FullSize[0x00B8] - InheritedSize[0x0040])
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                             // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       StartVelocityRadial;                                       // 0x0088(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00B8(0x0020) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityCone
// 0x0070 (FullSize[0x00B0] - InheritedSize[0x0040])
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       angle;                                                     // 0x0040(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                       Velocity;                                                  // 0x0070(0x0030) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct Fvector                                     direction;                                                 // 0x00A0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GGZW[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityInheritParent
// 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      scale;                                                     // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                               // 0x0040(0x0048) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      Absolute : 1;                                              // 0x0088(0x0001) BIT_FIELD (Edit, ExportObject, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CQVX[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}



};

// Class Engine.ParticleSpriteEmitter
// 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
class UParticleSpriteEmitter : public UParticleEmitter
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}



};

// Class Engine.particleSystem
// 0x00E0 (FullSize[0x0118] - InheritedSize[0x0038])
class UparticleSystem : public UFXSystemAsset
{
public:
	float                                              UpdateTime_FPS;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UpdateTime_Delta;                                          // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTime;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmupTickRate;                                            // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleEmitter*>                    Emitters;                                                  // 0x0048(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*                    PreviewComponent;                                          // 0x0058(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0060(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LODDistanceCheckTime;                                      // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MacroUVRadius;                                             // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                      LODDistances;                                              // 0x0070(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                               // 0x0080(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fbox                                        FixedRelativeBoundingBox;                                  // 0x0090(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              SecondsBeforeInactive;                                     // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              delay;                                                     // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayLow;                                                  // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                              // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                          // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldResetPeakCounts : 1;                                // 0x00B8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasPhysics : 1;                                           // 0x00B8(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                 // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                               // 0x00B8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8AK9 : 2;                                      // 0x00B8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseDelayRange : 1;                                        // 0x00B9(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowManagedTicking : 1;                                  // 0x00B9(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDeactivate : 1;                                       // 0x00B9(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRegenerateLODDuplicate : 1;                               // 0x00B9(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSystemUpdateMode>      SystemUpdateMode;                                          // 0x00BA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x00BB(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EParticleSystemInsignificanceReaction       InsignificantReaction;                                     // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod;                                     // 0x00BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q7DB[0x1];                                     // 0x00BE(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_EParticleSignificanceLevel                  MaxSignificanceLevel;                                      // 0x00BF(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           MinTimeBetweenTicks;                                       // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InsignificanceDelay;                                       // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     MacroUVPosition;                                           // 0x00C8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fbox                                        CustomOcclusionBounds;                                     // 0x00D4(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                              // 0x00F0(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                        // 0x0100(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_K649[0x8];                                     // 0x0110(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.particleSystem");
		return ptr;
	}



	bool ContainsEmitterType(class UClass* TypeData);
};

// Class Engine.ParticleSystemReplay
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                              // 0x0030(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KS7M[0x14];                                    // 0x0034(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ParticleSystemReplay");
		return ptr;
	}



};

// Class Engine.PathFollowingAgentInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UPathFollowingAgentInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PathFollowingAgentInterface");
		return ptr;
	}



};

// Class Engine.PawnNoiseEmitterComponent
// 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
class UPawnNoiseEmitterComponent : public UactorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                  // 0x00B8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_CEKR[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     LastRemoteNoisePosition;                                   // 0x00BC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseLifetime;                                             // 0x00C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastRemoteNoiseVolume;                                     // 0x00CC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LastRemoteNoiseTime;                                       // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LastLocalNoiseVolume;                                      // 0x00D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LastLocalNoiseTime;                                        // 0x00D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_3N8E[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PawnNoiseEmitterComponent");
		return ptr;
	}



	void MakeNoise(class Uactor* NoiseMaker, float Loudness, const struct Fvector& NoiseLocation);
};

// Class Engine.PhysicalAnimationComponent
// 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
class UPhysicalAnimationComponent : public UactorComponent
{
public:
	float                                              StrengthMultiplyer;                                        // 0x00B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M8UF[0x4];                                     // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UskeletalMeshComponent*                      skeletalMeshComponent;                                     // 0x00C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_HS7Y[0x30];                                    // 0x00C8(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicalAnimationComponent");
		return ptr;
	}



	void SetStrengthMultiplyer(float InStrengthMultiplyer);
	void SetSkeletalMeshComponent(class UskeletalMeshComponent* InSkeletalMeshComponent);
	struct FTransform GetBodyTargetTransform(const struct FName& BodyName);
	void ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound);
};

// Class Engine.physicalMaterial
// 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
class UphysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                  // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EFrictionCombineMode>           FrictionCombineMode;                                       // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverrideFrictionCombineMode;                              // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q0YI[0x2];                                     // 0x0036(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Restitution;                                               // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EFrictionCombineMode>           RestitutionCombineMode;                                    // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverrideRestitutionCombineMode;                           // 0x003D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MD70[0x2];                                     // 0x003E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Density;                                                   // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RaiseMassToPower;                                          // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestructibleDamageThresholdScale;                          // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_CXOB[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                  // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EPhysicalSurface>               surfaceType;                                               // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IEFX[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TireFrictionScale;                                         // 0x005C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTireFrictionScalePair>              TireFrictionScales;                                        // 0x0060(0x0010) (Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionAffect;                                           // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IgnoreComponentOcclussionAffect;                           // 0x0074(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_INU7[0x1B];                                    // 0x0075(0x001B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.physicalMaterial");
		return ptr;
	}



};

// Class Engine.PhysicalMaterialMask
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UPhysicalMaterialMask : public UObject
{
public:
	int                                                UVChannelIndex;                                            // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x0034(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GD3V[0x2];                                     // 0x0036(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicalMaterialMask");
		return ptr;
	}



};

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UPhysicalMaterialPropertyBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}



};

// Class Engine.PhysicsAsset
// 0x0110 (FullSize[0x0140] - InheritedSize[0x0030])
class UPhysicsAsset : public UObject
{
public:
	unsigned char                                      UnknownData_CFXS[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        BoundsBodies;                                              // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                        // 0x0048(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                           // 0x0058(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSolverIterations                           SolverIterations;                                          // 0x0068(0x0018) (Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      bNotForDedicatedServer : 1;                                // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N742[0xA7];                                    // 0x0081(0x00A7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UThumbnailInfo*                              ThumbnailInfo;                                             // 0x0128(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBodySetup*>                          BodySetup;                                                 // 0x0130(0x0010) (ExportObject, ZeroConstructor, Deprecated, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}



};

// Class Engine.SkeletalBodySetup
// 0x0018 (FullSize[0x0280] - InheritedSize[0x0268])
class USkeletalBodySetup : public UBodySetup
{
public:
	bool                                               bSkipScaleFromAnimation;                                   // 0x0268(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9GSU[0x7];                                     // 0x0269(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPhysicalAnimationProfile>           PhysicalAnimationData;                                     // 0x0270(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkeletalBodySetup");
		return ptr;
	}



};

// Class Engine.PhysicsCollisionHandler
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                           // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactReFireDelay;                                         // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                                  DefaultImpactSound;                                        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastImpactSoundTime;                                       // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4Y98[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsCollisionHandler");
		return ptr;
	}



};

// Class Engine.RigidBodyBase
// 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
class URigidBodyBase : public Uactor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RigidBodyBase");
		return ptr;
	}



};

// Class Engine.PhysicsConstraintActor
// 0x0020 (FullSize[0x0250] - InheritedSize[0x0230])
class UPhysicsConstraintActor : public URigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                            // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class Uactor*                                      ConstraintActor1;                                          // 0x0238(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Uactor*                                      ConstraintActor2;                                          // 0x0240(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDisableCollision : 1;                                     // 0x0248(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HTOF[0x7];                                     // 0x0249(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsConstraintActor");
		return ptr;
	}



};

// Class Engine.PhysicsConstraintComponent
// 0x0220 (FullSize[0x0430] - InheritedSize[0x0210])
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class Uactor*                                      ConstraintActor1;                                          // 0x0210(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName                 ComponentName1;                                            // 0x0218(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_876I[0x4];                                     // 0x0224(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Uactor*                                      ConstraintActor2;                                          // 0x0228(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName                 ComponentName2;                                            // 0x0230(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3664[0x14];                                    // 0x023C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                           // 0x0250(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FConstraintInstance                         ConstraintInstance;                                        // 0x0268(0x01C8) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsConstraintComponent");
		return ptr;
	}



	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetOrientationDriveSLERP(bool bEnableSLERP);
	void SetLinearZLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct Fvector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct Fvector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct Fvector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct Fvector& PriAxis, const struct Fvector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct FTransform& RefFrame);
	void SetConstrainedComponents(class UprimitiveComponent* Component1, const struct FName& BoneName1, class UprimitiveComponent* Component2, const struct FName& BoneName2);
	void SetAngularVelocityTarget(const struct Fvector& InVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<Engine_EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<Engine_EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<Engine_EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetAngularDriveMode(TEnumAsByte<Engine_EAngularDriveMode> DriveMode);
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);
	bool isBroken();
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct Fvector* OutLinearForce, struct Fvector* OutAngularForce);
	void BreakConstraint();
};

// Class Engine.PhysicsConstraintTemplate
// 0x02E0 (FullSize[0x0310] - InheritedSize[0x0030])
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FConstraintInstance                         DefaultInstance;                                           // 0x0030(0x01C8) (Edit, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsConstraintProfileHandle>     ProfileHandles;                                            // 0x01F8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstraintProfileProperties                DefaultProfile;                                            // 0x0208(0x0104) (Transient, NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_89SN[0x4];                                     // 0x030C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsConstraintTemplate");
		return ptr;
	}



};

// Class Engine.PhysicsHandleComponent
// 0x00A8 (FullSize[0x0160] - InheritedSize[0x00B8])
class UPhysicsHandleComponent : public UactorComponent
{
public:
	class UprimitiveComponent*                         GrabbedComponent;                                          // 0x00B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6DGG[0xC];                                     // 0x00C0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_QPNE : 1;                                      // 0x00CC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSoftAngularConstraint : 1;                                // 0x00CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSoftLinearConstraint : 1;                                 // 0x00CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bInterpolateTarget : 1;                                    // 0x00CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_3WBB[0x3];                                     // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearDamping;                                             // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LinearStiffness;                                           // 0x00D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngularDamping;                                            // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngularStiffness;                                          // 0x00DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WU3U[0x60];                                    // 0x00E0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpolationSpeed;                                        // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NV0W[0x1C];                                    // 0x0144(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsHandleComponent");
		return ptr;
	}



	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct Fvector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct Fvector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponentAtLocationWithRotation(class UprimitiveComponent* component, const struct FName& InBoneName, const struct Fvector& location, const struct FRotator& rotation);
	void GrabComponentAtLocation(class UprimitiveComponent* component, const struct FName& InBoneName, const struct Fvector& GrabLocation);
	void GrabComponent(class UprimitiveComponent* component, const struct FName& InBoneName, const struct Fvector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct Fvector* TargetLocation, struct FRotator* TargetRotation);
	class UprimitiveComponent* GetGrabbedComponent();
};

// Class Engine.PhysicsSettings
// 0x0100 (FullSize[0x0148] - InheritedSize[0x0048])
class UPhysicsSettings : public UDeveloperSettings
{
public:
	float                                              DefaultGravityZ;                                           // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultTerminalVelocity;                                   // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultFluidFriction;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SimulateScratchMemorySize;                                 // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RagdollAggregateThreshold;                                 // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TriangleMeshTriangleMinAreaThreshold;                      // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableShapeSharing;                                       // 0x0060(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnablePCM;                                                // 0x0061(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableStabilization;                                      // 0x0062(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWarnMissingLocks;                                         // 0x0063(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnable2DPhysics;                                          // 0x0064(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YYWE[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                     // 0x0068(0x0034) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESettingsLockedAxis>            LockedAxis;                                                // 0x009C(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESettingsDOF>                   DefaultDegreesOfFreedom;                                   // 0x009D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JPZQ[0x2];                                     // 0x009E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BounceThresholdVelocity;                                   // 0x00A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EFrictionCombineMode>           FrictionCombineMode;                                       // 0x00A4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EFrictionCombineMode>           RestitutionCombineMode;                                    // 0x00A5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B949[0x2];                                     // 0x00A6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxAngularVelocity;                                        // 0x00A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDepenetrationVelocity;                                  // 0x00AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ContactOffsetMultiplier;                                   // 0x00B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinContactOffset;                                          // 0x00B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxContactOffset;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSimulateSkeletalMeshOnDedicatedServer;                    // 0x00BC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionTraceFlag>            DefaultShapeComplexity;                                    // 0x00BD(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDefaultHasComplexCollision;                               // 0x00BE(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSuppressFaceRemapTable;                                   // 0x00BF(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSupportUVFromHitResults;                                  // 0x00C0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableActiveActors;                                      // 0x00C1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableKinematicStaticPairs;                              // 0x00C2(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableKinematicKinematicPairs;                           // 0x00C3(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableCCD;                                               // 0x00C4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableEnhancedDeterminism;                                // 0x00C5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YFY1[0x2];                                     // 0x00C6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AnimPhysicsMinDeltaTime;                                   // 0x00C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSimulateAnimPhysicsAfterReset;                            // 0x00CC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_R3S2[0x3];                                     // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxPhysicsDeltaTime;                                       // 0x00D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSubstepping;                                              // 0x00D4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSubsteppingAsync;                                         // 0x00D5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GKLM[0x2];                                     // 0x00D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxSubstepDeltaTime;                                       // 0x00D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxSubsteps;                                               // 0x00DC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SyncSceneSmoothingFactor;                                  // 0x00E0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialAverageFrameRate;                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PhysXTreeRebuildRate;                                      // 0x00E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_54VI[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                          // 0x00F0(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBroadphaseSettings                         DefaultBroadphaseSettings;                                 // 0x0100(0x0040) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FChaosPhysicsSettings                       ChaosSettings;                                             // 0x0140(0x0003) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DLRM[0x5];                                     // 0x0143(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsSettings");
		return ptr;
	}



};

// Class Engine.PhysicsSpringComponent
// 0x0030 (FullSize[0x0240] - InheritedSize[0x0210])
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringStiffness;                                           // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpringDamping;                                             // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpringLengthAtRest;                                        // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpringRadius;                                              // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECollisionChannel>              SpringChannel;                                             // 0x0220(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreSelf;                                               // 0x0221(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_J5YI[0x2];                                     // 0x0222(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpringCompression;                                         // 0x0224(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QB6B[0x18];                                    // 0x0228(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsSpringComponent");
		return ptr;
	}



	struct Fvector GetSpringRestingPoint();
	struct Fvector GetSpringDirection();
	struct Fvector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
};

// Class Engine.PhysicsThruster
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UPhysicsThruster : public URigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                         // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsThruster");
		return ptr;
	}



};

// Class Engine.PhysicsThrusterComponent
// 0x0010 (FullSize[0x0220] - InheritedSize[0x0210])
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                              ThrustStrength;                                            // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Z7D4[0xC];                                     // 0x0214(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PhysicsThrusterComponent");
		return ptr;
	}



};

// Class Engine.SceneCapture
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class USceneCapture : public Uactor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                  // 0x0230(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                             SceneComponent;                                            // 0x0238(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SceneCapture");
		return ptr;
	}



};

// Class Engine.PlanarReflection
// 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
class UPlanarReflection : public USceneCapture
{
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                 // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bShowPreviewPlane;                                         // 0x0248(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2CNQ[0x7];                                     // 0x0249(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlanarReflection");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
};

// Class Engine.SceneCaptureComponent
// 0x0098 (FullSize[0x02A8] - InheritedSize[0x0210])
class USceneCaptureComponent : public USceneComponent
{
public:
	Engine_ESceneCapturePrimitiveRenderMode            PrimitiveRenderMode;                                       // 0x0210(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESceneCaptureSource>            CaptureSource;                                             // 0x0211(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCaptureEveryFrame : 1;                                    // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCaptureOnMovement : 1;                                    // 0x0212(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAlwaysPersistRenderingState;                              // 0x0213(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6CDT[0x4];                                     // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TWeakObjectPtr<class UprimitiveComponent>>  HiddenComponents;                                          // 0x0218(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class Uactor*>                              HiddenActors;                                              // 0x0228(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UprimitiveComponent>>  ShowOnlyComponents;                                        // 0x0238(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class Uactor*>                              ShowOnlyActors;                                            // 0x0248(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LODDistanceFactor;                                         // 0x0258(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxViewDistanceOverride;                                   // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CaptureSortPriority;                                       // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseRayTracingIfEnabled;                                   // 0x0264(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreCullDistanceVolumes;                                // 0x0265(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C7QO[0x2];                                     // 0x0266(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                          // 0x0268(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MKJP[0x10];                                    // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ProfilingEventName;                                        // 0x0288(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6NL3[0x10];                                    // 0x0298(0x0010) Fix Super Size


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}



	void ShowOnlyComponent(class UprimitiveComponent* InComponent);
	void ShowOnlyActorComponents(class Uactor* InActor, bool bIncludeFromChildActors);
	void SetCaptureSortPriority(int NewCaptureSortPriority);
	void RemoveShowOnlyComponent(class UprimitiveComponent* InComponent);
	void RemoveShowOnlyActorComponents(class Uactor* InActor, bool bIncludeFromChildActors);
	void HideComponent(class UprimitiveComponent* InComponent);
	void HideActorComponents(class Uactor* InActor, bool bIncludeFromChildActors);
	void ClearShowOnlyComponents();
	void ClearHiddenComponents();
};

// Class Engine.PlanarReflectionComponent
// 0x00E8 (FullSize[0x0390] - InheritedSize[0x02A8])
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                                // 0x02A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalDistortionStrength;                                  // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrefilterRoughness;                                        // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrefilterRoughnessDistance;                                // 0x02B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ScreenPercentage;                                          // 0x02BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExtraFOV;                                                  // 0x02C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeStart;                                // 0x02C4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeEnd;                                  // 0x02C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeoutStart;                             // 0x02CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFromPlaneFadeoutEnd;                               // 0x02D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngleFromPlaneFadeStart;                                   // 0x02D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AngleFromPlaneFadeEnd;                                     // 0x02D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowPreviewPlane;                                         // 0x02DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRenderSceneTwoSided;                                      // 0x02DD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RR02[0xB2];                                    // 0x02DE(0x00B2) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlanarReflectionComponent");
		return ptr;
	}



};

// Class Engine.PlaneReflectionCapture
// 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
class UPlaneReflectionCapture : public UReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlaneReflectionCapture");
		return ptr;
	}



};

// Class Engine.PlaneReflectionCaptureComponent
// 0x0014 (FullSize[0x02A0] - InheritedSize[0x028C])
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	unsigned char                                      UnknownData_6FT7[0x4];                                     // 0x028C(0x0004) Fix Super Size
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x0290(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x0298(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlaneReflectionCaptureComponent");
		return ptr;
	}



};

// Class Engine.PlatformEventsComponent
// 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
class UPlatformEventsComponent : public UactorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;                       // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;                       // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlatformEventsComponent");
		return ptr;
	}



	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
};

// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                               // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ResponseCode;                                              // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                tag;                                                       // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     StringResponse;                                            // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<unsigned char>                              BinaryResponse;                                            // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QPKP[0x50];                                    // 0x0068(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		return ptr;
	}



	int GetNumHeaders();
	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
};

// Class Engine.playerInput
// 0x0380 (FullSize[0x03B0] - InheritedSize[0x0030])
class UplayerInput : public UObject
{
public:
	unsigned char                                      UnknownData_6QCI[0xF8];                                    // 0x0030(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FKeyBind>                            DebugExecBindings;                                         // 0x0128(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GQT2[0x10];                                    // 0x0138(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                            // 0x0148(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                              // 0x0158(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               InvertedAxis;                                              // 0x0168(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QFLB[0x238];                                   // 0x0178(0x0238) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.playerInput");
		return ptr;
	}



	void SetMouseSensitivity(float Sensitivity);
	void SetBind(const struct FName& BindName, const struct FString& Command);
	void InvertAxisKey(const struct Fkey& AxisKey);
	void InvertAxis(const struct FName& AxisName);
	void ClearSmoothing();
};

// Class Engine.PlayerStartPIE
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class UPlayerStartPIE : public UPlayerStart
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PlayerStartPIE");
		return ptr;
	}



};

// Class Engine.PluginCommandlet
// 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData_I7KL[0x20];                                    // 0x0088(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PluginCommandlet");
		return ptr;
	}



};

// Class Engine.PointLight
// 0x0008 (FullSize[0x0248] - InheritedSize[0x0240])
class UPointLight : public Ulight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                       // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}



	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};

// Class Engine.Polys
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData_OK5F[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Polys");
		return ptr;
	}



};

// Class Engine.PoseableMeshComponent
// 0x0160 (FullSize[0x0830] - InheritedSize[0x06D0])
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData_2RIJ[0x160];                                   // 0x06D0(0x0160) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PoseableMeshComponent");
		return ptr;
	}



	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const struct FName& BoneName, const struct Fvector& InScale3D, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const struct FName& BoneName, const struct Fvector& InLocation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const struct FName& BoneName);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct Fvector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct Fvector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void CopyPoseFromSkeletalComponent(class UskeletalMeshComponent* InComponentToCopy);
};

// Class Engine.PoseAsset
// 0x00A8 (FullSize[0x0130] - InheritedSize[0x0088])
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                          PoseContainer;                                             // 0x0088(0x0090) (NativeAccessSpecifierPrivate)
	bool                                               bAdditivePose;                                             // 0x0118(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_VONK[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BasePoseIndex;                                             // 0x011C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       RetargetSource;                                            // 0x0120(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MU9Q[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PoseAsset");
		return ptr;
	}



};

// Class Engine.PoseWatch
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UPoseWatch : public UObject
{
public:
	class UEdGraphNode*                                Node;                                                      // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      PoseWatchColour;                                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1XXW[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PoseWatch");
		return ptr;
	}



};

// Class Engine.PostProcessComponent
// 0x0560 (FullSize[0x0770] - InheritedSize[0x0210])
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_5II5[0x10];                                    // 0x0210(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        settings;                                                  // 0x0220(0x0540) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                              priority;                                                  // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendRadius;                                               // 0x0764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendWeight;                                               // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUnbound : 1;                                              // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0Q8X[0x3];                                     // 0x076D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PostProcessComponent");
		return ptr;
	}



	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};

// Class Engine.PostProcessVolume
// 0x0558 (FullSize[0x07C0] - InheritedSize[0x0268])
class UPostProcessVolume : public Uvolume
{
public:
	unsigned char                                      UnknownData_FKQT[0x8];                                     // 0x0268(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        settings;                                                  // 0x0270(0x0540) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                              priority;                                                  // 0x07B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendRadius;                                               // 0x07B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlendWeight;                                               // 0x07B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnabled : 1;                                              // 0x07BC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUnbound : 1;                                              // 0x07BC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HOOG[0x3];                                     // 0x07BD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}



	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (FullSize[0x0298] - InheritedSize[0x0268])
class UPrecomputedVisibilityOverrideVolume : public Uvolume
{
public:
	TArray<class Uactor*>                              OverrideVisibleActors;                                     // 0x0268(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class Uactor*>                              OverrideInvisibleActors;                                   // 0x0278(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               OverrideInvisibleLevels;                                   // 0x0288(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		return ptr;
	}



};

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class UPrecomputedVisibilityVolume : public Uvolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		return ptr;
	}



};

// Class Engine.PreviewCollectionInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UPreviewCollectionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PreviewCollectionInterface");
		return ptr;
	}



};

// Class Engine.PreviewMeshCollection
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UPreviewMeshCollection : public UDataAsset
{
public:
	unsigned char                                      UnknownData_UEXO[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0040(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPreviewMeshCollectionEntry>         SkeletalMeshes;                                            // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PreviewMeshCollection");
		return ptr;
	}



};

// Class Engine.PrimaryAssetLabel
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                          Rules;                                                     // 0x0038(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bLabelAssetsInMyDirectory : 1;                             // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsRuntimeLabel : 1;                                       // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_I3X1[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ExplicitAssets[0x10];                                      // 0x0045(0x0010) UNKNOWN PROPERTY: ArrayProperty
	unsigned char                                      ExplicitBlueprints[0x10];                                  // 0x0058(0x0010) UNKNOWN PROPERTY: ArrayProperty
	struct FCollectionReference                        AssetCollection;                                           // 0x0068(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DIQ6[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.PrimaryAssetLabel");
		return ptr;
	}



};

// Class Engine.ProxyLODMeshSimplificationSettings
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       ProxyLODMeshReductionModuleName;                           // 0x0048(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_F4JU[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ProxyLODMeshSimplificationSettings");
		return ptr;
	}



};

// Class Engine.RadialForceActor
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class URadialForceActor : public URigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                            // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RadialForceActor");
		return ptr;
	}



	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};

// Class Engine.RadialForceComponent
// 0x0030 (FullSize[0x0240] - InheritedSize[0x0210])
class URadialForceComponent : public USceneComponent
{
public:
	float                                              radius;                                                    // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ERadialImpulseFalloff>          Falloff;                                                   // 0x0214(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KXQG[0x3];                                     // 0x0215(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ImpulseStrength;                                           // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bImpulseVelChange : 1;                                     // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreOwningActor : 1;                                    // 0x021C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C9PL[0x3];                                     // 0x021D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStrength;                                             // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestructibleDamage;                                        // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       ObjectTypesToAffect;                                       // 0x0228(0x0010) (Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_SUDK[0x8];                                     // 0x0238(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RadialForceComponent");
		return ptr;
	}



	void RemoveObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
};

// Class Engine.RectLight
// 0x0008 (FullSize[0x0248] - InheritedSize[0x0240])
class URectLight : public Ulight
{
public:
	class URectLightComponent*                         RectLightComponent;                                        // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RectLight");
		return ptr;
	}



};

// Class Engine.RectLightComponent
// 0x0020 (FullSize[0x03C0] - InheritedSize[0x03A0])
class URectLightComponent : public ULocalLightComponent
{
public:
	float                                              SourceWidth;                                               // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceHeight;                                              // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BarnDoorAngle;                                             // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BarnDoorLength;                                            // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class Utexture*                                    SourceTexture;                                             // 0x03B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_83D7[0x8];                                     // 0x03B8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RectLightComponent");
		return ptr;
	}



	void SetSourceWidth(float bNewValue);
	void SetSourceTexture(class Utexture* bNewValue);
	void SetSourceHeight(float newValue);
	void SetBarnDoorLength(float newValue);
	void SetBarnDoorAngle(float newValue);
};

// Class Engine.RendererSettings
// 0x00B8 (FullSize[0x0100] - InheritedSize[0x0048])
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileDisableVertexFog : 1;                               // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G36X[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxMobileCascades;                                         // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EMobileMSAASampleCount>         MobileMSAASampleCount;                                     // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AJNC[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bMobileUseLegacyShadingModel : 1;                          // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowDitheredLODTransition : 1;                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowSoftwareOcclusionCulling : 1;                  // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileVirtualTextures : 1;                                // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDiscardUnusedQualityLevels : 1;                           // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOcclusionCulling : 1;                                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UQ2R[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinScreenRadiusForLights;                                  // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinScreenRadiusForEarlyZPass;                              // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinScreenRadiusForCSMdepth;                                // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                         // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTextureStreaming : 1;                                     // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                    // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTextures : 1;                                      // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTexturedLightmaps : 1;                             // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9CSK[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           VirtualTextureTileSize;                                    // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VirtualTextureTileBorderSize;                              // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VirtualTextureFeedbackFactor;                              // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTextureEnableCompressZlib : 1;                     // 0x0074(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVirtualTextureEnableCompressCrunch : 1;                   // 0x0074(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bClearCoatEnableSecondNormal : 1;                          // 0x0074(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAnisotropicBRDF : 1;                                      // 0x0074(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B5JT[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ReflectionCaptureResolution;                               // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;      // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForwardShading : 1;                                       // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVertexFoggingForOpaque : 1;                               // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowStaticLighting : 1;                                  // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                       // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                           // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEightBitMeshDistanceFields : 1;                           // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateLandscapeGIData : 1;                              // 0x007C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCompressMeshDistanceFields : 1;                           // 0x007D(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8HEU[0x2];                                     // 0x007E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TessellationAdaptivePixelsPerTriangle;                     // 0x0080(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSeparateTranslucency : 1;                                 // 0x0084(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZL5X[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETranslucentSortPolicy>         TranslucentSortPolicy;                                     // 0x0088(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZN3J[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     TranslucentSortAxis;                                       // 0x008C(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ECustomDepthStencil>            CustomDepthStencil;                                        // 0x0098(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_FTZL[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bCustomDepthTaaJitter : 1;                                 // 0x009C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_8WUB[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAlphaChannelMode>              bEnableAlphaChannelInPostProcessing;                       // 0x00A0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KOWV[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDefaultFeatureBloom : 1;                                  // 0x00A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                       // 0x00A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;         // 0x00A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                           // 0x00A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H7LQ[0x3];                                     // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAutoExposureMethodUI>          DefaultFeatureAutoExposure;                                // 0x00A8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_C2IC[0x3];                                     // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultFeatureAutoExposureBias;                            // 0x00AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;    // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUsePreExposure : 1;                                       // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnablePreExposureOnlyInTheEditor : 1;                     // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                             // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                              // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bTemporalUpsampling : 1;                                   // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSSGI : 1;                                                 // 0x00B0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UU88[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAntiAliasingMethod>            DefaultFeatureAntiAliasing;                                // 0x00B4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ELightUnits                                 DefaultLightUnits;                                         // 0x00B5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDefaultBackBufferPixelFormat>  DefaultBackBufferPixelFormat;                              // 0x00B6(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZL8Z[0x1];                                     // 0x00B7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenderUnbuiltPreviewShadowsInGame : 1;                    // 0x00B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStencilForLODDither : 1;                                  // 0x00B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N0MG[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EEarlyZPass>                    EarlyZPass;                                                // 0x00BC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XSMQ[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEarlyZPassOnlyMaterialMasking : 1;                        // 0x00C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDBuffer : 1;                                              // 0x00C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MGMO[0x3];                                     // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EClearSceneOptions>             ClearSceneMethod;                                          // 0x00C4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LIJU[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bBasePassOutputsVelocity : 1;                              // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bVertexDeformationOutputsVelocity : 1;                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSelectiveBasePassOutputs : 1;                             // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDefaultParticleCutouts : 1;                               // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VSN1[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                GPUSimulationTextureSizeX;                                 // 0x00CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GPUSimulationTextureSizeY;                                 // 0x00D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGlobalClipPlane : 1;                                      // 0x00D4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9PU6[0x3];                                     // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EGBufferFormat>                 GBufferFormat;                                             // 0x00D8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_E0ZU[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseGPUMorphTargets : 1;                                   // 0x00DC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNvidiaAftermathEnabled : 1;                               // 0x00DC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMultiView : 1;                                            // 0x00DC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobilePostProcessing : 1;                                 // 0x00DC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileMultiView : 1;                                      // 0x00DC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileUseHWsRGBEncoding : 1;                              // 0x00DC(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRoundRobinOcclusion : 1;                                  // 0x00DC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bODSCapture : 1;                                           // 0x00DC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMeshStreaming : 1;                                        // 0x00DD(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U0VW[0x2];                                     // 0x00DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WireframeCullThreshold;                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableRayTracing : 1;                                     // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableRayTracingTextureLOD : 1;                           // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportStationarySkylight : 1;                            // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportLowQualityLightmaps : 1;                           // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportPointLightWholeSceneShadows : 1;                   // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportAtmosphericFog : 1;                                // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportSkyAtmosphere : 1;                                 // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportSkyAtmosphereAffectsHeightFog : 1;                 // 0x00E4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportSkinCacheShaders : 1;                              // 0x00E5(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Y5XT[0x2];                                     // 0x00E6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	Engine_ESkinCacheDefaultBehavior                   DefaultSkinCacheBehavior;                                  // 0x00E8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BP7Z[0x3];                                     // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SkinCacheSceneMemoryLimitInMB;                             // 0x00EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileEnableStaticAndCSMShadowReceivers : 1;              // 0x00F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileEnableMovableLightCSMShaderCulling : 1;             // 0x00F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowDistanceFieldShadows : 1;                      // 0x00F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowMovableDirectionalLights : 1;                  // 0x00F0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V5D5[0x3];                                     // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           MobileNumDynamicPointLights;                               // 0x00F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;              // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMobileAllowMovableSpotlights : 1;                         // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupport16BitBoneIndex : 1;                                // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGPUSkinLimit2BoneInfluences : 1;                          // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportDepthOnlyIndexBuffers : 1;                         // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportReversedIndexBuffers : 1;                          // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportMaterialLayers : 1;                                // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLPV : 1;                                                  // 0x00F8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q41L[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RendererSettings");
		return ptr;
	}



};

// Class Engine.RendererOverrideSettings
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bSupportAllShaderPermutations : 1;                         // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceRecomputeTangents : 1;                               // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LONH[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RendererOverrideSettings");
		return ptr;
	}



};

// Class Engine.ReplicationDriver
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UReplicationDriver : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ReplicationDriver");
		return ptr;
	}



};

// Class Engine.ReplicationConnectionDriver
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UReplicationConnectionDriver : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ReplicationConnectionDriver");
		return ptr;
	}



};

// Class Engine.ReporterBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData_8GZ8[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ReporterBase");
		return ptr;
	}



};

// Class Engine.ReporterGraph
// 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData_FPC7[0x78];                                    // 0x0038(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ReporterGraph");
		return ptr;
	}



};

// Class Engine.ReverbEffect
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UReverbEffect : public UObject
{
public:
	float                                              Density;                                                   // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Diffusion;                                                 // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Gain;                                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GainHF;                                                    // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DecayTime;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DecayHFRatio;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReflectionsGain;                                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReflectionsDelay;                                          // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LateGain;                                                  // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LateDelay;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirAbsorptionGainHF;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RoomRolloffFactor;                                         // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ReverbEffect");
		return ptr;
	}



};

// Class Engine.Rig
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class URig : public UObject
{
public:
	unsigned char                                      UnknownData_215W[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTransformBase>                      TransformBases;                                            // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FNode>                               Nodes;                                                     // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Rig");
		return ptr;
	}



};

// Class Engine.RotatingMovementComponent
// 0x0020 (FullSize[0x0118] - InheritedSize[0x00F8])
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                              // 0x00F8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct Fvector                                     PivotTranslation;                                          // 0x0104(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRotationInLocalSpace : 1;                                 // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_U00P[0x7];                                     // 0x0111(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RotatingMovementComponent");
		return ptr;
	}



};

// Class Engine.RuntimeOptionsBase
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class URuntimeOptionsBase : public UObject
{
public:
	unsigned char                                      UnknownData_UZTG[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RuntimeOptionsBase");
		return ptr;
	}



};

// Class Engine.RuntimeVirtualTexture
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class URuntimeVirtualTexture : public UObject
{
public:
	Engine_ERuntimeVirtualTextureMaterialType          MaterialType;                                              // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bCompressTextures;                                         // 0x0031(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnable;                                                   // 0x0032(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bClearTextures;                                            // 0x0033(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bSinglePhysicalSpace;                                      // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bPrivateSpace;                                             // 0x0035(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableScalability;                                        // 0x0036(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_UYFD[0x1];                                     // 0x0037(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Size;                                                      // 0x0038(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                tileCount;                                                 // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                TileSize;                                                  // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                TileBorderSize;                                            // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                StreamLowMips;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_LZQK[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                          // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableCompressCrunch;                                     // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_8NJG[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                RemoveLowMips;                                             // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_NOXR[0x50];                                    // 0x0060(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RuntimeVirtualTexture");
		return ptr;
	}



	int GetTileSize();
	int GetTileCount();
	int GetTileBorderSize();
	int GetSize();
};

// Class Engine.RuntimeVirtualTextureComponent
// 0x0020 (FullSize[0x0230] - InheritedSize[0x0210])
class URuntimeVirtualTextureComponent : public USceneComponent
{
public:
	class URuntimeVirtualTexture*                      VirtualTexture;                                            // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseStreamingLowMipsInEditor;                              // 0x0218(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_FZNV[0x7];                                     // 0x0219(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Uactor*                                      BoundsSourceActor;                                         // 0x0220(0x0008) (Edit, ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_NA63[0x8];                                     // 0x0228(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RuntimeVirtualTextureComponent");
		return ptr;
	}



	struct FTransform GetVirtualTextureTransform();
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// 0x0018 (FullSize[0x0108] - InheritedSize[0x00F0])
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{
public:
	struct FVirtualTextureBuildSettings                settings;                                                  // 0x00F0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bSinglePhysicalSpace;                                      // 0x00FC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9RLZ[0x3];                                     // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           BuildHash;                                                 // 0x0100(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EL1V[0x4];                                     // 0x0104(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RuntimeVirtualTextureStreamingProxy");
		return ptr;
	}



};

// Class Engine.RuntimeVirtualTextureVolume
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class URuntimeVirtualTextureVolume : public Uactor
{
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                   // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RuntimeVirtualTextureVolume");
		return ptr;
	}



};

// Class Engine.RVOAvoidanceInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class URVOAvoidanceInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.RVOAvoidanceInterface");
		return ptr;
	}



};

// Class Engine.Scene
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UScene : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Scene");
		return ptr;
	}



};

// Class Engine.SceneCapture2D
// 0x0008 (FullSize[0x0248] - InheritedSize[0x0240])
class USceneCapture2D : public USceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                        // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SceneCapture2D");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
};

// Class Engine.SceneCaptureComponent2D
// 0x05F8 (FullSize[0x08A0] - InheritedSize[0x02A8])
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	unsigned char                                      UnknownData_TYV3[0x4];                                     // 0x02A8(0x0004) Fix Super Size
	float                                              FOVAngle;                                                  // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OrthoWidth;                                                // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4HWK[0x4];                                     // 0x02B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureRenderTarget2D*                      TextureTarget;                                             // 0x02B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESceneCaptureCompositeMode>     CompositeMode;                                             // 0x02C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_AWWQ[0xF];                                     // 0x02C1(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x02D0(0x0540) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                              PostProcessBlendWeight;                                    // 0x0810(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverride_CustomNearClippingPlane : 1;                     // 0x0814(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_919O[0x3];                                     // 0x0815(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomNearClippingPlane;                                   // 0x0818(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCustomProjectionMatrix;                                // 0x081C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RZIF[0x3];                                     // 0x081D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMatrix                                     CustomProjectionMatrix;                                    // 0x0820(0x0040) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                               bEnableClipPlane;                                          // 0x0860(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DIK5[0x3];                                     // 0x0861(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     ClipPlaneBase;                                             // 0x0864(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     ClipPlaneNormal;                                           // 0x0870(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bCameraCutThisFrame : 1;                                   // 0x087C(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;      // 0x087C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_L72U[0x3];                                     // 0x087D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bDisableFlipCopyGLES;                                      // 0x0880(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1MD4[0x1F];                                    // 0x0881(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SceneCaptureComponent2D");
		return ptr;
	}



	void CaptureScene();
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};

// Class Engine.SceneCaptureComponentCube
// 0x0038 (FullSize[0x02E0] - InheritedSize[0x02A8])
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                             // 0x02A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCaptureRotation;                                          // 0x02B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N0GW[0x7];                                     // 0x02B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                         // 0x02B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTargetCube*                    TextureTargetRight;                                        // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                      TextureTargetODS;                                          // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IPD;                                                       // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WYLG[0xC];                                     // 0x02D4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SceneCaptureComponentCube");
		return ptr;
	}



	void CaptureScene();
};

// Class Engine.SceneCaptureCube
// 0x0008 (FullSize[0x0248] - InheritedSize[0x0240])
class USceneCaptureCube : public USceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                      // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SceneCaptureCube");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
};

// Class Engine.SCS_Node
// 0x00C8 (FullSize[0x00F8] - InheritedSize[0x0030])
class USCS_Node : public UObject
{
public:
	class UClass*                                      ComponentClass;                                            // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UactorComponent*                             ComponentTemplate;                                         // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintCookedComponentInstancingData     CookedComponentInstancingData;                             // 0x0040(0x0050) (NativeAccessSpecifierPublic)
	struct FName                                       AttachToName;                                              // 0x0090(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParentComponentOrVariableName;                             // 0x009C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParentComponentOwnerClassName;                             // 0x00A8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsParentComponentNative;                                  // 0x00B4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_2MQT[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USCS_Node*>                           ChildNodes;                                                // 0x00B8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x00C8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       VariableGuid;                                              // 0x00D8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       InternalVariableName;                                      // 0x00E8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_D7WV[0x4];                                     // 0x00F4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SCS_Node");
		return ptr;
	}



};

// Class Engine.Selection
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData_ARMK[0x78];                                    // 0x0030(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Selection");
		return ptr;
	}



};

// Class Engine.ServerStatReplicator
// 0x00C8 (FullSize[0x02F8] - InheritedSize[0x0230])
class UServerStatReplicator : public UInfo
{
public:
	bool                                               bUpdateStatNet;                                            // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverwriteClientStats;                                     // 0x0231(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JFW5[0x2];                                     // 0x0232(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           Channels;                                                  // 0x0234(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRate;                                                    // 0x0238(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRate;                                                   // 0x023C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B5J7[0x4];                                     // 0x0240(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           MaxPacketOverhead;                                         // 0x0244(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRateClientMax;                                           // 0x0248(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRateClientMin;                                           // 0x024C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InRateClientAvg;                                           // 0x0250(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPacketsClientMax;                                        // 0x0254(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPacketsClientMin;                                        // 0x0258(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPacketsClientAvg;                                        // 0x025C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRateClientMax;                                          // 0x0260(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRateClientMin;                                          // 0x0264(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutRateClientAvg;                                          // 0x0268(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPacketsClientMax;                                       // 0x026C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPacketsClientMin;                                       // 0x0270(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPacketsClientAvg;                                       // 0x0274(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetNumClients;                                             // 0x0278(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InPackets;                                                 // 0x027C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutPackets;                                                // 0x0280(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InBunches;                                                 // 0x0284(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutBunches;                                                // 0x0288(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OutLoss;                                                   // 0x028C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           InLoss;                                                    // 0x0290(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoiceBytesSent;                                            // 0x0294(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoiceBytesRecv;                                            // 0x0298(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoicePacketsSent;                                          // 0x029C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           VoicePacketsRecv;                                          // 0x02A0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PercentInVoice;                                            // 0x02A4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PercentOutVoice;                                           // 0x02A8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumActorChannels;                                          // 0x02AC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumConsideredActors;                                       // 0x02B0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PrioritizedActors;                                         // 0x02B4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumRelevantActors;                                         // 0x02B8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumRelevantDeletedActors;                                  // 0x02BC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumReplicatedActorAttempts;                                // 0x02C0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumReplicatedActors;                                       // 0x02C4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumActors;                                                 // 0x02C8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetActors;                                              // 0x02CC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumDormantActors;                                          // 0x02D0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumInitiallyDormantActors;                                 // 0x02D4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetGUIDsAckd;                                           // 0x02D8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetGUIDsPending;                                        // 0x02DC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NumNetGUIDsUnAckd;                                         // 0x02E0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           ObjPathBytes;                                              // 0x02E4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetGUIDOutRate;                                            // 0x02E8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetGUIDInRate;                                             // 0x02EC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           NetSaturated;                                              // 0x02F0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OBTY[0x4];                                     // 0x02F4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ServerStatReplicator");
		return ptr;
	}



};

// Class Engine.ShadowMapTexture2D
// 0x0008 (FullSize[0x00F8] - InheritedSize[0x00F0])
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<Engine_EShadowMapFlags>                ShadowmapFlags;                                            // 0x00F0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S1CI[0x7];                                     // 0x00F1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}



};

// Class Engine.SimpleConstructionScript
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                 // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USCS_Node*>                           AllNodes;                                                  // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USCS_Node*                                   DefaultSceneRootNode;                                      // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_VM13[0x50];                                    // 0x0058(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SimpleConstructionScript");
		return ptr;
	}



};

// Class Engine.SkeletalMeshEditorData
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class USkeletalMeshEditorData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkeletalMeshEditorData");
		return ptr;
	}



};

// Class Engine.SkeletalMeshLODSettings
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class USkeletalMeshLODSettings : public UDataAsset
{
public:
	struct FperPlatformInt                             MinLod;                                                    // 0x0038(0x0004) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                               // 0x003C(0x0001) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                            bSupportLODStreaming;                                      // 0x003D(0x0001) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_NBM1[0x2];                                     // 0x003E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FperPlatformInt                             MaxNumStreamedLODs;                                        // 0x0040(0x0004) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FperPlatformInt                             MaxNumOptionalLODs;                                        // 0x0044(0x0004) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMeshLODGroupSettings>       LODGroups;                                                 // 0x0048(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkeletalMeshLODSettings");
		return ptr;
	}



};

// Class Engine.SkeletalMeshSimplificationSettings
// 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       SkeletalMeshReductionModuleName;                           // 0x0048(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_111O[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkeletalMeshSimplificationSettings");
		return ptr;
	}



};

// Class Engine.SkeletalMeshSocket
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0030(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       BoneName;                                                  // 0x003C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     RelativeLocation;                                          // 0x0048(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RelativeRotation;                                          // 0x0054(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct Fvector                                     RelativeScale;                                             // 0x0060(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceAlwaysAnimated;                                      // 0x006C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KHUJ[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}



	void InitializeSocketFromLocation(class UskeletalMeshComponent* SkelComp, const struct Fvector& WorldLocation, const struct Fvector& WorldNormal);
	struct Fvector GetSocketLocation(class UskeletalMeshComponent* SkelComp);
};

// Class Engine.SkyAtmosphereComponent
// 0x00D0 (FullSize[0x02E0] - InheritedSize[0x0210])
class USkyAtmosphereComponent : public USceneComponent
{
public:
	Engine_ESkyAtmosphereTransformMode                 TransformMode;                                             // 0x0210(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A2VI[0x3];                                     // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BottomRadius;                                              // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      GroundAlbedo;                                              // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AtmosphereHeight;                                          // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MultiScatteringFactor;                                     // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RayleighScatteringScale;                                   // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                RayleighScattering;                                        // 0x0228(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RayleighExponentialDistribution;                           // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieScatteringScale;                                        // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                MieScattering;                                             // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieAbsorptionScale;                                        // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                MieAbsorption;                                             // 0x0254(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieAnisotropy;                                             // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MieExponentialDistribution;                                // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OtherAbsorptionScale;                                      // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                OtherAbsorption;                                           // 0x0270(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTentDistribution                           OtherTentDistribution;                                     // 0x0280(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                                SkyLuminanceFactor;                                        // 0x028C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AerialPespectiveViewDistanceScale;                         // 0x029C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightFogContribution;                                     // 0x02A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TransmittanceMinLightElevationAngle;                       // 0x02A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EKV1[0x24];                                    // 0x02A8(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       bStaticLightingBuiltGUID;                                  // 0x02CC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_OO21[0x4];                                     // 0x02DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkyAtmosphereComponent");
		return ptr;
	}



	void SetSkyLuminanceFactor(const struct FLinearColor& newValue);
	void SetRayleighScatteringScale(float newValue);
	void SetRayleighScattering(const struct FLinearColor& newValue);
	void SetRayleighExponentialDistribution(float newValue);
	void SetOtherAbsorptionScale(float newValue);
	void SetOtherAbsorption(const struct FLinearColor& newValue);
	void SetMieScatteringScale(float newValue);
	void SetMieScattering(const struct FLinearColor& newValue);
	void SetMieExponentialDistribution(float newValue);
	void SetMieAnisotropy(float newValue);
	void SetMieAbsorptionScale(float newValue);
	void SetMieAbsorption(const struct FLinearColor& newValue);
	void SetHeightFogContribution(float newValue);
	void SetAerialPespectiveViewDistanceScale(float newValue);
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, const struct Fvector& LightDirection);
};

// Class Engine.SkyAtmosphere
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class USkyAtmosphere : public UInfo
{
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                    // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkyAtmosphere");
		return ptr;
	}



};

// Class Engine.SkyLightComponent
// 0x01D4 (FullSize[0x0430] - InheritedSize[0x025C])
class USkyLightComponent : public ULightComponentBase
{
public:
	unsigned char                                      UnknownData_LKQG[0x4];                                     // 0x025C(0x0004) Fix Super Size
	class UTextureCube*                                Cubemap;                                                   // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SourceCubemapAngle;                                        // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CubemapResolution;                                         // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkyDistanceThreshold;                                      // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCaptureEmissiveOnly;                                      // 0x0274(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLowerHemisphereIsBlack;                                   // 0x0275(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_32AL[0x2];                                     // 0x0276(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                LowerHemisphereColor;                                      // 0x0278(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionMaxDistance;                                      // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              contrast;                                                  // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionExponent;                                         // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinOcclusion;                                              // 0x0294(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fcolor                                      OcclusionTint;                                             // 0x0298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EOcclusionCombineMode>          OcclusionCombineMode;                                      // 0x029C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_4OAX[0xBB];                                    // 0x029D(0x00BB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                BlendDestinationCubemap;                                   // 0x0358(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_0S7H[0xD0];                                    // 0x0360(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}



	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetOcclusionTint(const struct Fcolor& InTint);
	void SetOcclusionExponent(float InOcclusionExponent);
	void SetOcclusionContrast(float InOcclusionContrast);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
};

// Class Engine.SlateBrushAsset
// 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 brush;                                                     // 0x0030(0x0090) (Edit, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SlateBrushAsset");
		return ptr;
	}



};

// Class Engine.SlateTextureAtlasInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class USlateTextureAtlasInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SlateTextureAtlasInterface");
		return ptr;
	}



};

// Class Engine.SmokeTestCommandlet
// 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
class USmokeTestCommandlet : public UCommandlet
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}



};

// Class Engine.SoundAttenuation
// 0x03A0 (FullSize[0x03D0] - InheritedSize[0x0030])
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings                   Attenuation;                                               // 0x0030(0x03A0) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundAttenuation");
		return ptr;
	}



};

// Class Engine.SoundClass
// 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                                // 0x0030(0x0058) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class USoundClass*>                         ChildClasses;                                              // 0x0088(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                  // 0x0098(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundModulation                            Modulation;                                                // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USoundClass*                                 ParentClass;                                               // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundClass");
		return ptr;
	}



};

// Class Engine.SoundConcurrency
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings                   Concurrency;                                               // 0x0030(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundConcurrency");
		return ptr;
	}



};

// Class Engine.SoundCue
// 0x03D8 (FullSize[0x0540] - InheritedSize[0x0168])
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bPrimeOnLoad : 1;                                          // 0x0168(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_25EJ[0x7];                                     // 0x0169(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundNode*                                  FirstNode;                                                 // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMultiplier;                                          // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMultiplier;                                           // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                      // 0x0180(0x03A0) (Edit, NativeAccessSpecifierPublic)
	float                                              SubtitlePriority;                                          // 0x0520(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_D5WH[0x4];                                     // 0x0524(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0528(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bExcludeFromRandomNodeBranchCulling : 1;                   // 0x0528(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RJYZ[0x3];                                     // 0x0529(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CookedQualityIndex;                                        // 0x052C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      bHasPlayWhenSilent : 1;                                    // 0x0530(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_G4DK[0xF];                                     // 0x0531(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}



};

// Class Engine.SoundEffectSourcePresetChain
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class USoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>             chain;                                                     // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlayEffectChainTails : 1;                                 // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1AO9[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundEffectSourcePresetChain");
		return ptr;
	}



};

// Class Engine.SoundGroups
// 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                        // 0x0030(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_JV89[0x50];                                    // 0x0040(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundGroups");
		return ptr;
	}



};

// Class Engine.SoundMix
// 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                              // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0QT6[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EQPriority;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioEQEffect                              EQSettings;                                                // 0x0038(0x0040) (Edit, NativeAccessSpecifierPublic)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                         // 0x0078(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialDelay;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeInTime;                                                // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              duration;                                                  // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeOutTime;                                               // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundMix");
		return ptr;
	}



};

// Class Engine.SoundNode
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                                // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G6TR[0x10];                                    // 0x0040(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}



};

// Class Engine.SoundNodeAssetReferencer
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class USoundNodeAssetReferencer : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeAssetReferencer");
		return ptr;
	}



};

// Class Engine.SoundNodeAttenuation
// 0x03B0 (FullSize[0x0400] - InheritedSize[0x0050])
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                      // 0x0058(0x03A0) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x03F8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_5OPJ[0x7];                                     // 0x03F9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}



};

// Class Engine.SoundNodeBranch
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                         // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GLXT[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeBranch");
		return ptr;
	}



};

// Class Engine.SoundNodeConcatenator
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0050(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}



};

// Class Engine.SoundNodeDelay
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                  // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayMax;                                                  // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}



};

// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                     // 0x0050(0x0020) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      bLooping : 1;                                              // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1UKT[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeDialoguePlayer");
		return ptr;
	}



};

// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                            // 0x0050(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}



};

// Class Engine.SoundNodeDoppler
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSmoothing;                                             // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DLEA[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SmoothingInterpSpeed;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KZ6Z[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeDoppler");
		return ptr;
	}



};

// Class Engine.SoundNodeEnveloper
// 0x0148 (FullSize[0x0198] - InheritedSize[0x0050])
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LoopEnd;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DurationAfterLoop;                                         // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LoopCount;                                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoopIndefinitely : 1;                                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoop : 1;                                                 // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D77H[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                         // 0x0068(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                          // 0x0070(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                          VolumeCurve;                                               // 0x0078(0x0088) (Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                          PitchCurve;                                                // 0x0100(0x0088) (Edit, NativeAccessSpecifierPublic)
	float                                              PitchMin;                                                  // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMax;                                                  // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMin;                                                 // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMax;                                                 // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeEnveloper");
		return ptr;
	}



};

// Class Engine.SoundNodeGroupControl
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                                // 0x0050(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeGroupControl");
		return ptr;
	}



};

// Class Engine.SoundNodeLooping
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoopIndefinitely : 1;                                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7FSX[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}



};

// Class Engine.SoundNodeMature
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class USoundNodeMature : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}



};

// Class Engine.SoundNodeMixer
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0050(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}



};

// Class Engine.SoundNodeModulator
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                  // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PitchMax;                                                  // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMin;                                                 // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VolumeMax;                                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}



};

// Class Engine.SoundNodeModulatorContinuous
// 0x0048 (FullSize[0x0098] - InheritedSize[0x0050])
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                     // 0x0050(0x0024) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                    // 0x0074(0x0024) (Edit, NoDestructor, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}



};

// Class Engine.SoundNodeOscillator
// 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                       // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bModulatePitch : 1;                                        // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LZAV[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AmplitudeMin;                                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AmplitudeMax;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrequencyMin;                                              // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FrequencyMax;                                              // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OffsetMin;                                                 // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OffsetMax;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CenterMin;                                                 // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CenterMax;                                                 // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZH32[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}



};

// Class Engine.SoundNodeParamCrossFade
// 0x0010 (FullSize[0x0070] - InheritedSize[0x0060])
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                 // 0x0060(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O3EQ[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeParamCrossFade");
		return ptr;
	}



};

// Class Engine.SoundNodeQualityLevel
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class USoundNodeQualityLevel : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeQualityLevel");
		return ptr;
	}



};

// Class Engine.SoundNodeRandom
// 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                   // 0x0050(0x0010) (Edit, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                       HasBeenUsed;                                               // 0x0060(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NumRandomUsed;                                             // 0x0070(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PreselectAtLevelLoad;                                      // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldExcludeFromBranchCulling : 1;                       // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSoundCueExcludedFromBranchCulling : 1;                    // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                          // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_N5HY[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}



};

// Class Engine.SoundNodeSoundClass
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                        // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LO5P[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeSoundClass");
		return ptr;
	}



};

// Class Engine.SoundNodeSwitch
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                          // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LTWQ[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeSwitch");
		return ptr;
	}



};

// Class Engine.SoundNodeWaveParam
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                         // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_A4O7[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}



};

// Class Engine.SoundNodeWavePlayer
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	unsigned char                                      SoundWaveAssetPtr[0x30];                                   // 0x0050(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
	class USoundWave*                                  SoundWave;                                                 // 0x0080(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_QIMA : 1;                                      // 0x0088(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bLooping : 1;                                              // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_29HB[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundNodeWavePlayer");
		return ptr;
	}



};

// Class Engine.SoundSourceBus
// 0x0018 (FullSize[0x0330] - InheritedSize[0x0318])
class USoundSourceBus : public USoundWave
{
public:
	Engine_ESourceBusChannels                          SourceBusChannels;                                         // 0x0318(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UZ36[0x3];                                     // 0x0319(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SourceBusDuration;                                         // 0x031C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoDeactivateWhenSilent : 1;                             // 0x0320(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_RMVR[0xF];                                     // 0x0321(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundSourceBus");
		return ptr;
	}



};

// Class Engine.SoundSubmixBase
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class USoundSubmixBase : public UObject
{
public:
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                             // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundSubmixBase");
		return ptr;
	}



};

// Class Engine.SoundSubmixWithParentBase
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class USoundSubmixWithParentBase : public USoundSubmixBase
{
public:
	class USoundSubmixBase*                            ParentSubmix;                                              // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundSubmixWithParentBase");
		return ptr;
	}



};

// Class Engine.SoundSubmix
// 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
class USoundSubmix : public USoundSubmixWithParentBase
{
public:
	unsigned char                                      bMuteWhenBackgrounded : 1;                                 // 0x0048(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UPLI[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                         // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                  // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerAttackTime;                                // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnvelopeFollowerReleaseTime;                               // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutputVolume;                                              // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZI5S[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnSubmixRecordedFileDone;                                  // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JDL2[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundSubmix");
		return ptr;
	}



	void StopRecordingOutput(class UObject* worldContextObject, Engine_EAudioRecordingExportType ExportType, const struct FString& name, const struct FString& path, class USoundWave* ExistingSoundWaveToOverwrite);
	void StopEnvelopeFollowing(class UObject* worldContextObject);
	void StartRecordingOutput(class UObject* worldContextObject, float ExpectedDuration);
	void StartEnvelopeFollowing(class UObject* worldContextObject);
	void SetSubmixOutputVolume(class UObject* worldContextObject, float InOutputVolume);
	void AddEnvelopeFollowerDelegate(class UObject* worldContextObject, const struct FScriptDelegate& OnSubmixEnvelopeBP);
};

// Class Engine.SoundfieldSubmix
// 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
class USoundfieldSubmix : public USoundSubmixWithParentBase
{
public:
	struct FName                                       SoundfieldEncodingFormat;                                  // 0x0048(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DTV5[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                          // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                     // 0x0060(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EncodingSettingsClass;                                     // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundfieldSubmix");
		return ptr;
	}



};

// Class Engine.EndpointSubmix
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       EndpointType;                                              // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_35LG[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EndpointSettingsClass;                                     // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                          // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.EndpointSubmix");
		return ptr;
	}



};

// Class Engine.SoundfieldEndpointSubmix
// 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
class USoundfieldEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       SoundfieldEndpointType;                                    // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_QDYN[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EndpointSettingsClass;                                     // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                          // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      EncodingSettingsClass;                                     // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                          // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                     // 0x0070(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SoundfieldEndpointSubmix");
		return ptr;
	}



};

// Class Engine.SpectatorPawnMovement
// 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0160(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YGEW[0x7];                                     // 0x0161(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SpectatorPawnMovement");
		return ptr;
	}



};

// Class Engine.SphereReflectionCapture
// 0x0008 (FullSize[0x0240] - InheritedSize[0x0238])
class USphereReflectionCapture : public UReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                         // 0x0238(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SphereReflectionCapture");
		return ptr;
	}



};

// Class Engine.SphereReflectionCaptureComponent
// 0x0014 (FullSize[0x02A0] - InheritedSize[0x028C])
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              CaptureDistanceScale;                                      // 0x028C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x0290(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V979[0x8];                                     // 0x0298(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SphereReflectionCaptureComponent");
		return ptr;
	}



};

// Class Engine.SplineMetadata
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class USplineMetadata : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SplineMetadata");
		return ptr;
	}



};

// Class Engine.SplineMeshActor
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class USplineMeshActor : public Uactor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                       // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SplineMeshActor");
		return ptr;
	}



};

// Class Engine.SplineMeshComponent
// 0x0098 (FullSize[0x0580] - InheritedSize[0x04E8])
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_KVWN[0x8];                                     // 0x04E8(0x0008) Fix Super Size
	struct FSplineMeshParams                           SplineParams;                                              // 0x04F0(0x0058) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct Fvector                                     SplineUpDir;                                               // 0x0548(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SplineBoundaryMin;                                         // 0x0554(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       CachedMeshBodySetupGuid;                                   // 0x0558(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BodySetup;                                                 // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SplineBoundaryMax;                                         // 0x0570(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                        // 0x0574(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSmoothInterpRollScale : 1;                                // 0x0574(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMeshDirty : 1;                                            // 0x0574(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESplineMeshAxis>                ForwardAxis;                                               // 0x0575(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_7F6U[0x2];                                     // 0x0576(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VirtualTextureMainPassMaxDrawDistance;                     // 0x0578(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SFHI[0x4];                                     // 0x057C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SplineMeshComponent");
		return ptr;
	}



	void UpdateMesh();
	void SetStartTangent(const struct Fvector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct Fvector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct Fvector& StartPos, const struct Fvector& StartTangent, const struct Fvector& EndPos, const struct Fvector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const struct Fvector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(TEnumAsByte<Engine_ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct Fvector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct Fvector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct Fvector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct Fvector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct Fvector GetSplineUpDir();
	TEnumAsByte<Engine_ESplineMeshAxis> GetForwardAxis();
	struct Fvector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct Fvector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
};

// Class Engine.StaticMesh
// 0x0258 (FullSize[0x02A0] - InheritedSize[0x0048])
class UStaticMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData_M41Y[0x20];                                    // 0x0048(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FperPlatformInt                             MinLod;                                                    // 0x0068(0x0004) (NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bForceShadowLOD;                                           // 0x006C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YO8A[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBHVRPerDetailModeInt                       DynamicShadowLOD;                                          // 0x0070(0x00A0) (NativeAccessSpecifierPublic)
	struct FBHVRPerDetailModeInt                       StaticShadowLOD;                                           // 0x0110(0x00A0) (NativeAccessSpecifierPublic)
	float                                              LpvBiasMultiplier;                                         // 0x01B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D7DV[0x4];                                     // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FStaticMaterial>                     StaticMaterials;                                           // 0x01B8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LightmapUVDensity;                                         // 0x01C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LightMapResolution;                                        // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LightMapCoordinateIndex;                                   // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceFieldSelfShadowBias;                               // 0x01D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverrideComponentDetailMode;                              // 0x01D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EDetailMode>                    DetailMode;                                                // 0x01D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BPAR[0x2];                                     // 0x01DA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DetailModeBitmask;                                         // 0x01DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_ELightmapGenerationMode                     LightmapGenerationMode;                                    // 0x01E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_18UT[0x3];                                     // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FperPlatformFloat                           DefaultLDMaxDrawDistance;                                  // 0x01E4(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UBodySetup*                                  BodySetup;                                                 // 0x01E8(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LODForCollision;                                           // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGenerateMeshDistanceField : 1;                            // 0x01F4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                      // 0x01F4(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHasNavigationData : 1;                                    // 0x01F4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportUniformlyDistributedSampling : 1;                  // 0x01F4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportPhysicalMaterialMasks : 1;                         // 0x01F4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIsBuiltAtRuntime : 1;                                     // 0x01F4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EBatchingMode                               BatchingMode;                                              // 0x01F5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DJ7K[0x2];                                     // 0x01F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BatchingDiameter;                                          // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowCPUAccess : 1;                                       // 0x01FC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportGpuUniformlyDistributedSampling : 1;               // 0x01FC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GM58[0x23];                                    // 0x01FD(0x0023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UStaticMeshSocket*>                   Sockets;                                                   // 0x0220(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XANX[0x10];                                    // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fvector                                     PositiveBoundsExtension;                                   // 0x0240(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     NegativeBoundsExtension;                                   // 0x024C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                            ExtendedBounds;                                            // 0x0258(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                ElementToIgnoreForTexFactor;                               // 0x0274(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0278(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_YD3W[0x8];                                     // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UObject*                                     EditableMesh;                                              // 0x0290(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavCollisionBase*                           NavCollision;                                              // 0x0298(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}



	void UpdateShadowLOD();
	void RemoveSocket(class UStaticMeshSocket* Socket);
	int GetNumSections(int InLOD);
	int GetNumLODs();
	void GetMinimumLODForPlatforms(TMap<struct FName, int>* PlatformMinimumLODs);
	int GetMinimumLODForPlatform(const struct FName& PlatformName);
	int GetMaterialIndex(const struct FName& MaterialSlotName);
	class UmaterialInterface* GetMaterial(int MaterialIndex);
	struct FBoxSphereBounds GetBounds();
	struct Fbox GetBoundingBox();
	class UStaticMeshSocket* FindSocket(const struct FName& InSocketName);
	class UStaticMeshDescription* STATIC_CreateStaticMeshDescription(class UObject* outer);
	void BuildFromStaticMeshDescriptions(TArray<class UStaticMeshDescription*> StaticMeshDescriptions, bool bBuildSimpleCollision);
	void AddSocket(class UStaticMeshSocket* Socket);
	struct FName AddMaterial(class UmaterialInterface* MATERIAL);
};

// Class Engine.StaticMeshSocket
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0030(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     RelativeLocation;                                          // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RelativeRotation;                                          // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct Fvector                                     RelativeScale;                                             // 0x0054(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     tag;                                                       // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StaticMeshSocket");
		return ptr;
	}



};

// Class Engine.StereoLayerComponent
// 0x00F0 (FullSize[0x0300] - InheritedSize[0x0210])
class UStereoLayerComponent : public USceneComponent
{
public:
	unsigned char                                      bLiveTexture : 1;                                          // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bSupportsDepth : 1;                                        // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bNoAlphaChannel : 1;                                       // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M9ZJ[0x7];                                     // 0x0211(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class Utexture*                                    texture;                                                   // 0x0218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class Utexture*                                    LeftTexture;                                               // 0x0220(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bQuadPreserveTextureRatio : 1;                             // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IESX[0x3];                                     // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   QuadSize;                                                  // 0x022C(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox2D                                      UVRect;                                                    // 0x0234(0x0014) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              CylinderRadius;                                            // 0x0248(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CylinderOverlayArc;                                        // 0x024C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CylinderHeight;                                            // 0x0250(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FEquirectProps                              EquirectProps;                                             // 0x0254(0x0048) (Deprecated, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TEnumAsByte<Engine_EStereoLayerType>               StereoLayerType;                                           // 0x029C(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<Engine_EStereoLayerShape>              StereoLayerShape;                                          // 0x029D(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_5L8R[0x2];                                     // 0x029E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStereoLayerShape*                           Shape;                                                     // 0x02A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                priority;                                                  // 0x02A8(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData_FO2T[0x54];                                    // 0x02AC(0x0054) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StereoLayerComponent");
		return ptr;
	}



	void SetUVRect(const struct FBox2D& InUVRect);
	void SetTexture(class Utexture* InTexture);
	void SetQuadSize(const struct FVector2D& InQuadSize);
	void SetPriority(int InPriority);
	void SetLeftTexture(class Utexture* InTexture);
	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);
	void MarkTextureForUpdate();
	struct FBox2D GetUVRect();
	class Utexture* GetTexture();
	struct FVector2D GetQuadSize();
	int GetPriority();
	class Utexture* GetLeftTexture();
};

// Class Engine.StereoLayerShape
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UStereoLayerShape : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StereoLayerShape");
		return ptr;
	}



};

// Class Engine.StereoLayerShapeQuad
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UStereoLayerShapeQuad : public UStereoLayerShape
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StereoLayerShapeQuad");
		return ptr;
	}



};

// Class Engine.StereoLayerShapeCylinder
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UStereoLayerShapeCylinder : public UStereoLayerShape
{
public:
	float                                              radius;                                                    // 0x0030(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OverlayArc;                                                // 0x0034(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Height;                                                    // 0x0038(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_VYED[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StereoLayerShapeCylinder");
		return ptr;
	}



	void SetRadius(float InRadius);
	void SetOverlayArc(float InOverlayArc);
	void SetHeight(int InHeight);
};

// Class Engine.StereoLayerShapeCubemap
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UStereoLayerShapeCubemap : public UStereoLayerShape
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StereoLayerShapeCubemap");
		return ptr;
	}



};

// Class Engine.StereoLayerShapeEquirect
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UStereoLayerShapeEquirect : public UStereoLayerShape
{
public:
	struct FBox2D                                      LeftUVRect;                                                // 0x0030(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                      RightUVRect;                                               // 0x0044(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                                   LeftScale;                                                 // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   RightScale;                                                // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   LeftBias;                                                  // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   RightBias;                                                 // 0x0070(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StereoLayerShapeEquirect");
		return ptr;
	}



	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);
};

// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StereoLayerFunctionLibrary");
		return ptr;
	}



	void STATIC_ShowSplashScreen();
	void STATIC_SetSplashScreen(class Utexture* texture, const struct FVector2D& scale, const struct Fvector& Offset, bool bShowLoadingMovie, bool bShowOnSet);
	void STATIC_HideSplashScreen();
	void STATIC_EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
};

// Class Engine.StringTable
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UStringTable : public UObject
{
public:
	unsigned char                                      UnknownData_7QSL[0x20];                                    // 0x0030(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.StringTable");
		return ptr;
	}



};

// Class Engine.SubsurfaceProfile
// 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    settings;                                                  // 0x0030(0x008C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_T9MD[0x4];                                     // 0x00BC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SubsurfaceProfile");
		return ptr;
	}



};

// Class Engine.SubsystemBlueprintLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SubsystemBlueprintLibrary");
		return ptr;
	}



	class UWorldSubsystem* STATIC_GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);
	class ULocalPlayerSubsystem* STATIC_GetLocalPlayerSubSystemFromPlayerController(class UplayerController* playerController, class UClass* Class);
	class ULocalPlayerSubsystem* STATIC_GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);
	class UGameInstanceSubsystem* STATIC_GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);
	class UEngineSubsystem* STATIC_GetEngineSubsystem(class UClass* Class);
};

// Class Engine.SubUVAnimation
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Horizontal;                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImages_Vertical;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ESubUVBoundingVertexCount>      BoundingMode;                                              // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EOpacitySourceMode>             OpacitySourceMode;                                         // 0x0041(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UQ77[0x2];                                     // 0x0042(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlphaThreshold;                                            // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_WNE2[0x28];                                    // 0x0048(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SubUVAnimation");
		return ptr;
	}



};

// Class Engine.TimecodeProvider
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UTimecodeProvider : public UObject
{
public:
	float                                              FrameDelay;                                                // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_JKL9[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TimecodeProvider");
		return ptr;
	}



	struct FTimecode GetTimecode();
	Engine_ETimecodeProviderSynchronizationState GetSynchronizationState();
	struct FQualifiedFrameTime GetQualifiedFrameTime();
	struct FFrameRate GetFrameRate();
	struct FTimecode GetDelayedTimecode();
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime();
};

// Class Engine.SystemTimeTimecodeProvider
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USystemTimeTimecodeProvider : public UTimecodeProvider
{
public:
	struct FFrameRate                                  FrameRate;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGenerateFullFrame;                                        // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseHighPerformanceClock;                                  // 0x0041(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1JO4[0x6];                                     // 0x0042(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.SystemTimeTimecodeProvider");
		return ptr;
	}



};

// Class Engine.TargetPoint
// 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
class UTargetPoint : public Uactor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}



};

// Class Engine.TextPropertyTestObject
// 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                             // 0x0030(0x0018) (NativeAccessSpecifierPublic)
	struct FText                                       UndefaultedText;                                           // 0x0048(0x0018) (NativeAccessSpecifierPublic)
	struct FText                                       TransientText;                                             // 0x0060(0x0018) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextPropertyTestObject");
		return ptr;
	}



};

// Class Engine.TextRenderActor
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UTextRenderActor : public Uactor
{
public:
	class UTextRenderComponent*                        TextRender;                                                // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextRenderActor");
		return ptr;
	}



};

// Class Engine.TextRenderComponent
// 0x0058 (FullSize[0x0480] - InheritedSize[0x0428])
class UTextRenderComponent : public UprimitiveComponent
{
public:
	struct FText                                       text;                                                      // 0x0428(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UmaterialInterface*                          TextMaterial;                                              // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                       Font;                                                      // 0x0448(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EHorizTextAligment>             HorizontalAlignment;                                       // 0x0450(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EVerticalTextAligment>          VerticalAlignment;                                         // 0x0451(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ON3I[0x2];                                     // 0x0452(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fcolor                                      TextRenderColor;                                           // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              XScale;                                                    // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              YScale;                                                    // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WorldSize;                                                 // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InvDefaultSize;                                            // 0x0464(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HorizSpacingAdjust;                                        // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VertSpacingAdjust;                                         // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAlwaysRenderAsText : 1;                                   // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H3B9[0xF];                                     // 0x0471(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextRenderComponent");
		return ptr;
	}



	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetVertSpacingAdjust(float Value);
	void SetVerticalAlignment(TEnumAsByte<Engine_EVerticalTextAligment> Value);
	void SetTextRenderColor(const struct Fcolor& Value);
	void SetTextMaterial(class UmaterialInterface* MATERIAL);
	void SetText(const struct FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<Engine_EHorizTextAligment> Value);
	void SetFont(class UFont* Value);
	void K2_SetText(const struct FText& Value);
	struct Fvector GetTextWorldSize();
	struct Fvector GetTextLocalSize();
};

// Class Engine.Texture2DArray
// 0x0058 (FullSize[0x0118] - InheritedSize[0x00C0])
class UTexture2DArray : public Utexture
{
public:
	unsigned char                                      UnknownData_90Z6[0x58];                                    // 0x00C0(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Texture2DArray");
		return ptr;
	}



};

// Class Engine.Texture2DDynamic
// 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
class UTexture2DDynamic : public Utexture
{
public:
	unsigned char                                      UnknownData_QNZI[0x8];                                     // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EPixelFormat>              Format;                                                    // 0x00C8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_1ODP[0xF];                                     // 0x00C9(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.Texture2DDynamic");
		return ptr;
	}



};

// Class Engine.TextureLightProfile
// 0x0008 (FullSize[0x00F8] - InheritedSize[0x00F0])
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              brightness;                                                // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TextureMultiplier;                                         // 0x00F4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextureLightProfile");
		return ptr;
	}



};

// Class Engine.TextureMipDataProviderFactory
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UTextureMipDataProviderFactory : public UAssetUserData
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextureMipDataProviderFactory");
		return ptr;
	}



};

// Class Engine.TextureRenderTargetCube
// 0x0018 (FullSize[0x00E0] - InheritedSize[0x00C8])
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                sizeX;                                                     // 0x00C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                ClearColor;                                                // 0x00CC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x00DC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHDR : 1;                                                  // 0x00DD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00DD(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_NA51[0x2];                                     // 0x00DE(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}



};

// Class Engine.ThumbnailInfo
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UThumbnailInfo : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.ThumbnailInfo");
		return ptr;
	}



};

// Class Engine.TimelineComponent
// 0x00B0 (FullSize[0x0168] - InheritedSize[0x00B8])
class UTimelineComponent : public UactorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                               // 0x00B8(0x00A8) (Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0160(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_KAKL[0x7];                                     // 0x0161(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TimelineComponent");
		return ptr;
	}



	void stop();
	void SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName);
	void SetTimelineLengthMode(TEnumAsByte<Engine_ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName);
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName);
	void ReverseFromEnd();
	void reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
	bool GetIgnoreTimeDilation();
};

// Class Engine.TimelineTemplate
// 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_ETimelineLengthMode>            LengthMode;                                                // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bAutoPlay : 1;                                             // 0x0035(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoop : 1;                                                 // 0x0035(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bReplicated : 1;                                           // 0x0035(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0035(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_MELX[0x2];                                     // 0x0036(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              UpdateInterval;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BY7F[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTTEventTrack>                       EventTracks;                                               // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                               // 0x0050(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                              // 0x0060(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                         // 0x0070(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x0080(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fguid                                       TimelineGuid;                                              // 0x0090(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       VariableName;                                              // 0x00A0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       DirectionPropertyName;                                     // 0x00AC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       UpdateFunctionName;                                        // 0x00B8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FName                                       FinishedFunctionName;                                      // 0x00C4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TimelineTemplate");
		return ptr;
	}



};

// Class Engine.TireType
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_GD50[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TireType");
		return ptr;
	}



};

// Class Engine.TouchInterface
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                                  // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ActiveOpacity;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InactiveOpacity;                                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeUntilDeactive;                                         // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeUntilReset;                                            // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ActivationDelay;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPreventRecenter;                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_O786[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StartupDelay;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XHL6[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TouchInterface");
		return ptr;
	}



};

// Class Engine.TriggerBase
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UTriggerBase : public Uactor
{
public:
	class UShapeComponent*                             CollisionComponent;                                        // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TriggerBase");
		return ptr;
	}



};

// Class Engine.TriggerBox
// 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
class UTriggerBox : public UTriggerBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TriggerBox");
		return ptr;
	}



};

// Class Engine.TriggerCapsule
// 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
class UTriggerCapsule : public UTriggerBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TriggerCapsule");
		return ptr;
	}



};

// Class Engine.TriggerSphere
// 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
class UTriggerSphere : public UTriggerBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TriggerSphere");
		return ptr;
	}



};

// Class Engine.TriggerVolume
// 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
class UTriggerVolume : public Uvolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}



};

// Class Engine.TwitterIntegrationBase
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.TwitterIntegrationBase");
		return ptr;
	}



	bool TwitterRequest(const struct FString& Url, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<Engine_ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& Url, const struct FString& Picture);
	void Init();
	int GetNumAccounts();
	struct FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};

// Class Engine.UserDefinedEnum
// 0x0050 (FullSize[0x00B8] - InheritedSize[0x0068])
class UUserDefinedEnum : public UEnum
{
public:
	TMap<struct FName, struct FText>                   DisplayNameMap;                                            // 0x0068(0x0050) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.UserDefinedEnum");
		return ptr;
	}



};

// Class Engine.UserDefinedStruct
// 0x0048 (FullSize[0x0110] - InheritedSize[0x00C8])
class UUserDefinedStruct : public UScriptStruct
{
public:
	TEnumAsByte<Engine_EUserDefinedStructureStatus>    Status;                                                    // 0x00C8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_UDHM[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct Fguid                                       guid;                                                      // 0x00CC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_G9QN[0x34];                                    // 0x00DC(0x0034) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.UserDefinedStruct");
		return ptr;
	}



};

// Class Engine.UserInterfaceSettings
// 0x0270 (FullSize[0x02B8] - InheritedSize[0x0048])
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	Engine_ERenderFocusRule                            RenderFocusRule;                                           // 0x0048(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SB8G[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TMap<TEnumAsByte<CoreUObject_EMouseCursor>, struct FHardwareCursorReference> HardwareCursors;                                           // 0x0050(0x0050) (Edit, Config, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<CoreUObject_EMouseCursor>, struct FSoftClassPath> SoftwareCursors;                                           // 0x00A0(0x0050) (Edit, Config, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              DefaultCursor;                                             // 0x00F0(0x0020) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              TextEditBeamCursor;                                        // 0x0110(0x0020) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              CrosshairsCursor;                                          // 0x0130(0x0020) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              HandCursor;                                                // 0x0150(0x0020) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GrabHandCursor;                                            // 0x0170(0x0020) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              GrabHandClosedCursor;                                      // 0x0190(0x0020) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                              SlashedCircleCursor;                                       // 0x01B0(0x0020) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              applicationScale;                                          // 0x01D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Engine_EUIScalingRule                              UIScaleRule;                                               // 0x01D4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_S0X4[0x3];                                     // 0x01D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSoftClassPath                              CustomScalingRuleClass;                                    // 0x01D8(0x0020) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                              // 0x01F8(0x0088) (Edit, Config, NativeAccessSpecifierPublic)
	bool                                               bAllowHighDPIInGameMode;                                   // 0x0280(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLoadWidgetsOnDedicatedServer;                             // 0x0281(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_OC42[0x6];                                     // 0x0282(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             CursorClasses;                                             // 0x0288(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                      CustomScalingRuleClassInstance;                            // 0x0298(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDPICustomScalingRule*                       CustomScalingRule;                                         // 0x02A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_PUCX[0x10];                                    // 0x02A8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.UserInterfaceSettings");
		return ptr;
	}



};

// Class Engine.VectorField
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UVectorField : public UObject
{
public:
	struct Fbox                                        Bounds;                                                    // 0x0030(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              intensity;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VectorField");
		return ptr;
	}



};

// Class Engine.VectorFieldAnimated
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  texture;                                                   // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EVectorFieldConstructionOp>     ConstructionOp;                                            // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_SMAP[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VolumeSizeX;                                               // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                VolumeSizeY;                                               // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                VolumeSizeZ;                                               // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImagesX;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SubImagesY;                                                // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FrameCount;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FramesPerSecond;                                           // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bLoop : 1;                                                 // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B9DC[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UVectorFieldStatic*                          NoiseField;                                                // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseScale;                                                // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseMax;                                                  // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VectorFieldAnimated");
		return ptr;
	}



};

// Class Engine.VectorFieldComponent
// 0x0028 (FullSize[0x0450] - InheritedSize[0x0428])
class UVectorFieldComponent : public UprimitiveComponent
{
public:
	class UVectorField*                                VectorField;                                               // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              intensity;                                                 // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Tightness;                                                 // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPreviewVectorField : 1;                                   // 0x0438(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_YO0J[0x17];                                    // 0x0439(0x0017) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VectorFieldComponent");
		return ptr;
	}



	void SetIntensity(float NewIntensity);
};

// Class Engine.VectorFieldStatic
// 0x0050 (FullSize[0x00A0] - InheritedSize[0x0050])
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                sizeX;                                                     // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                sizeY;                                                     // 0x0054(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SizeZ;                                                     // 0x0058(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowCPUAccess;                                           // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_69QC[0x33];                                    // 0x005D(0x0033) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVector4>                            CPUData;                                                   // 0x0090(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VectorFieldStatic");
		return ptr;
	}



};

// Class Engine.VectorFieldVolume
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UVectorFieldVolume : public Uactor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                      // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VectorFieldVolume");
		return ptr;
	}



};

// Class Engine.VirtualTexture
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UVirtualTexture : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VirtualTexture");
		return ptr;
	}



};

// Class Engine.LightMapVirtualTexture
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class ULightMapVirtualTexture : public UVirtualTexture
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightMapVirtualTexture");
		return ptr;
	}



};

// Class Engine.LightMapVirtualTexture2D
// 0x0010 (FullSize[0x0100] - InheritedSize[0x00F0])
class ULightMapVirtualTexture2D : public UTexture2D
{
public:
	TArray<int8_t>                                     TypeToLayer;                                               // 0x00F0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.LightMapVirtualTexture2D");
		return ptr;
	}



};

// Class Engine.VirtualTexturePoolConfig
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UVirtualTexturePoolConfig : public UObject
{
public:
	int                                                DefaultSizeInMegabyte;                                     // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_HUXE[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVirtualTextureSpacePoolConfig>      Pools;                                                     // 0x0038(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VirtualTexturePoolConfig");
		return ptr;
	}



};

// Class Engine.VisualLoggerAutomationTests
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UVisualLoggerAutomationTests : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VisualLoggerAutomationTests");
		return ptr;
	}



};

// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UVisualLoggerDebugSnapshotInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VisualLoggerDebugSnapshotInterface");
		return ptr;
	}



};

// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VisualLoggerKismetLibrary");
		return ptr;
	}



	void STATIC_RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);
	void STATIC_logText(class UObject* worldContextObject, const struct FString& text, const struct FName& LogCategory, bool bAddToMessageLog);
	void STATIC_LogSegment(class UObject* worldContextObject, const struct Fvector& SegmentStart, const struct Fvector& SegmentEnd, const struct FString& text, const struct FLinearColor& ObjectColor, float Thickness, const struct FName& CategoryName, bool bAddToMessageLog);
	void STATIC_LogLocation(class UObject* worldContextObject, const struct Fvector& location, const struct FString& text, const struct FLinearColor& ObjectColor, float radius, const struct FName& LogCategory, bool bAddToMessageLog);
	void STATIC_LogBox(class UObject* worldContextObject, const struct Fbox& BoxShape, const struct FString& text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory, bool bAddToMessageLog);
	void STATIC_EnableRecording(bool bEnabled);
};

// Class Engine.VoiceChannel
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UVoiceChannel : public Uchannel
{
public:
	unsigned char                                      UnknownData_FYHY[0x10];                                    // 0x0078(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}



};

// Class Engine.VOIPTalker
// 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
class UVOIPTalker : public UactorComponent
{
public:
	struct FVoiceSettings                              settings;                                                  // 0x00B8(0x0018) (Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_KERV[0x20];                                    // 0x00D0(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VOIPTalker");
		return ptr;
	}



	void RegisterWithPlayerState(class UplayerState* OwningState);
	float GetVoiceLevel();
	class UVOIPTalker* STATIC_CreateTalkerForPlayer(class UplayerState* OwningState);
	void BPOnTalkingEnd();
	void BPOnTalkingBegin(class UAudioComponent* AudioComponent);
};

// Class Engine.VOIPStatics
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UVOIPStatics : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VOIPStatics");
		return ptr;
	}



	void STATIC_SetMicThreshold(float InThreshold);
};

// Class Engine.VolumeTexture
// 0x0058 (FullSize[0x0118] - InheritedSize[0x00C0])
class UVolumeTexture : public Utexture
{
public:
	unsigned char                                      UnknownData_MTQA[0x58];                                    // 0x00C0(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VolumeTexture");
		return ptr;
	}



};

// Class Engine.VolumetricLightmapDensityVolume
// 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
class UVolumetricLightmapDensityVolume : public Uvolume
{
public:
	struct FInt32Interval                              AllowedMipLevelRange;                                      // 0x0268(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.VolumetricLightmapDensityVolume");
		return ptr;
	}



};

// Class Engine.WindDirectionalSource
// 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
class UWindDirectionalSource : public UInfo
{
public:
	class UWindDirectionalSourceComponent*             component;                                                 // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}



};

// Class Engine.WindDirectionalSourceComponent
// 0x0020 (FullSize[0x0230] - InheritedSize[0x0210])
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              Strength;                                                  // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              speed;                                                     // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinGustAmount;                                             // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxGustAmount;                                             // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              radius;                                                    // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPointWind : 1;                                            // 0x0224(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_BT34[0xB];                                     // 0x0225(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}



	void SetWindType(Engine_EWindSourceType InNewType);
	void SetStrength(float InNewStrength);
	void SetSpeed(float InNewSpeed);
	void SetRadius(float InNewRadius);
	void SetMinimumGustAmount(float InNewMinGust);
	void SetMaximumGustAmount(float InNewMaxGust);
};

// Class Engine.WorldComposition
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData_8ALS[0x20];                                    // 0x0030(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULevelStreaming*>                     TilesStreaming;                                            // 0x0050(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                             TilesStreamingTimeThreshold;                               // 0x0060(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLoadAllTilesDuringCinematic;                              // 0x0068(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRebaseOriginIn3DSpace;                                    // 0x0069(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_85SE[0x2];                                     // 0x006A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RebaseOriginDistance;                                      // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.WorldComposition");
		return ptr;
	}



};

// Class Engine.HierarchicalLODSetup
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UHierarchicalLODSetup : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>         HierarchicalLODSetup;                                      // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      OverrideBaseMaterial[0x30];                                // 0x0040(0x0030) UNKNOWN PROPERTY: SoftObjectProperty


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.HierarchicalLODSetup");
		return ptr;
	}



};

// Class Engine.WorldSettings
// 0x0180 (FullSize[0x03B0] - InheritedSize[0x0230])
class UWorldSettings : public UInfo
{
public:
	unsigned char                                      UnknownData_9O7P[0x8];                                     // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VisibilityCellSize;                                        // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<Engine_EVisibilityAggressiveness>      VisibilityAggressiveness;                                  // 0x023C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPrecomputeVisibility : 1;                                 // 0x023D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                      // 0x023D(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableWorldBoundsChecks : 1;                              // 0x023D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableNavigationSystem : 1;                               // 0x023D(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      bEnableAISystem : 1;                                       // 0x023D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableWorldComposition : 1;                               // 0x023D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseClientSideLevelStreamingVolumes : 1;                   // 0x023D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                            // 0x023D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bWorldGravitySet : 1;                                      // 0x023E(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bGlobalGravitySet : 1;                                     // 0x023E(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMinimizeBSPSections : 1;                                  // 0x023E(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bForceNoPrecomputedLighting : 1;                           // 0x023E(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHighPriorityLoading : 1;                                  // 0x023E(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                             // 0x023E(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bOverrideDefaultBroadphaseSettings : 1;                    // 0x023E(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_V2U5[0x1];                                     // 0x023F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                    // 0x0240(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                            // 0x0248(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              WorldToMeters;                                             // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KillZ;                                                     // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      KillZDamageType;                                           // 0x0258(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WorldGravityZ;                                             // 0x0260(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalGravityZ;                                            // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultPhysicsVolumeClass;                                 // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultGameMode;                                           // 0x0278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      GameNetworkManagerClass;                                   // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PackedLightAndShadowMapTextureSize;                        // 0x0288(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Fvector                                     DefaultColorScale;                                         // 0x028C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DoAllowBatching;                                           // 0x0298(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_67S3[0x3];                                     // 0x0299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                  // 0x029C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GlobalDistanceFieldViewDistance;                           // 0x02A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;              // 0x02A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReverbSettings                             DefaultReverbSettings;                                     // 0x02A8(0x0020) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                                // 0x02C8(0x0024) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                              MonoCullingDistance;                                       // 0x02EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundMix*                                   DefaultBaseSoundMix;                                       // 0x02F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeDilation;                                              // 0x02F8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MatineeTimeDilation;                                       // 0x02FC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DemoPlayTimeDilation;                                      // 0x0300(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinGlobalTimeDilation;                                     // 0x0304(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxGlobalTimeDilation;                                     // 0x0308(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinUndilatedFrameTime;                                     // 0x030C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxUndilatedFrameTime;                                     // 0x0310(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBroadphaseSettings                         BroadphaseSettings;                                        // 0x0314(0x0040) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ELF7[0x4];                                     // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UplayerState*                                Pauser;                                                    // 0x0358(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetViewer>                          ReplicationViewers;                                        // 0x0360(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0370(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UplayerState*                                PauserPlayerState;                                         // 0x0380(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxNumberOfBookmarks;                                      // 0x0388(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData_RR0F[0x4];                                     // 0x038C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DefaultBookmarkClass;                                      // 0x0390(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UBookmarkBase*>                       BookmarkArray;                                             // 0x0398(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                      LastBookmarkClass;                                         // 0x03A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)


	static UClass* StaticClass()
	{
		static auto ptr = nullptr;
	if (!ptr)
		ptr = 
UObject::FindClass("Class Engine.WorldSettings");
		return ptr;
	}



	void OnRep_WorldGravityZ();
};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
